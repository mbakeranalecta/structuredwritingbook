<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Subject domain structures</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<title>type, term</title>

<p>concept, subject structures</p>
</index>
<p>Not all content can be meaningfully moved into the subject domain. The subject domain requires a repeatable rhetorical structure. Sometimes the nature of your content, your subject matter, or your argument does not lend itself to a repeatable structure. In those cases, the best you can do is work in the document domain. However, you can add subject-domain annotations and indexing (as described in <citation nameref="chapter.linking"/>) – marking up significant subjects in your content by their type and value – across all your subject-domain and document-domain content, allowing you to apply the conformance, change management, linking, and information architecture algorithms across your entire body of content.</p>
<p>But, as I noted in <citation nameref="chapter.blocks"/>, you can move a lot of your content into the subject domain, even if it does not currently obey a closely defined rhetorical type, and you can move your content into smaller <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> that are easier to apply a repeatable rhetorical structure to. In this chapter I walk through the steps of defining a repeatable rhetorical type using the recipe example we have been looking at throughout the book.</p>
<p>To begin, let’s take a step back and look at <citation nameref="fig.hbe-unstructured-recipe"/>, which shows what a recipe might look like if it were not presented in its familiar rhetorical pattern.</p>
<figure name="fig.hbe-unstructured-recipe">
<title>Unstructured recipe for hard-boiled eggs</title>

<codeblock language="reStructuredText">
Hard-Boiled Eggs
================
A hard-boiled egg is simple and nutritious. 
Place 12 eggs in a pan and cover with 
water. Bring water to a boil. Remove
from heat and cover for 12 minutes.Place eggs
in cold water to stop cooking. Peel and 
serve. Prep time, 15 minutes. Serves 6.
</codeblock>
</figure>
<p>If you were discerning the rhetorical structure of a recipe for the first time, you might look at several examples, try making the dishes or observe others doing so, and conclude that it is easier to find and follow a recipe if the ingredients are listed separately and the preparation steps are presented one at a time. You might then come up with a structure that looks like <citation nameref="fig.hbe-structured-recipe"/>.</p>
<figure name="fig.hbe-structured-recipe">
<title>Basic structured recipe for hard-boiled eggs</title>

<codeblock language="reStructuredText">
Hard-Boiled Eggs
================
A hard-boiled egg is simple and nutritious. 
Prep time, 15 minutes. Serves 6.
    
Ingredients
-----------
    ======  ========
    Item    Quantity
    ======  ========
    eggs    12
    water   2qt
    ======  ========
    
Preparation
-----------
    1. Place eggs in pan and cover with water.
    2. Bring water to a boil.
    3. Remove from heat and cover for 12 minutes.
    4. Place eggs in cold water to stop cooking.
    5. Peel and serve.
</codeblock>
</figure>
<p>At this point you have the basic rhetorical pattern of a recipe, but you don’t have any formal constraints for writers to make the format repeatable. To fix this, you could create a rhetorical block named <code>recipe</code> that contains three semantic blocks: <code>introduction</code>, <code>ingredients</code>, and <code>preparation</code>. This step factors out the titles of those sections. You might also decide to present the ingredients as a bulleted list and the preparation as a numbered list (these lists are document-domain semantic blocks, composed of structural blocks that we need not delve into here). <citation nameref="fig.hbe-rhetorical-block"/> shows the result of these steps.</p>
<p>This defines the basic rhetoric of a recipe – it enforces the rhetorical constraint. This structure stands at the intersection between the document and subject domains. It is <phrase><annotation type="concept">document domain</annotation></phrase> in the sense that it describes the structure of a document, but also <phrase><annotation type="concept">subject domain</annotation></phrase> in that it is specific to a single subject and defines the document structure in terms of the rhetoric of that particular subject. This structure provides guidance for writers, which helps with <phrase><annotation type="algorithm">repeatability</annotation></phrase>, but when you look closer, there are some other things that can be made repeatable in the rhetorical model to make sure they are included every time.</p>
<figure name="fig.hbe-rhetorical-block">
<title>Hard-boiled egg recipe as a rhetorical block</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
</codeblock>
</figure>
<p>Two obvious items are prep time and the number of servings. These are important items that should be in every recipe, but currently they are only in the introduction, where writers could forget them. Also, algorithms can’t access them, so if you wanted to make a collection of recipes that took less than 30 minutes to make, you would not be able to find them algorithmically. So let’s pull those items out into separate fields. Now you can verify that they are included and that algorithms can find the information (see <citation nameref="fig.hbe-add-prep-serves"/>).</p>
<figure name="fig.hbe-add-prep-serves">
<title>Hard-boiled egg recipe with prep time and servings added</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious. 
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</codeblock>
</figure>
<p>But if you look a little closer, you will see more information that should be provided consistently and repeatably – the list of ingredients. You probably want to make this information accessible to algorithms, so you can handle it differently for different media or audiences.</p>
<p>There are three elements to an ingredients list: the name of the ingredient, the quantity required, and the unit of measurement for that quantity. Different units of measure are used for different types of ingredients and for large and small quantities in cooking, so you have to specify the unit of measure each time. The ingredients section of <citation nameref="fig.hbe-add-ingredients"/> uses pure subject-domain markup – the rhetoric has been factored out leaving pure data.</p>
<figure name="fig.hbe-add-ingredients">
<title>Hard-boiled egg recipe with ingredients list added</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</codeblock>
</figure>
<p>Once you have put all of the current content into repeatable, accessible structures, it is time to think about whether there is any other information that should be included.</p>
<p>Usually during this process, people start to say things like “Wait, shouldn’t we tell them X?” Sometimes X is included in one or two of the examples that you are looking at, and you realize it would be useful in all of them. Sometimes it occurs to people for the first time that X might be valuable. The process of formalizing the information you are proposing to offer often produces the realization that there is valuable information that you have not been providing or not providing consistently in your current content.</p>
<p>Also, it is at this stage that you should think about differential single sourcing, where you might want to capture content that should be presented differently in different domains and reuse scenarios or where you have information presented in one publication but not another.</p>
<p>Therefore, you might decide to add wine and beverage matches and nutritional information to the model (see <citation nameref="fig.hbe-add-beverage"/>).</p>
<figure name="fig.hbe-add-beverage">
<title>Hard-boiled egg recipe with beverage and nutrition information</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g               
</codeblock>
</figure>
<p>Once you are satisfied that the overall structure of the <phrase><annotation type="structure">rhetorical block</annotation></phrase> is correct, it is time to think about <phrase><annotation type="structure">subject annotation</annotation></phrase>. Annotating subjects that are significant to the subject matter of the information set makes that information available for many purposes, from linking and formatting to validation and auditing. To do this, go through the text looking for mentions of subjects related to cooking. As you find mentions of food, utensils, and common cooking tasks, add annotation markup for them to your model. <citation nameref="fig.hbe-add-annotations"/> contains annotations for items that can be classified as food, utensils, and tasks.</p>
<figure name="fig.hbe-add-annotations">
<title>Hard-boiled recipe with annotations</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled {egg}(food) is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in (pan){utensil} and cover with water.
        2. {Bring water to a boil}(task).
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</codeblock>
</figure>
<p>This process can raise some interesting questions. For example, you might notice that every recipe uses utensils. If that’s the case, why not make a list of utensils? Wouldn’t such a list help readers determine if they have the equipment needed to make a recipe? And you might notice that a close cousin of the recipe, the knitting pattern, does list equipment: the precise knitting needles used.</p>
<p>So, should you change the structure of the rhetorical block to include a list of utensils? Specifying subject affinities formally forces you to think systematically about the correct rhetoric for your subject matter and audience. Sometimes the answer to questions like this is no. Over the years, cooks around the world have determined that while a list of ingredients is an essential part of the rhetorical structure of a recipe, a list of utensils is not. Don’t create additional structures just because you can. Create them because they enhance your rhetoric or process.</p>
<p>Finally, you may want to think about whether there is any management-domain metadata that you need to add to the model. In <citation nameref="chapter.metadata"/> and <citation nameref="chapter.content-management"/> I consider how much management metadata belongs in the content model itself, as opposed to an external system. Here it is sufficient to note that you may need additional management metadata to support your processes. <citation nameref="fig.hbe-add-mgmt-info"/> adds some basic tracking metadata, such as the author’s name and copyright information.</p>
<figure name="fig.hbe-add-mgmt-info">
<title>Hard-boiled recipe with management-domain information</title>

<codeblock language="sam">
recipe: Hard-Boiled Egg
    author: bcrocker
    rights: full
    season: winter, spring, summer, fall
    introduction:
        A hard-boiled {egg}(food) is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in (pan){utensil} and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</codeblock>
</figure>
<p>Management-domain metadata may not be part of your current content examples. This is alright, because adding management metadata should be the last step in this process. Once you have formalized the rest of the model, you may find that the subject-domain data you have delineated is usable for management and tracking purposes as well, and you don’t need to add fields just for management. For instance, you can use <phrase><annotation type="concept">subject-domain</annotation></phrase> information to manage which recipes you include in particular publications. For example, with the information in these examples, you could assemble quick and easy meals (less than 20 minutes prep time, fewer than 6 ingredients, fewer than 5 steps) or a low-cal vegetarian cookbook (fewer than 160 calories, no meat ingredients).</p>
<section>
<title>Keep it simple and lucid</title>

<p>Most <phrase><annotation type="concept">subject-domain</annotation></phrase> languages are small, simple, and fairly strict in their constraints. This is as it should be. Since you have to design them, and the algorithms that translate them into the <phrase><annotation type="concept">document domain</annotation></phrase> for publishing, you don’t want them to be elaborate or full of different structural permutations. The point of a subject-domain language is to partition the gathering of information about a subject from all the processes that you might want to perform on that content, from differential single sourcing to linking to information architecture to content reuse.</p>
<p>If you find yourself needing a similar language for a related subject, it is usually better to create a new, equally small and strict language for that subject rather than trying to make one language cover both. Subject-domain languages get both their power and ease of use from the simple and direct way that the language relates to its subject matter. Trying to make one language cover more than one subject takes away from these properties. If you have ever tried to fill out a government form in which different people or entities are supposed to fill out different fields in different ways, you know how difficult it can be to be sure you have filled out all the sections, and just the sections, that apply to you. It is far better to have one form for each case (though obviously you need to make it clear which case each form applies to).</p>
<p>A <phrase><annotation type="concept">subject-domain</annotation></phrase> language should communicate with writers in terms they understand. This means that the names of structures should make sense to them, but it also means that the way that the formal structures break things up should make intuitive sense as well. For writers with experience in the field, a subject-domain language should be such a good fit that they don’t really feel like they have to learn anything to use it. This vastly increases the <phrase><annotation type="concept">functional lucidity</annotation></phrase> of the language, leaving more of the writer’s attention free to focus on the subject matter and the aspects of rhetoric that cannot be modeled, while at the same time providing constraints and guidance to make sure that the resulting content is complete and consistent.</p>
<p>Be careful not to take things too far. Once you get started, it is easy to get carried away and formally describe the subject matter in finer and finer detail. Remember that all of this effort is wasted unless it helps improve your rhetoric or process. If you get to the point where more precisely modeling the subject matter makes your markup mysterious, tedious, or difficult to create, you can do more harm than good, reducing <phrase><annotation type="concept">functional lucidity</annotation></phrase> without any compensating increase in quality or efficiency.</p>
</section>
</chapter>
