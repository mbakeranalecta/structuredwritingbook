<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.architecture">
<title>Information Architecture</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<term>information architecture</term>
</row>
<row>
<type>concept</type>
<term>bottom-up information architecture</term>
</row>
<row>
<type>concept</type>
<term>top-down information architecture</term>
</row>
</index>
<p>Information architecture is the arrangement of content so that it can be found and navigated. In other words, it is an attempt to transfer some of the complexity of information finding from the reader to the organization. But information architecture can be tricky. It is all too easy to think of it simply in terms of organizing things, and that can be a trap. An institution with a lot of content has its internal information finding problems to deal with, and often information architecture becomes an exercise in organizing the content for the convenience of the institution rather than the reader.</p>
<p>It is easy to think that organization is an absolute. Content is either organized or not. But this is not so. Organization is an orientation of content according to our knowledge and expectations. Things are organized for us if their location, or the means of retrieving them, match what we expect and know. But what the institution (and its staff) knows and expects is very different from what the reader knows and expects. What is organization for the institution can be chaos for the reader.</p>
<p>More than this, unless content follows an organizational scheme that the reader is already familiar with, or at least makes intuitive sense in terms of what they expect and know, few readers will be likely to spend much mental energy on trying to figure out a complex organizational scheme, even one that was designed with them in mind. Instead, they will forage for information, which, in the Web world, means that they will use search and will follow links as long as they believe that the scent of the information they are looking for is growing stronger. (We discussed information foraging in <citation type="nameref" value="chapter.linking"/>. For a more in-depth treatment of information foraging and it implications for information architecture, see <phrase><annotation type="citetitle">Every Page is Page One: Topic-based writing for Technical Communication and the Web</annotation></phrase>.)</p>
<p>It is a mistake, therefore, to think of information architecture simply in terms of organization. A building supply store organizes building materials. An architect takes those materials and uses them to construct an navigable edifice full of useful spaces with efficient passages between them. The organization and standardization of materials provided by the building supply store is highly important to the architect in their work, but organization and standardization are just starting points for the unique and useful edifice that the architect will design and build.</p>
<p>We have always had information architecture. The term is new, but not the need or the concept. In the past, though, information architecture was divided into two pieces. The basic unit of information was the book and the “architecture” of the book was an integral part of the responsibility of the author and editor. Larger sets of information were created by collecting and organizing books and that was the responsibility of the librarian or bookseller. (Libraries and book stores have different information architectures to serve different purposes.)</p>
<p>Those larger collections were, indeed, no more than forms of organization. If there was an architecture at that scale it was in the expertise of the librarian or book seller to make inferences from the clients needs and create useful connections.</p>
<p>With the advent of online media, first in the form of large capacity electronic media such as CD-ROMs and then the Internet and the Web, this division of architectural responsibilities was overthrown. The basic unit of information in electronic media is not the book but the page. Thanks to hypertext linking, the relationships between pages in electronic media are much more complex than on paper. This makes it possible to practice real information architecture, not mere organization, at a much larger scale than before.</p>
<p>Also, the architecture of online media has to account for the ability to add, modify, and delete individual bits of content at any time. It is possible to think of book or library architectures in largely static terms. It is a serious mistake to think of Web architectures as static.</p>
<p>This leads to the development of architectures of much smaller units with much more complex relationships to a much larger, more diverse, and more rapidly changing set of resources. These architectures include not only text and static graphics but active media: videos, animation, and dynamic feeds and information widgets. Given these factors, the old separation of roles between writer and librarian no longer works. Authors have to be much more conscious of how their pages interact with other pages in the collection, including those created by others. The scale at which these small pieces of content relate with each other is much greater than the scale at which the pieces of a book related to each other. This constitutes a significant increase in complexity and calls for a whole new approach to information architecture, and for the appearance of a function and a role that had no equivalent in the paper world. Thus the term “information architecture” was born, not to name something entirely new, but something transformed by new technology.</p>
<p>Information architecture as a discipline in its own right, as opposed to being an aspect of authorship or librarianship, has arisen to combat the chaos that emerged in many websites as they began to grow, lacking an overall organizing principle or influence. But we should recognize that information architecture is as much part of the book world as it is part of the web world, even if it was  not traditionally a job title in the book world. And if you are producing both web-like content and book-like content, your information architecture has to comprehend both. I have spoken at many points about structured writing, particularly in the subject domain, being used to transfer complexity from the writer to the information architect or the content engineer. It is the vast increase in the complexity of information architecture that makes this transfer necessary. But it also points out how much information needs to pass from the writer to the information architect for the information architect to do their job and not let any of the complexity slip through the cracks. Correct partitioning is essential to success in this area.</p>
<p>Because information architecture involves the organization of large bodies of content it can benefit greatly from structured writing techniques. Structured writing can give works of content a more definite character and identity which makes them easier to organize. By providing <phrase><annotation type="algorithm" specifically="authoring">guidance</annotation></phrase> and <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> to authors it allows information architects to better communicate and validate requirements. By making the content more accessible to algorithms, it allows the use of algorithms to do information architecture tasks, such as the automated organization and <phrase><annotation type="algorithm">linking</annotation></phrase> of content.</p>
<section>
<title>Top-down vs. bottom-up information architecture</title>
<p>How can structured writing structures and algorithms support information architecture in structured writing?</p>
<p>I’m going to start with making a basic distinction between two types of information architecture: <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> and <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up</annotation></phrase>. Top down information architecture deals with navigational aids and organizing systems that stand apart from the content and point to it. A table of contents or a website menu system is a piece of top-down information architecture. Bottom-up information architecture deals with navigation and organization that exists within the content itself. A web site with a consistent approach to hypertext links within its pages is an example of a bottom-up information architecture.</p>
<p>But bottom-up information architecture is not just about linking, it is about the way content is written. A topic in a bottom-up information architecture is designed to be entered via search or links from almost anywhere (as opposed to being designed to be entered exclusively from a previous chapter). But it is also designed to help readers with onward navigation, to be a hub of its local subject space, offering readers many onward vectors according to their needs and interests. I call this approach to information design <phrase><annotation type="concept">Every Page is Page One</annotation></phrase>, and it is described in my book, <phrase><annotation type="citetitle">Every Page is Page One: Topic-based Writing for Technical Communication and the Web</annotation></phrase>. One of the key principles of Every Page is Page One is that a topic should follow a well defined rhetorical pattern or type. Structured writing, particularly <phrase><annotation type="concept">subject-domain</annotation></phrase> structured writing, is very useful in developing Every Page is Page One content. For more on rhetorical patterns, see <citation type="nameref" value="chapter.rhetorical_structure"/>.</p>
<p>Bottom-up and top-down information architectures are not incompatible with each other. In fact almost every information architecture has both top-down and bottom-up elements. (Books, for instance, which are principally top-down, based on a table of contents, may also have internal cross references, which are a bottom up mechanism.)</p>
<p>Structured writing can be used to drive both the <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> and <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up</annotation></phrase> aspects of information architecture.</p>
</section>
<section>
<title>Categorization</title>
<p>One of the key elements of top-down information architecture is categorization. An information architect develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.</p>
<p>Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called faceted navigation. The easiest place to see faceted navigation in action is on a used-car site where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions.</p>
<p>Categorization may be implemented as part of the <phrase><annotation type="algorithm">content management algorithm</annotation></phrase>, with categories implemented as part of the external metadata that a CMS applies to a content object. This is common practice when dealing with content in the <phrase><annotation type="concept">media domain</annotation></phrase> or the <phrase><annotation type="concept">document domain</annotation></phrase>.</p>
<p>For content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, however, the metadata required to assign a piece of content to a category may be inherent in its subject domain markup. It is the nature of the subject domain to describe the subject matter and any markup that describes the subject matter may already contain the fields that you need for categorization. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don’t need to create additional structures to support a new algorithm.</p>
<p>Relying on the subject domain metadata already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a repository so much easier for authors. But in some cases it can also avoid the need for a costly CMS altogether, since it allows the publishing algorithm to categorize content at build time without the need of a separate metadata store or a separate system to manage categorization.</p>
</section>
<section>
<title>Linking</title>
<p>We have covered the <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> already (<citation type="nameref" value="chapter.linking"/>), but linking is at the heart of a bottom up information architecture. In a bottom-up architecture, a page is not simply a leaf on a tree: the prize you find at the end of the search. It is a junction point in the exploration of an information space and the quest to understand a subject. In reading a page, a reader may discover new subjects that they need to understand and new options that they need to consider (deflection points in the content). They may discover that what they thought they knew is wrong, or what they thought they wanted to do was not the right choice. They may find that their search or their traversal of the categorization system has led them to the wrong place, or they may discover whole new worlds they wish to explore. At a more mundane level, they may discover that they need additional information to complete their task, such as reference data.</p>
<p>These are all pointers to some next topic that the reader needs. Even the most prescient writer cannot have chosen all of them as the linear next topic in a linear narrative. To serve the reader they need to pave all of these possible paths for them, and the way you do that is with hypertext links.</p>
<p>This means that linking is not something that happens at arbitrary points where the author feels like adding a link. It is something that is planned for as part of the information architecture. Whether you specify hard links in the <phrase><annotation type="concept">media domain</annotation></phrase> or the <phrase><annotation type="concept">document domain</annotation></phrase>, manage them with keys in the <phrase><annotation type="concept">management domain</annotation></phrase>, or generate them from subject annotations in the subject domain, they should be created in a disciplined and consistent manner according to a deliberate plan.</p>
</section>
<section>
<title>Tables of Contents</title>
<p>Tables of contents can serve various purposes depending on the nature of the work. Some describe a linear reading order for a work, some provide a classification scheme for random access to the content, some are simply a list of chapters that does not necessarily imply an intended reading order.</p>
<p>A table of contents may seem like a document domain structure, but it is really more of a media domain structure, for two reasons. First, it contains specific links to specific resources at specific addresses, or specific page numbers in a paper or a virtual paper format such as PDF. Secondly, it is virtually always factored out in document domain markup languages. Tables of contents are not written, they are generated.</p>
<p>From an information architecture point of view, what matters is how they are generated. In DocBook, for instance, it is typical to write each chapter of a book in a separate <phrase><annotation type="code">chapter</annotation></phrase> file and then pull them together into a book using a <phrase><annotation type="code">book</annotation></phrase> file. The order of the table of contents is then determined by the order in which the chapters are listed in the <phrase><annotation type="code">book</annotation></phrase> file. The TOC itself is generated by extracting chapter and section headings from the <phrase><annotation type="code">chapter</annotation></phrase> files in the order they appear in the <phrase><annotation type="code">book</annotation></phrase> file.</p>
<p>In DITA, the normal process is to assemble a book using a <phrase><annotation type="code">map</annotation></phrase> file. A map file may assemble a book out of DITA topics or other maps, and this may include assembling the chapters from topics as well. In the end, though, the TOC is generated in the same way, by traversing the document assembled by the <phrase><annotation type="code">map</annotation></phrase>.</p>
<p>In both these cases, the order of the TOC is specified by hand by the person who creates the <phrase><annotation type="code">book</annotation></phrase> or <phrase><annotation type="code">map</annotation></phrase> file. But there are other ways to determine the order of content in a TOC. For instance, a reference work such as an API reference may be organized by listing each library in order by name, and each function in alphabetical order by name within its library, creating a table of content with two levels. There is no need to write a map file to create this table of contents. There is an algorithm for creating this table of contents. In fact, it is the algorithm stated in the first sentence of this paragraph, “listing each library in order by name, and each function in alphabetical order by name within its library”. Here is that algorithm expressed in pseudo code:</p>
<codeblock language="pseudo">
create toc
    for each library sorted alphabetically
        create toc-entry library name
        for each function in library sorted alphabetically
            create toc-entry function name
</codeblock>
<p>Tables of contents serve different purposes. Some describe a curriculum, a designed reading order. Others are simply a means of navigation, a way to select one topic out of a collection of many. If your content is written in the subject domain, the chances are that it already contains the structures on which such a classification could be based, and again the TOC can be generated based on the metadata already in the content.</p>
<p>One advantage of this approach is that if a TOC is assembled based on metadata in the content, that means that when new content is added, it is automatically included in the TOC the next time output is generated. This simplifies the task of adding new content to a collection by avoiding the need to update multiple files or systems when a update occurs. This makes life easier for authors as they do not need to know how the TOC is constructed. They only have to create an individual piece of conforming content and submit it to the right location. This also constitutes yet another example of the <phrase><annotation type="algorithm">single source of truth</annotation></phrase> algorithm, since the basis for the content’s inclusion at a particular point in the TOC is stored only in one place.</p>
</section>
<section>
<title>Lists</title>
<p>A major feature of a bottom-up information architecture is the list. Like tables of contents, lists are a catalog of resources. But while a TOC is a list of resources defined by their container (contents = things in a container) a list may have any principle of organization or inclusion.</p>
<p>For instance, you might want to have a list of all the movies starring each actor in a collection of movie reviews. Such list are not only a useful piece of information, they are also an important aid for navigating around a site. Maintaining such list by hand would be laborious and error prone, especially with new movies being added to the collection all the time.</p>
<p>If you have your movie reviews in a structured format that lists the actors in the movie in a format accessible to algorithms, like this:</p>
<codeblock language="sam">
movie: Rio Bravo
    starring:: actor
        John Wayne
        Dean Martin    
        Ricky Nelson    
        Angie Dickinson
        Walter Brennan
</codeblock>
<p>you can generate the filmographies for all your actors, like this:</p>
<codeblock language="pseudo">
create-filmographies
    for each unique actor in movie/starring/actor 
        create filmography actor with link to actor
        for each movie where starring/actor = actor
            create entry movie with link to movie
</codeblock>
<p>Tables of contents are a top-down information architecture device. You expect to find them at the top of the information set. List are a bottom-up device. You expect to find them as independent pages or as elements within a page. Thus if our collection includes the biographies of actors, and we want each biography to include the filmography, we can omit the filmography from the <phrase><annotation type="concept">subject domain</annotation></phrase> version of the biography and add it to the output in the <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase>.</p>
<codeblock language="pseudo">
match actor-bio
    create html
        create h1 "Biography: " + actor-name
        continue
        create h2 "Filmography"
        for each movie-review where starring/actor = actor-name
            create li 
                create a with attribute href 
                 = address of movie-review
                    output movie-name
</codeblock>
<p>It is worth noting that, besides being part of the information architecture algorithm, this kind of thing is also a sophisticated example of the <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase>. It takes a set of movies, each with a list of actors, and uses it to generate a list of movies for each actor, reusing existing information to create new content. This happens without any explicit reuse markup.</p>
</section>
<section>
<title>Personalized content</title>
<p>Another key feature of modern web architecture is personalized content, which means content that is generated in response either to what the site already knows about you (from your account information, or a transaction token such as a <phrase><annotation type="tool">cookie</annotation></phrase>, or the  selections or entries that you make on the page). For example, when you log into Amazon, the first page you see is crafted for you based on everything Amazon knows about your browsing and purchasing history. As you make selections, such as adding an item to your shopping cart or wish list, that information is used to shape the next page you see.</p>
<p>If you browse a used car site like Autotrader.com, you can select those features of a car that you are interested in (red convertibles with manual transmission under $20000, for instance) and the next page will be built based on that input.</p>
<p>The ability of a site to personalize pages depends on its ability to identify content that is <phrase><annotation type="algorithm" specifically="relevance">relevant</annotation></phrase>, based on everything they know about the reader, and to assemble those pieces to form a page. For this to work, the content has to be easy to identify unambiguously, and it needs to be highly <phrase><annotation type="algorithm" specifically="composability">composable</annotation></phrase>.</p>
<p>As we have seen, these properties are maximized when content is stored in the <phrase><annotation type="concept">subject domain</annotation></phrase>, both because the <phrase><annotation type="concept">subject domain</annotation></phrase> makes the relevant metadata available, and because working in the subject domain helps authors produce more consistent content that works better with these algorithms.</p>
<p>The consistency of the content is most important in any personalized content application. There is no possibility for an author or editor to inspect the output of a personalized content publication before the reader sees it, since it is assembled in real time based on the unique things we know about each reader. This requires total confidence that:</p>
<ul>
<li>
<p>the content conforms to its constraints</p>
</li>
<li>
<p>those constraints are completely and correctly expressed by its markup</p>
</li>
<li>
<p>the algorithm correctly processes and delivers the content</p>
</li>
</ul>
<p>All three of these requirements depend on the soundness and simplicity of the markup design. They require precise content structures with few alternatives, clear guidance for authors, and good audit capability. Without these properties, content and its markup will be inconsistent and reliable algorithms will be hard to write and test because of the wide variety of markup combination they may encounter.</p>
<p>Most personalized content applications model their content in relational database tables for these very reasons. However, with the correct markup design, almost certainly in the <phrase><annotation type="concept">subject domain</annotation></phrase>, there is no reason why you cannot use markup-based tools and solutions to achieve the same thing. (Personalized content is an example of active content, which we discussed in <citation type="nameref" value="chapter.active"/>.)</p>
</section>
</chapter>
