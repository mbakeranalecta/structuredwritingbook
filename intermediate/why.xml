<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Why structure writing?</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>structured writing</term>
</record>
<record>
<type>concept</type>
<term>complexity</term>
</record>
</index>
<p>Why would we apply structure to writing? Creating content is a complex business. You have to research your subject matter and your audience. You have to figure out what needs to be said and how to say it to achieve your desired effect. You then have to record the content, manage it, and publish it, potentially to many different audiences and many different media. If you are part of an organization that creates a lot of content, you have to coordinate what you are doing with what everyone else in doing and make sure it all works together and serves the organization’s goals. Each of these things are complex tasks in themselves and they become all the more complex when you have to coordinate them all. Not everyone has the skills or the knowledge to do all these things well, and if too much of the complexity falls on one person’s shoulders, it will limit their ability to perform well or deliver on time. In particular, writing well is an activity that requires the whole of the writer’s attention. Any part of the complexity of the content creation process that divides the writer’s attention makes it more difficult for them to write quality content.</p>
<p>You can’t reduce the fundamental complexity of content creation. All that stuff has to get done, and it is all difficult in one way or another. All you can do is to make sure that the inherent complexity is handled by the people or processes that are best equipped to deal with it. Managing a content creation process is all about partitioning and distributing the complexity of content creation in the right way.</p>
<p>Every content organization practices the partitioning and distribution of content creation. Newspapers do not make reporters drive the delivery trucks. Publishing houses do not let authors design book covers (much as they might want to). Recognizing that spotting your own mistakes is difficult, wise organizations partition the job of editing and proofreading content from the job of writing it.</p>
<p>What happens if the inherent complexity of content creation is not managed properly? Complexity cannot be destroyed, so it has to go somewhere. If no one in the publishing organization handles it, it falls through to the reader. If a piece of content is missing information the reader needs, then the burden of finding the missing information falls on the reader. If the reader can’t understand the terms used, or read the font chosen, or find content to explain an unfamiliar concept, or get the information they need when they need it, or tell current information from outdated, that is complexity falling through the content creation process to land on the reader’s head. The reader must then either handle the complexity themselves or abandon the content.</p>
<p>Another name for this is poor quality content. Poor quality content is the direct result of the complexity of content creation falling through to reader instead of being handled in the organization that produced it. The way for an organization to consistently create quality content is to make sure that every piece of the inherent complexity of content creation is directed to a competent and adequately resourced person or process so that none of it falls through to the reader.</p>
<p>To distribute complexity, you must partition it along clean lines without dropping any of the complexity in the process. For example, the style sheets in a word processor partition the complexity of consistently formatting a document by allowing writers to apply named styles to paragraphs. This partitions the task of designing the look of a document, and defining styles to implement that design, and directs it to the stylesheet designer. The writer is left with the nominally easier job of assigning named styles to paragraphs as they write. (I say nominally because, as we know, styles are rarely used correctly, or at all. Mere technical partitioning often fails because it does not fully encapsulate the complexity it is attempting to partition.)</p>
<p>Partitioning and redistributing complexity is not just about shifting complexity from one person to another. It is also about shifting complexity from people to algorithms. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted a certain way, chances are many similar pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.</p>
<p>Writing an algorithm to do a repetitive task redistributes complexity from the person who used to do the task to the algorithm, but also to the person who writes and maintains the algorithm. For example, using a CSS stylesheet to format lists redistributes the task of designing list formatting from the writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.</p>
<p>Using CSS partitions the complexity of formatting a page so that we can distribute the complexity of formatting away from the writer.  Now the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This simplifies the writer’s life, allowing them to focus on writing. It also simplifies the designers life, allowing them to concentrate on design. The result is better writing and better, more consistent, design.</p>
<p>CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS in to our process means introducing new complexity. All tools introduce new complexity into the processes they serve. People have to design the tools and build the tool and learn to use the tool, and maintain the tool. All this is new complexity that did not exist before. We accept this new complexity into our processes because a good tool allows us to distribute our existing complexity more efficiently, so that less of the complexity falls on the people and more on the tools, and so that each person in the system only has to deal with the complexity that they are able to cope with. Managing where the complexity falls is ultimately much more effective than merely minimizing total complexity.</p>
<p>Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or a text message is staggering, but its directs the complexity of communicating over distance away from the users towards systems and the people who maintain them for a huge net gain in productivity.</p>
<p>The content creation stack is similarly complex. Yet the content creation stack does not do such a good job of partitioning and distributing all of the complexity of content creation, with the result that complexity is pervasively being dumped on the reader in the form of poor quality content.</p>
<p>There is some very elaborate partitioning and distribution going on in the content creation stack, in the form of complex content management and publishing systems, as well as new roles for human contributors, such as information architects and content strategists. However, most of the content creation going on in the content stack today is taking place using WYSIWYG authoring interfaces from the desktop publishing era.</p>
<p>In its time, desktop publishing represented an interesting repartitioning and redistribution of the complexity of content creation. At the time, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, the preparation of proofs by a printer, correction of proofs, and the final printing. This was a complex and time consuming process that cost a lot of money and had many points where failure could occur or error be introduced. The various function were well partitioned from each other, but the overhead of passing information from one to another was cumbersome and time consuming.</p>
<p>Desktop publishing eliminated much of that overhead by putting all the tools of document creation – writing, design, layout, proofing – in the hands of a single operator. The problem with this model are twofold. First, it put too much of the complexity on one person: the writer. The writer’s attention is divided between multiple tasks, and since attention is a finite resource, this meant the quality of writing, design, layout, and proofing all suffered. The fact that desktop publishing skill became a major hiring criteria for writers (and remains so today) shows how the focus was taken off writing and knowledge of subject matter and placed on the ability to manage the complexity of the publishing process.</p>
<p>Secondly, while it removed a lot of complexity of vertical communication between writer, designer, and typesetter, desktop publishing left every writer on an island, making no provision for any kind of horizontal coordination between writers. Everyone worked on their own book as a separate project. The division of the writer’s attention and the lack of horizontal coordination meant the huge amounts of complexity were going unhandled in large content systems. Duplication omissions, and inconsistencies were very difficult to detect and fix, while providing effective navigation between books was virtually impossible. All this unhandled complexity was dumped on the reader in the form of poor quality content. Desktop publishing did no create this problem, but it did nothing to fix it.</p>
<p>Content management system have tried very hard to partition and redirect the complexity of that horizontal coordination, but with results are are, at best, incomplete. Meanwhile, the advent of the Web had brought a new set of challenges. A modern website is not a library of independent volumes but a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how readers seek and use content. Meanwhile, many organizations are trying to deliver content to both the paper model and the Web model simultaneously. Content creation and delivery has got a lot more complex and reader’s expectations far more demanding. The desktop publishing model is fundamentally unsuited to handling this complexity.</p>
<p>Structured writing offers a different way to partition and distribute the complexity of content creation and delivery that better address the modern content creation challenge. The fundamentals of these techniques are not new. In fact, they all exist in the desktop publishing paradigm. When we define a stylesheet in <phrase><annotation type="tool">FrameMaker</annotation></phrase>. When we use CSS to separate formatting from our HTML content, we are using structured writing techniques. What we call structured writing today is simply about taking those techniques one or two steps further to allow us to better partition and distribute all of the complexity of content creation in or organizations.</p>
<p>Alas, not every structured writing system does a good job of distributing complexity appropriately for every organization. Many merely move it from the shoulders of one group to the shoulders of another without regard to whether those shoulders are broad enough to bear the additional burden. Far too often, content management installations are designed and implemented with an eye to solving one part of the content management complexity, rather than with an eye to how content complexity is distributed and handled throughout your whole content system. Tools and systems designed for one purpose are almost always careless about where they deflect the complexity they don’t handle. In many cases, while they take the pressure off one group or function, they add to the total amount of unhandled complexity in the system. This is a big part of why so many content management systems fail and so many organizations hate their content management system.</p>
<p>This book seeks to provide a comprehensive overview of how different structured writing techniques can be used to partition and distribute the complexity of content creation. It does not advocate for any one system. Nor will it tell you exactly which combination of techniques and tools will be right for your organization. Different organizations have different kinds of complexity to deal with and need to distribute it in different ways to maximize the quality of the content they produce. Finding the right combination of techniques for your organization is up to you. Hopefully, though, this book will give your the information you need to figure out what will work best, whether that means adopting or adapting an existing system or building all or part of a system for yourself.</p>
<p>Most content systems have never  seriously attempted to minimize the amount of complexity they dump on the reader. Quality and process have largely been treated as separate concerns, as if the process and its demands had no influence, for good or bad, on the quality of content that writers produced.</p>
<p>The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in content. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in content itself. Where structured writing tools have replaced desktop publishing or word processing tools it has largely been for process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both.</p>
</chapter>
