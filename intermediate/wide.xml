<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.wide">
<title>Wide Structures</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>structure</type>
<term>tables</term>
</record>
<record>
<type>structure</type>
<term>graphics</term>
</record>
<record>
<type>structure</type>
<term>code blocks</term>
</record>
<record>
<type>concept</type>
<term>pre-formatted text</term>
</record>
</index>
<p>The notion of separating content from formatting works quite well when the content is a string of words. A string of words has only one dimension: length. A printed string, of course, has two dimensions: length and height, since each letter has a height and a width. But the height and the width of letters is a pure <phrase><annotation type="concept">media-domain</annotation></phrase> concern. Fitting a one-dimensional string of characters into a two dimensional font on a two dimensional page is one of the first things that gets factored out as we begin to structure content. When we separate content from formatting, we separate the font from the character and are left with a string of characters whose length is measured not in inches or centimeters but in character count.</p>
<p>Once these formatting dimensions are factored out, it becomes easy to create and manage text in the <phrase><annotation type="concept" specifically="document domain">document</annotation></phrase> and <phrase><annotation type="concept" specifically="subject domain">subject</annotation></phrase> domains without thinking about how it will eventually flow onto a page or screen.</p>
<p>But when it comes to content that has dimensions that cannot be factored out, things get more difficult. The main problem cases are:</p>
<ul>
<li>
<p>tables</p>
</li>
<li>
<p>pre-formatted text, such as a program listing, that has meaningful line breaks</p>
</li>
<li>
<p>graphics and other media</p>
</li>
</ul>
<section>
<title>Tables</title>

<p>Tables are one of the more complex problems in structured writing, particularly in the document domain. A table laid out for presentation in one publication can easily get messed up when an algorithm tries to fit it into another, as in <citation nameref="broken-table-formatting"/>, which comes from a commercially published book on my Kindle.</p>
<figure name="broken-table-formatting">
<title>Broken table formatting</title>

<insert item="../graphics/tableformatting.xml" type="image"/>
</figure>
<p>This table is difficult because one wide thing (a table) contains another wide thing (pre-formatted program code). I don’t know exactly how this table was marked up, which domain the content was written in, or how the <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> failed, resulting in the mess above, but including pre-formatted text in a table cell creates a no-win situation for a rendering algorithm. Does it:</p>
<ul>
<li>
<p>violate the formatting of the program code by introducing extra line breaks.</p>
</li>
<li>
<p>give the code the space it needs by squeezing all the other columns impossibly narrow.</p>
</li>
<li>
<p>resize the columns proportionally and let the pre-formatted text overlap the next column, but truncate it at the edge of the table.</p>
</li>
<li>
<p>resize the columns proportionally and truncate the pre-formatted text at the column boundary.</p>
</li>
<li>
<p>shrink the entire table so everything formats correctly, even if it is shown in three point type.</p>
</li>
<li>
<p>let the table expand outside the viewport so that it is either cut off or the reader has to scroll horizontally. (Web browsers tend to take this approach, but will it work on an e-reader? It certainly won’t work on paper.)</p>
</li>
<li>
<p>make the table into a graphic so readers can pan and zoom like they do with a large picture. (Some e-books take this approach.)</p>
</li>
</ul>
<p>If you are thinking that there is no good option in the bunch, you appreciate the extent of the problem. For existing books being transferred to e-readers, you can’t do much to salvage the situation, short of completely restructuring the file. Those books were probably prepared in a word processor on the more abstract edge of the media domain, and the tables were prepared for a known page width in the printed book.</p>
<p>Because many people read on small devices such as tablets, e-readers, and phones, wide tables cause problems. On a phone, the amount of a table that is visible on screen at any one time may be so small as to make the table essentially unnavigable and useless for such common tasks as looking up values or presenting an overview of a subject at a glance.</p>
<p>Tables can cause problems with height as well as width. While most authors would never import a graphic that was six feet tall, we sometimes create tables that are that long or longer. On a web browser, readers can simply scroll the table. But as soon as you start scrolling, you lose sight of the column headers and it becomes harder to read data across the table. On paper, you can repeat the headings at the top of each page when a table flows over several pages. This works, and you can imitate the effect in a web browser by placing the body of the table in a scrollable frame under a fixed heading. But what happens if the height of a table row is larger than the height of the page? How do you break the text in each cell in that row? In traditional typesetting, you can make adjustments by hand on a case-by-case basis, but getting a rendering algorithm to do this gracefully in every case is very challenging.</p>
<p>Creating tables in the document domain creates problems even when the intended output is paper, and you assume a sufficiently wide viewport. Since a table divides content into multiple columns, there is always a question of how wide each column should be relative to the others and whether or not the table should occupy the full width of the viewport. For example, you probably don’t want a table with just a few numeric values to span a full page width because that would spread the numbers out too far and make comparisons difficult. One the other hand, a table with a lot of text in each cell needs to be full width and needs to have column widths roughly proportional to the amount of text in the each column. However, suppose the first column is a side head with far fewer words than the other columns. You probably don’t want to compress that column proportional to its word count because then the side headings will be unreadable.</p>
<p>In a media-domain editor, which shows the formatting of the content as it will appear on paper, a writer can create a table at a fixed width and drag the column widths around to get the aesthetics of column boundaries right by eye. But tables created like this are not likely to format correctly on other devices, as <citation nameref="broken-table-formatting"/> shows. And if you move content creation out of the media domain and into the document domain, you can no longer present writers with a WYSIWYG page width that would allow them to adjust column widths by eye. (You can fake it, but adjustments made on screen bear no relationship to how the table displays on any output page.) At this point you have to leave column-width calculation to the rendering algorithm. The best you can do it to give it some hints.</p>
<figure name="cals-table-example">
<title>CALS table markup language column and row span example (from Wikipedia)</title>

<codeblock language="xml">
&lt;table&gt;
  &lt;title&gt;Table title&lt;/title&gt;
    
  &lt;tgroup cols="3"&gt;
    &lt;colspec colname="_1" colwidth="1*"/&gt;
    &lt;colspec colname="_2" colwidth="3*"/&gt;
    &lt;colspec colname="_3" colwidth="2*"/&gt;
    
    &lt;thead&gt;
      &lt;row&gt;
        &lt;entry&gt;1st cell in table heading&lt;/entry&gt;
        &lt;entry&gt;2nd cell in table heading&lt;/entry&gt;
        &lt;entry&gt;3rd cell in table heading&lt;/entry&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;entry&gt;1st cell in table heading&lt;/entry&gt;
        &lt;entry&gt;2nd cell in table heading&lt;/entry&gt;
        &lt;entry&gt;3rd cell in table heading&lt;/entry&gt;
      &lt;/row&gt;
    &lt;/thead&gt;
    
    &lt;tbody&gt;
      &lt;row&gt;
        &lt;entry&gt;1st cell in row 1 of table body&lt;/entry&gt;
        &lt;entry&gt;2nd cell in row 1 of table body&lt;/entry&gt;
        &lt;entry&gt;3rd cell in row 1 of table body&lt;/entry&gt;
      &lt;/row&gt;
    
      &lt;row&gt;
        &lt;entry nameend="_2" namest="_1"&gt;cell spanning two columns&lt;/entry&gt;
        &lt;entry morerows="1"&gt;cell spanning two rows&lt;/entry&gt;
      &lt;/row&gt;
    
      &lt;row&gt;
        &lt;entry&gt;1st cell in row 3 of table body&lt;/entry&gt;
        &lt;entry&gt;2nd cell in row 3 of table body&lt;/entry&gt;
      &lt;/row&gt;
    &lt;/tbody&gt;
  &lt;/tgroup&gt;
&lt;/table&gt;
</codeblock>
</figure>
<p>This need to give the rendering algorithm hints about how to fit tables to pages has resulted in the creation of some very complicated table markup languages. <citation nameref="cals-table-example"/> contains an example using the <phrase><annotation type="structure">CALS table model</annotation></phrase>. It shows a table that has one cell spanning two columns and one cell spanning two rows. As you can tell, this is not exactly obvious from the markup. In practice, few writers create CALS tables by writing the markup by hand. Instead, they use the table drawing tools in a graphical XML editor.</p>
<!--  >>> screen shot -->
<p>However, although graphical XML editors can display tables in a manner that looks the same as a word processor like <phrase><annotation type="tool">Microsoft Word</annotation></phrase>, they cannot allow writers to make the kinds of <phrase><annotation type="concept">media-domain</annotation></phrase> adjustments that they can make with a word processor. A word processor’s graphical display is based on the actual page currently set up in printer settings and on the font the document will be printed in. Therefore, a writer can see how a table fits on an actual page and make <phrase><annotation type="concept">media-domain</annotation></phrase> adjustments. An XML editor cannot know the page size or the font. So while the display looks like it allows writers to make the same <phrase><annotation type="concept">media-domain</annotation></phrase> adjustments, this is an illusion, and the table will not print as shown on screen. This gives a false impression of the real complexity of the table problem, hiding complexity from the person who is supposed to deal with it.</p>
<p>Other markup languages take a different approach to tables. For instance, <phrase><annotation type="language">reStructuredText</annotation></phrase> allows you to create a table using markup that looks like <citation nameref="restructuredtext-table-example"/>.</p>
<figure name="restructuredtext-table-example">
<title>reStructuredText table markup language column and row span example</title>

<codeblock language="reST">
+------------+------------+-----------+ 
| Header 1   | Header 2   | Header 3  | 
+============+============+===========+ 
| body row 1 | column 2   | column 3  | 
+------------+------------+-----------+ 
| body row 2 | Cells may span columns.| 
+------------+------------+-----------+ 
| body row 3 | Cells may  | - Cells   | 
+------------+ span rows. | - contain | 
| body row 4 |            | - blocks. | 
+------------+------------+-----------+
</codeblock>
</figure>
<p>Like the CALS example, reStructuredText allows you to span rows and columns, and in this example, the effect is obvious. Equally obvious is that editing or creating a table with any significant amount of text in the cells is going to be very difficult. Nor does reStructuredText solve any of the table rendering challenges described above.</p>
</section>
<section>
<title>Alternatives to tables</title>

<p>Structured writing is about partitioning and redirecting the complexity of content so that it is always handled by someone with the attention, knowledge, and resources to handle it. As the discussion above demonstrates, table markup dumps a lot of complexity on writers, complexity they are not fully able to handle because they don’t control the final formatting of content in all the media and devices it will be presented on. The best way to partition the problem, therefore, is to factor out the decision to present information as a table. Let writers capture information, and move the decision on whether to present that information as a table or in some other form down the road.</p>
<p>What can you factor the content into? There are a number of alternatives, depending on what the table was being used for.</p>
<section>
<title>Alternate presentations</title>

<p>In many cases, tables simply aren’t necessary. There are other ways to present the content with no loss of comprehensibility or quality. Sometimes, tables are just used to format lists, particularly lists with two levels of nesting. If a list is an equally effective way of presenting content, choose a list rather than a table when writing in the document domain. Sometimes only part of the content needs to be in tabular format and can be express just as well as other, simpler structures that contain a table or tables within them.</p>
</section>
<section>
<title>Subject-domain structure</title>

<p>One way to present the list of ingredients in a recipe is to create a table with the ingredient name aligned left and the quantity aligned right. But as we have seen in our recipe examples, you can create a subject-specific ingredient list structure to capture your ingredient information, which you can then format any way you like for output.</p>
<figure name="subject-specific-recipe">
<title>Subject-domain ingredient listing</title>

<codeblock language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 3, each
    salt, 1, tsp
    butter, .5, cup
</codeblock>
</figure>
<p>A structure such as the one shown in <citation nameref="subject-specific-recipe"/> is a table in a different sense of the word: it is a database table and the <code>ingredients</code> structure creates a mini database table inside the body of the content. The difference between this table and a media-domain table is that we know exactly what type of information each column contains. This allows the <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> to make intelligent choices about column widths and all the other rendering issues that arise with tables and then pass on appropriate hints to the <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase>. Of course, this structure also supports presentation using a list rather than a table.</p>
<p>Tables are also sometimes used in procedures. With a table, you can create side heads for step numbers in one column and a description for each step in another column. However, instead of this, consider using explicit procedure markup, which can be formatted differently depending on the output medium. If you choose a table as the output format, knowing that the contents are a procedure allows the <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> to provide appropriate layout hints to the <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase>.</p>
</section>
<section>
<title>Record data as data</title>

<p>Many reference works have traditionally been presented as tables on paper. But most such works are really databases. They are designed to be queried, not read. That is, they are used to look up individual pieces of data in a large set. For a database of this sort, <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> requires that you provide the best method of querying the data for each output medium; that is, the method whose interface fits best in the available viewport. To support differential single sourcing, you should not record data in tables, at least, not in <phrase><annotation type="concept">media-domain</annotation></phrase> tables. You should record it in whatever database format best suits the data and the kinds of queries your readers want to make.</p>
<p>If you want to support printed tables for print media, then you should <phrase><annotation type="algorithm" specifically="extract">extract</annotation></phrase> content from the database to create the printed table. The additional semantic information available from the database structure allows the <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> to supply appropriate rendering hints to the <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase>.</p>
<p>When you have done all of that, you will probably be left with two kinds of tables to deal with: small ad-hoc grid layouts and one-of-a-kind database tables. These are tables that occur just once and don’t justify the overhead of creating a subject-domain data structure. For these, you need some form of document-domain table markup. Which markup you choose will come down to how much fancy formatting of tables you require and how willing you are to let the rendering algorithm format your tables without extensive hinting.</p>
</section>
</section>
<section>
<title>Code</title>

<p>There are some texts, particularly computer code and data, in which line breaks are meaningful. (Poetry is another example, but its issues are simpler than those of code, so I will stick to talking about code.) Code is a form of structured writing and, in many languages, whitespace – meaning line breaks, spaces, and indentation – is part of the markup that defines the structure of the program. Therefore, when you present code in a document, you have to respect whitespace.</p>
<p>Furthermore, programmers usually work in a fixed-width font, meaning that all the letters are the same width when displayed. Programmers align similar structures with whitespace to make them easier to read; using a proportional width font for code in documentation messes up formatting and looks weird to programmers. It also makes the code less recognizable as code, which could reduce <phrase>information scent</phrase>.</p>
<p>Therefore, computer code, data, and other similar formats where whitespace is meaningful must be presented in a fixed-width font with line breaks placed where they are supposed to be. That makes code samples wide objects, just like tables, with many of the same issues when it comes to rendering them on small devices. One saving grace is that programming examples are less likely to have issues with height.</p>
<p>There is not much you can do to help the <phrase><annotation type="algorithm">rendering</annotation></phrase> algorithm when it comes to code. The options for fitting wide code on a narrow display are: shrink to fit, scroll to view, or truncate. You probably do not want your <phrase><annotation type="algorithm">rendering</annotation></phrase> algorithm to make a different choice for different kinds of code. Needless to say, putting a code block inside another wide structure, such as a table, is a recipe for disaster, as <citation nameref="broken-table-formatting"/> shows. It would be wisest not to allow this in your markup language design.</p>
<p>What is essential is that your document-domain or subject-domain markup clearly indicate when a piece of text is code. Preferably it should also indicate what kind of code it is, since knowing this can allow the formatting algorithm to do syntax highlighting for code in a known language and can allow the linking algorithm to detect and link API calls to the API reference. In some cases it might even allow an algorithm to validate the code to make sure it runs or uses the current version of the API.</p>
</section>
<section>
<title>Pictures and graphics</title>

<p>Pictures and graphics are naturally wide objects. There are two basic formats: <phrase><annotation type="concept" specifically="raster graphics">raster</annotation></phrase> and <phrase><annotation type="concept" specifically="vector graphics">vector</annotation></phrase>. Raster graphics are made up of pixels, like a photograph, and have a fixed resolution. Vector graphics are stored as a set of lines and curves and can be scaled to meet any output requirement.</p>
<p>The publishing algorithm needs to know how big the graphic is and how large it is supposed to be on the page. With raster files, the resolution – that is, the number of pixels – is set. However, its size on the page can vary. Is a graphic that is 600 pixels by 600 pixels a 1x1 inch picture at 600 dpi, a 2x2 inch picture at 300 dpi, or a 6x6 inch picture at 100 dpi? This is important if you are inserting a headshot into a document that will be published on both paper and the web. Rendering that photo on paper as a 1x1 inch image makes sense, but you don’t want that photo to blow up to a 6x6 image when you add it to a web page, where it will be displayed it at a typical 96dpi unless something intervenes to scale it appropriately.</p>
<p>Then there is the question of the intended size of the image, which is a design consideration independent of the resolution of the raster file. The intention of the graphic artist who created the picture and the intention of a writer using it to create a deliverable both play a role here. Diagrams showing complex relationships should not be shrunk down to where the relationships are unreadable. Simple diagrams should not be blown up to the size of a full page. Diagrams containing text should not be reduced or expanded so that the text becomes invisible or out of proportion with the text on the page.</p>
<p>The writer may have some discretion, based on the role the graphic has to play, but the result should stay within the range prescribed by the artists’s intention. In other words, you have to correctly partition the concerns of both the creator and the user of a graphic, and you have to make sure both parties can communicate effectively so that none of the complexity of the relationship gets dropped.</p>
<p>If the <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> does not know how big a graphic should be, it has limited choices, depending on whether the graphic is too big or too small for the viewport:</p>
<ul>
<li>
<p>Show a raster graphic at 100% of its resolution, regardless of whether it fits in the viewport (which may require cropping it or forcing readers to scroll it).</p>
</li>
<li>
<p>Scale the graphic to the viewport (which may require stretching or shrinking it).</p>
</li>
</ul>
<p>Since neither of these options produces consistently good results, you generally need to give the rendering engine information to help it render the graphic appropriately.<citation idref="2"/></p>
<footnote id="2">
<p>Many web designers take an opposite approach, preparing a graphic to the exact size required for a specific web page layout. This is strictly a <phrase><annotation type="concept">media-domain</annotation></phrase> approach, of course. In structured writing, we need a more flexible solution to avoid what we have all seen happen when a meticulously designed desktop website gets displayed on a phone screen.</p>
</footnote>
<p>The simplest way to supply this information is to include it in the markup that inserts the graphic. Thus, HTML lets you specify the height and width of a graphic (see <citation nameref="fig.html-height-width"/>).</p>
<figure name="fig.html-height-width">
<title>HTML image markup</title>

<codeblock language="html">
&lt;img 
    src="http://www.example.com/images/example.png" 
    height="150" 
    width="140" /&gt;
</codeblock>
</figure>
<p>But do these values represent the size of the graphic or the size at which is it to be displayed in a particular medium? In other words, do they tell a processor the size of the image itself or do they describe the size of the box (viewport) the image should fit in?<citation idref="4"/></p>
<footnote id="4">
<p>This is actually quite a complicated question, and the meaning has changed between various version of HTML. For some hints of the complexities involved, see http://www.w3.org/TR/html5/single-page.html#attr-dim-width.</p>
</footnote>
<p><phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> allows you to make this distinction. Its <code>imagedata</code> tag supports attributes for specifying the size of the viewport (<code>height</code> and <code>width</code>) and the size of the image (<code>contentheight</code> and <code>contentwidth</code>). The specification also contains additional attributes related to scaling and alignment and complex rules about how the <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> is supposed to behave based on which combination of these attributes you specify.<citation value="http://www.docbook.org/tdg/en/html/imagedata.html"/> In other words, DocBook contains a sophisticated language to describe the sizing and scaling of graphics. It not only deals with <phrase><annotation type="concept">media-domain</annotation></phrase> properties, it actually gives <phrase><annotation type="concept">media-domain</annotation></phrase> instructions.</p>
<p>Of course, working in the media domain can cause problems. It interferes with <phrase><annotation type="concept">functional lucidity</annotation></phrase> and makes <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> more difficult. But there is another issue to consider. In addition to needing different scaling values for different output media, sometimes the best approach to <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> is to use different versions of the same graphic for different media. For instance, you may want to use a vector format for print and a raster format for online media.</p>
<p>For all these reasons, we need to distinguish the source of an image from the rendering of that image. For raster images, the source is the original high-resolution file recorded by a camera, a screen shot, or a raster file produced by an image editing program. For vector graphics, it is the original vector drawing file. From these source images, you can render a wide range of images.</p>
<p>What if you need a vector version for some media and a raster version for others? One approach is to generate a raster version of the appropriate size from the vector version. This can be done at build time, but most of the time you store multiple versions and select the right one to publish. To create the best image in each format, the artist may even create several renderings of the same image idea, optimizing each for different uses. For instance, you may need a separate gray-scale version of your company logo, because the automatic gray-scale rendering of a color logo may not look good. You may also want to use different resolutions of the same raster graphic for different media or for different purposes. And you may want to manually redraw a graphic at different resolutions to add or remove detail, rather than simply scaling it mechanically.</p>
<p>In these cases, how do you include the image in your source content? You can’t simply include the source file and scale it, since there are now several source files. You have to go back to the idea of the image – the image that was in the artist’s head – rather than any of the individual renderings of that image. How do you do that?</p>
<p>In <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> you can use conditional processing, as shown in see <citation nameref="ex.docbook-conditional-image"/>. In this example, the <code>condition</code> attribute on the <code>imageobject</code> element specifies a different file to be used for two versions of a book (this book, actually). The <code>epub</code> version is for eReaders, most of which cannot render <phrase><annotation type="language">SVG</annotation></phrase> drawings, and so require a raster format (<phrase><annotation type="format">PNG</annotation></phrase> in this case), while the <code>fo</code> version is for print publication using the <phrase><annotation type="language">XSL-FO</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> and uses the vector format <phrase><annotation type="language">SVG</annotation></phrase> for high-resolution rendering in print.</p>
<figure name="ex.docbook-conditional-image">
<title>DocBook markup for conditional images</title>

<codeblock language="DocBook">
&lt;mediaobject&gt;
  &lt;imageobject condition="epub"&gt;
    &lt;imagedata 
        fileref="../graphics/assemble.png"/&gt;
  &lt;/imageobject&gt;
  &lt;imageobject condition="fo"&gt;
    &lt;imagedata 
        fileref="../graphics/assemble.svg" 
        contentwidth="4in" 
        align="left"/&gt;
  &lt;/imageobject&gt;
&lt;/mediaobject&gt;
</codeblock>
</figure>
<p>However, this approach not only uses <phrase><annotation type="concept">media-domain</annotation></phrase> markup, it combines it with <phrase><annotation type="concept">management-domain</annotation></phrase> markup. Is it possible to factor all of this out of the authored format?</p>
<p>Yes, if the writer includes the idea of the image rather than a rendering of the image. There are several ways to do this. In fact, this is the same method described for the <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> where we factored out the filename of the content to be included and replaced it with a semantic representation of the reason for the content.</p>
<p>In <citation nameref="chapter.management-domain"/>, we factored out an explicit filename from this example:</p>
<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(files/shared/admonitions/danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
<p>and replaced it with a management domain <phrase><annotation type="concept">key</annotation></phrase> in this example:</p>
<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(%warn_danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
<p>Then we refactored that into a <phrase><annotation type="concept">subject-domain</annotation></phrase> assertion of fact in this example:</p>
<codeblock language="sam">
procedure: Blow stuff up
    is-it-dangerous: yes
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
<p>You can apply these techniques to insert graphics as well as text. Suppose you have a constraint that whenever a procedure mentions a dialog box, you must include a picture of that dialog box, and you need to support three different platforms, each of which has different dialog boxes.</p>
<pagination-tweak>
<min-space>2in</min-space>
</pagination-tweak>
<p>You can factor out the platform-specific version of the image by using a key to insert the image:</p>
<codeblock language="sam">
procedure: Save a file
    step: 
        From the File menu, choose 
        Save. The *Save As* 
        dialog box appears. 
        
        &gt;&gt;&gt;(%dialog.save-as)
</codeblock>
<p>Now the presentation algorithm can use a key lookup table to select the right version of the <phrase><annotation type="bold">Save As</annotation></phrase> dialog box for the version of the documentation you are building. If you port the product to a new platform, all you need is a new set of screen shots and a new key lookup table. You don’t have to change the content at all.</p>
<p>There is a simple rhetorical pattern at work in this passage. When a step mentions a dialog box, you show a picture of that dialog box. You can exploit this pattern to factor the insert command out of the content altogether by annotating the mentions of UI components in the text:</p>
<codeblock language="sam">
procedure: Save a file
    step: 
        From the {File}(menu) menu, choose 
        {Save}(menu-item). The {Save As}(dialog-box) 
        dialog box appears. 
</codeblock>
<p>Now you can insert the correct screen-shot graphic for the current platform with an algorithm:</p>
<codeblock language="pseudo">
match procedure/step/dialog-box
    $dialog-box-name = contents
    $graphic = find graphic where type = dialog box 
        and name = $dialog-box-name
        and platform = $current-build-platform
    insert graphic
</codeblock>
<p>There are several benefits to this partitioning of the image problem:</p>
<ol>
<li>
<p>Authors do not have to worry about finding or inserting graphics or remembering the rules about when they are supposed to use screenshots. They just have to remember to mark up the names of dialog boxes when they mention them. If you only want to show screen shots for certain screens, you supply the screen shots for only those screens and have your algorithm pass silently over any <code>dialog-box</code> entry that does not have a screen shot in the collection. This allows you to adjust to reader feedback about how many screen shots are needed by simply adding them to or removing them from the collection; you don’t need to change the content at all – partitioning at work.</p>
</li>
<li>
<p>Updating graphics for UI changes is simpler because you just update the catalog of images. You don’t have to search through docs to find images that are affected by the change.</p>
</li>
<li>
<p>You don’t need any conditional logic in the text to include the right graphic for the platform.</p>
</li>
<li>
<p>In media where the screen shot would not fit in the viewport, you can suppress the image or handle it a different way.</p>
</li>
<li>
<p>If you decide that most readers won’t need to see the screenshot, you can use the markup to create a link to a topic describing the dialog box instead of putting a screenshot inline. In a <phrase><annotation type="algorithm">reuse</annotation></phrase> scenario, you might make different choices for content aimed at different levels of users (for instance, including screenshots only in material intended for novices).</p>
</li>
</ol>
<p>In principle, there isn’t any difference between factoring out text and factoring out graphics. Indeed, beyond factoring out text or graphics, this partitioning also factors out the decision about whether to express a particular idea with text or a graphics. This means you can choose whether to use text or graphics depending on the audience or medium and implement that choice without changing your content.</p>
<p>However, when factoring out graphics, you still need to supply the metadata needed to render those graphics. One way to handle this is to create a metadata file for each image that provides the data for multiple renderings of the image and a path to each of the renderings.</p>
<p>The simplest way to implement this is to use an include instruction that points to the metadata file instead of the image file. This is what I did in writing this book. The strategy uses the DocBook technique shown in <citation nameref="ex.docbook-conditional-image"/>, which conditionally includes two different versions of a graphic, one for epub and one for print. But this book is not written in <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase>, it is written in <phrase><annotation type="language">SAM</annotation></phrase>. In the SAM source file, the image insertion looks like this:</p>
<codeblock language="sam">
&gt;&gt;&gt;(image ../graphics/assemble.xml)
</codeblock>
<p>This is not the full factoring out of the graphics as described in the previous example, because the inclusion still refers to an image, and I haven’t factored out the inclusion code. However, the file being included is not a graphics file; it is an XML file (see <citation nameref="fig.sam.inclusion"/>).</p>
<p>The XML file in <citation nameref="fig.sam.inclusion"/> describes the idea of the image, listing not only its source file and both of its renderings, but even a text description for use when the graphic cannot be displayed. By including this file instead of an image file, I was able to include the idea of the graphic in my content. When the content is processed, the <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> loads and reads the <code>assemble.xml</code> file and uses the information in it to generate the conditionalized <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> file that becomes the source file for the <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase>, which is implemented by the publisher’s existing DocBook tool chain.</p>
<figure name="fig.sam.inclusion">
<title>Graphics inclusion example</title>

<codeblock language="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;image&gt;
    &lt;source&gt;assemble.svg&lt;/source&gt;
    &lt;fo&gt;
        &lt;href&gt;assemble.svg&lt;/href&gt;
        &lt;contentwidth&gt;4in&lt;/contentwidth&gt;
        &lt;align&gt;left&lt;/align&gt;
    &lt;/fo&gt;
    &lt;epub&gt;
        &lt;href&gt;assemble.png&lt;/href&gt;
    &lt;/epub&gt;
    &lt;alt&gt;
        &lt;p&gt;A diagram showing multiple pieces being 
        combined in different ways to produce different 
        outputs.&lt;/p&gt;
    &lt;/alt&gt;
&lt;/image&gt;
</codeblock>
</figure>
<p>Could I have factored out the filename <code>assemble.xml</code> as well? Certainly. There are a number of other ways that I could have chosen to represent the idea of the graphic in the content. There are times when it makes a lot of sense to do that. If you are including screen shots in a procedure, for instance, the name of a dialog box is a good way of representing the idea of a graphic that is semantically relevant to the procedure itself.</p>
<p>But in the case of the images in this book, their relationship to the text is a little more arbitrary than the relationship of a screen shot to a step in a procedure, so factoring out the filename would have created an abstraction that was actually more difficult to remember as an author. The point is not to be as abstract as possible, but to combine the highest degree of <phrase><annotation type="concept">functional lucidity</annotation></phrase> with the constraints that improve content quality, and that will be different for different kinds of material and for different circumstances.</p>
<section>
<title>Inline graphics</title>

<index>
<record>
<type>term</type>
<term>inline graphics</term>
</record>
</index>
<p>One further wrinkle with graphics is that writers sometimes need to place small graphics in the flow of a sentence, rather that as a separate block object. For instance, when describing instructions that involve a keypad or keyboard, some writers use graphics of the keys rather than simply printing the character names. Under certain circumstances, this can make the content easier for a reader to follow.</p>
<p>Inline graphics can cause <phrase><annotation type="concept">rendering problems</annotation></phrase>. For instance, they may cause line spacing to be thrown off if the height of the graphics is greater than that of the font used. Writers can control and make judgments about inline graphics when writing in the <phrase><annotation type="concept">media domain</annotation></phrase>, but using them may lead to unexpected and unwelcome consequences in document- or subject-domain content.</p>
<p>There are two techniques you can use to minimize problems with inline graphics. The first is to avoid them altogether, wherever practical. If you can present the same material just as effectively in some other way, choose that option.</p>
<p>The other technique is to factor out the graphic by using a structure to record its semantics. For instance, instead of including an <phrase><annotation type="bold">Enter</annotation></phrase> key graphic like this:</p>
<codeblock language="sam">
3. Press &gt;(image enter_key.png) to confirm the selection. 
</codeblock>
<p>Do this:</p>
<codeblock language="sam">
3. Press {Enter}(key) to confirm the selection. 
</codeblock>
<p>This leaves open the choice of how to represent the key in the output and allows for <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase>. For example, on a display that did not support graphics, or where graphics would be too fussy, the <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> could render this as:</p>
<blockquote>
<p>3. Press [Enter] to confirm the selection.</p>
</blockquote>
<p>But for media where the use of a graphic is appropriate, the presentation routine could use a lookup table of key names and graphics to select the graphic file to represent the <phrase><annotation type="bold">Enter</annotation></phrase> key.</p>
<blockquote>
<p>3. Press <inline-insert item="../graphics/computer_key_Enter.xml" type="image"/> to confirm the selection.</p>
</blockquote>
<p>This approach allows the document designer to select graphics that work best on different displays or at different scales. This partitions the graphic maintenance problem to the most qualified person. And authors don’t have to stop to think about which graphic to use.</p>
<p>The same approach could be used in another common case, which is describing tool bar icons in a GUI application.</p>
<codeblock language="sam">
4. Press {Save}(button) to save your changes.
</codeblock>
<p>This has the same advantages, with the additional benefit that if the interface designer decides to change an icon or to redefine the whole set of icons, you only have to update the lookup table used by the <phrase><annotation type="algorithm">presentation</annotation></phrase> algorithm. This could also be used to substitute different icons for different platforms if your application is run on more than one operating system. This is much more efficient than using conditional text to import different graphics for different configurations.</p>
<p>This is a good example of using the idea of the graphic rather than the graphic. The idea of the graphic is to represent the <phrase><annotation type="bold">Enter</annotation></phrase> key or <phrase><annotation type="bold">Save</annotation></phrase> button. You can do this in a number of ways, including using a photograph of the key, using a special font that creates the look of a key, representing the key using text such as <code>[Enter]</code>. The idea of a graphic is to represent a subject. So while you can insert the idea of a graphic in the form of a key or a reference to a file that records the idea of the graphic and its implementations, you can also simply identify the subject itself.</p>
<p>As always, a common principle is at work here: it’s better to capture the subject than a resource that represents the subject. Resources change more often than subjects, and you may want different resources to represent a subject under different circumstance. But as long as the content remains current with it subject matter, the identification of the subject will not change.</p>
</section>
</section>
</chapter>
