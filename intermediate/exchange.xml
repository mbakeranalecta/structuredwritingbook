<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Exchange</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>One of the earliest motivations for structured writing was portability. This was in the days when there were many different computing platforms all using different data formats. Moving a document written on one platform to another platform while retaining any kind of formatting or structure was a major challenge.</p>
<p>To enable the algorithm of porting a document from one system to another, structured writing techniques were used to move the representation of the document away from a series of embedded typesetting codes towards more abstract structures to which style information could be attached (<phrase><annotation type="algorithm">separating content from formatting</annotation></phrase>). The interpretation of this structure and style information into platform-specific typesetting codes or screen display instructions (the <phrase><annotation type="concept">media domain</annotation></phrase>) could  be done separately on each platform.</p>
<p>System portability is now much easier because the number of platforms has decreased and much of the low level representation of data has been standardized (thought ASCII and Unicode, for instance). Major applications, or compatible equivalents, now run on all major platforms. The reason they can do this is because the files are structured to factor out specific display instructions for different platforms: structured writing at work.</p>
<p>Portability remains a concern, however, but now it has more to do with portability between organizations. How does one organization send content to another organization in a format that it can use?</p>
<p>The problem here is how exactly the receiving organization wants to use the content. Making content exchangeable is not difficult in itself. The most common formats for exchange between organizations are PDF, HTML, and Microsoft Word. There are PDF viewers for every platform. Every platform has browsers that can read HTML. Word files can be read by a variety of applications on virtually every platform while retaining all or most of their source formatting.</p>
<p>If what the receiving organization wants to do is print and read the content, the PDF format fits the bill. If they want to be able to edit it while making minor modifications to formatting, Word or does the job. If they want to edit it and put it on an internal or external Web server, HTML is fine.</p>
<p>But if the receiving organization want to take the received content, manipulate it, query it, reorganize it, and include it in their own publication system, these format are not structured enough to meet the need. Or at least, it will involve a lot of human execution of algorithms because there is not enough structure in the content to hand the job over to machines. This may be fine for occasional or ad hoc transfers, but for large or regular exchanges of content it can become inefficient and error prone.</p>
<p>A commonly suggested approach is to exchange content in a common or standardized document domain format. Some common formats suggested are DocBook and DITA. But this is not as easy as it sounds. DocBook and DITA are both large and complex formats that different organizations may use in different ways. Different organizations may specialize either format, and while specialized version should still be formally compatible, they may not process as intended in the recipient’s system, especially if one organization has chosen to interpret the standard in different ways – or to violate it in order to achieve a specific business goal. It is impossible for a standard to express all the constraints that individual businesses or individual writers want to use, so standards are inevitable used in non-standard ways that compromise portability.</p>
<p>Exchange, in other words, is a <phrase><annotation type="algorithm">composition</annotation></phrase> problem and all the levels of composability that we discussing in relation to the <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> (<citation type="nameref" value="chapter.composition"/>)   apply to exchange. Choosing an exchange format merely because it is common or even a standard does not fully solve the exchange problem unless that format is also highly composable.</p>
<p>As we noted, composability requires a high degree of constraints, particularly if you want to achieve full literary composability. This is not to say that you cannot use one of these standardized languages to exchange content with a particular set of partners, but you will probably need to agree on an additional set of constraints beyond those provided by the standard format, and figure out how to enforce and validate them.</p>
<p>Of course, the best way to enforce and validate content constraints is with a structured writing format that either enforces them or (ideally) factors them out. This, of course, requires that both parties agree to create and accept such formats. As we noted, in the case of <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> this does not have to mean using the same format, just using formats that are semantically equivalent or can be used to generate a semantically equivalent output.</p>
<p>Some organizations choose formats for their internal work on the basis of those formats being exchangeable with others. As we have seen, different structures support different algorithms. The ideal format for a given organization is the one the supports all the algorithms they want to run on their content. If exchange it the primary goal for adopting structured writing, or if the form that support exchange also supports all the other algorithms you are interested in, choosing a common public format makes sense, since it saves you the cost of any custom development.</p>
<p>But such formats tend to be large and loose and therefore have limited validation and audit capability. This can compromise <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> at several levels. It is perfectly possible for one organization to send a file in a public format to another organization that uses the same format and have the exchanged file not be composable at all with the receiving company’s content.</p>
<p>A common format, in other words, does not guarantee composability and therefore does not guarantee successful exchange. Different organizations may use a common format like DocBook, for instance, in very different way, rendering their files non-composable with other company’s DocBook files. And, of course, other companies may use a different format altogether. To successfully exchange content with another company, you will need to deliver content in the format they use, and in the way they use it.</p>
<p>The capacity to exchange content, then, does not lie so much in having the same format as everyone else, as it does in being able to deliver content in whatever format your customer wants to receive it. And, of course, in having a supplier that will  deliver content to you in whatever format you want to receive it in.</p>
<p>We have seen that moving content from the media domain to the document domain helps you deliver the same content to different media or to format it differently. We have also seen that moving your content to the subject domain makes it easier to create different forms of document organization and behavior. The same is true for exchange. An exchange format, in the end, is just another output. The ability to create multiple exchange formats comes from exactly the same techniques that let you create different document designs and output formats.</p>
<p>Portability is often advanced as a principal argument against developing your own structured writing structures. But in fact portability is often best served by custom formats that enforce or factor out the constraints you need to port content reliably to other organizations.</p>
</chapter>
