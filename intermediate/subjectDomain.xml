<?xml version="1.0" encoding="UTF-8"?>
<chapter name ="chapter.subject-domain">
<title>Writing in the Subject Domain</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformant</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conforming</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conforms</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<title>type, term</title>
<p>concept, subject domain</p>
</index>
<p>The <phrase><annotation type="concept">subject domain</annotation></phrase> is concerned with the subject matter of a text, including both the rhetoric of a subject – the way information on a subject is expressed and presented for a particular audience and purpose – and the identification of subjects expressed in the content.</p>
<p>Some of the most important decisions a writer makes are rhetorical ones: what to say and how to say it. In the <phrase><annotation type="concept">document domain</annotation></phrase>, the writer makes all these decisions, but they don’t explicitly record them. They record only the text that results from making those decisions. In the subject domain, however, the writer record exactly what they are writing about.</p>
<p>A recipe is a useful example for illustrating the subject domain. <citation type = "idref" value = "ex.subj-restructured"/> is a recipe written in <phrase><annotation type="language">reStructuredText</annotation></phrase>, a lightweight general purpose <phrase><annotation type="concept">document domain</annotation></phrase> markup language:</p>
<figure id ="ex.subj-restructured">
<title>Recipe for hard-boiled eggs marked up in reStructuredText</title>
<codeblock language ="reStructuredText">
Hard-Boiled Eggs
================
A hard-boiled egg is simple and nutritious. 
Prep time, 15 minutes. Serves 6.

Ingredients
-----------
    ======  ========
    Item    Quantity
    ======  ========
    eggs    12
    water   2qt
    ======  ========
    
Preparation
-----------
    1. Place eggs in pan and cover with water.
    2. Bring water to a boil.
    3. Remove from heat and cover for 12 minutes.
    4. Place eggs in cold water to stop cooking.
    5. Peel and serve.
</codeblock>
</figure>
<p>In <phrase><annotation type="language">reStructuredText</annotation></phrase>, text underlined with equals signs is a major heading and text underlined with dashes is a minor heading. You create a table by using equals signs to mark the beginning and end of the table and the boundary between the table head and the table body. You place each row on a new line and mark columns by putting spaces in the rows of equals signs. You create ordered lists by putting numbers in front of lines of text. The equivalent HTML document to <citation type = "idref" value = "ex.subj-restructured"/> would look like <citation type = "idref" value = "ex.subj-html"/>.</p>
<figure id ="ex.subj-html">
<title>Recipe for hard-boiled eggs marked up in HTML</title>
<codeblock language ="HTML">
&lt;html&gt;
    &lt;h1&gt;Hard-Boiled Eggs&lt;/h1&gt;
    
    &lt;p&gt;A hard-boiled egg is simple and nutritious. 
    Prep time, 15 minutes. Serves 6.&lt;/p&gt;
    
    &lt;h2&gt;Ingredients&lt;/h2&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Item&lt;/th&gt;
                &lt;th&gt;Quantity&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;eggs&lt;/td&gt;
                &lt;td&gt;12&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;water&lt;/td&gt;
                &lt;td&gt;2qt&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h2&gt;Preparation&lt;/h2&gt;
    &lt;ol&gt;
        &lt;li&gt;Place eggs in pan and cover with water.&lt;/li&gt;
        &lt;li&gt;Bring water to a boil.&lt;/li&gt;
        &lt;li&gt;Remove from heat and cover for 12 minutes.&lt;/li&gt;
        &lt;li&gt;Place eggs in cold water to stop cooking.&lt;/li&gt;
        &lt;li&gt;Peel and serve.&lt;/li&gt;
    &lt;/ol&gt;
&lt;/html&gt;
</codeblock>
</figure>
<p>The document shown in <citation type = "idref" value = "ex.subj-html"/> follows the normal rhetorical pattern of a recipe. That is, it has all the pieces of information a recipe normally has, in the order they normally occur in a recipe: introduction, list of ingredients, preparation steps. However, it does not record the fact that it follows this rhetorical pattern. There is nothing in the markup to say that this is not a novel, a car manual, or a knitting pattern. Nor does the markup constrain a writer to follow the normal rhetorical pattern of a recipe while writing.</p>
<p>Moving this document to the subject domain allows you to impose these rhetorical constraints and requires the writer to record that they have followed them. Neither <phrase><annotation type="language">reStructuredText</annotation></phrase> nor <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> gives you a way to do that, so you need a different markup language. <citation type = "idref" value = "ex.subj-sam"/> shows what that might look like:</p>
<figure id ="ex.subj-sam">
<title>Recipe for hard-boiled eggs marked up in a subject-domain language</title>
<codeblock language ="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
</codeblock>
</figure>
<p>This structure breaks the document into a collection of named structures – introduction, ingredients, and preparation – which are contained in an overall structure called <code>recipe</code>. This is the basic rhetorical structure of a recipe. This markup clearly identifies this as a recipe (not a novel, a car manual, or a knitting pattern), and the writer is explicitly guided to follow this pattern. Also, the writer must present the ingredients as an unordered list and the preparation as a numbered list. (<citation type = "nameref" value = "chapter.conformance"/> looks at how to express and enforce such constraints.)</p>
<p>In other words, in this example, someone other than the writer has made certain basic rhetorical decisions about how to write a recipe – let’s call that person an <phrase><annotation type="role">information architect</annotation></phrase>, though this is not always the responsibility of people with that title. By making this rhetorical structure explicit, the information architect communicates this requirement to writers, which simplifies their task because they no longer need to make this decision for each recipe they write. It also ensures that all recipes follow this pattern.</p>
<p>This does not mean we are entirely in the subject domain, any more than moving from a <phrase>vector graphics</phrase> program to a <phrase>word processor</phrase> meant we were entirely in the <phrase><annotation type="concept">document domain</annotation></phrase>. This recipe markup language enforces a couple of basic rhetorical decisions about recipes, but leaves plenty of others to the writer. Few markup languages are entirely in one domain. Later, you’ll see how to move this recipe markup further into the subject domain, capturing more rhetorical decisions in the markup language design.</p>
<p>But this markup does not just force the writer to follow a set of rhetorical decisions, it factors out some rhetorical decisions altogether. This means that the writer neither makes nor implements those decisions. An <phrase><annotation type="role">information architect</annotation></phrase> makes the decisions and then designs an algorithm to implement them.</p>
<p>Suppose you decide that the ingredients and preparation sections of each recipe should be titled “Ingredients” and “Preparation.” If your writers write recipes in the <phrase><annotation type="concept">document domain</annotation></phrase> using a language such as <phrase><annotation type="language">Markdown</annotation></phrase>, they have to remember to execute this decision each time. But in the <phrase><annotation type="concept">subject domain</annotation></phrase>, the titles are factored out. Instead there are markup structures called <code>ingredients</code> and <code>preparation</code> that don’t contain titles. A <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> adds the titles later.</p>
<p>This partitioning of tasks requires the writer to record enough information for the publishing algorithm to do its job. Here the presence of the <code>ingredients</code> and <code>presentation</code> sections in the recipe structure provides the information the algorithm needs to insert the appropriate titles.</p>
<p>By factoring out titles, you also factor out the constraint on what those titles must be. You don’t need to remember the title text, and a whimsical writer can no longer decide to re-title these sections “Stuff you need,” “Stuff you do,” or some other variant. And you can change these titles across all recipes, including those that are already written, by changing the algorithm.</p>
<p>If you publish a lot of recipes, you probably have many more constraints to impose. For instance, you might have a constraint that every recipe must state its preparation time and the number of people it serves. In our subject-domain markup, we can enforce and record that constraint by moving that information from the introduction section to separate fields (see <citation type = "idref" value = "ex.subj-add-constraint"/>).</p>
<figure id ="ex.subj-add-constraint">
<title>Recipe with preparation time and servings added</title>
<codeblock language ="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 1
</codeblock>
</figure>
<p>Now, the writers no longer have to remember that this information is required and where it should appear. The information is partitioned off into separate fields. The system prompts the writers for those fields and will raise errors if they forget. And the decision about where to include this information in output formats has been transferred to an algorithm.</p>
<p>This does not mean that the prep-time and serves information must be displayed as separate fields in the output. You could display this information in separate fields so that readers can find it more easily, but you could also have the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> construct sentences such as “Prep time, XX minutes. Serves YY.” using the <code>prep-time</code> and <code>serves</code> field values for XX and YY.</p>
<p>So, something interesting has happened here. To enforce a rhetorical constraint – that you must specify prep time and number of servings – we have moved away from markup that specifies presentation to markup that merely records data. In other words, <code>prep-time</code> and <code>serves</code> are data-oriented <phrase><annotation type="concept">subject-domain</annotation></phrase> structures that do not specify presentation at all. Partitioning this required information from the presentation of the recipe shifts responsibility for conformance from the writer to a <phrase><annotation type="algorithm" specifically="conformance algorithm">conformance algorithm</annotation></phrase>, making the design more testable and <phrase><annotation type="algorithm">repeatable</annotation></phrase> – a welcome redistribution of complexity.</p>
<p>This is a recurring pattern in structured writing and one of the most important things to understand about how structured writing works. It is almost always better to factor out a constraint than to enforce it. This can be a difficult idea to adjust to. Our natural first instinct when trying to achieve a  particular presentation is to specify it in detail. But this can be difficult, especially for rhetorical constraints such as requiring a recipe to contain certain pieces of information. Nor is it flexible if you want to vary the presentation. When you look at these kinds of problems, the first question should be, “Is there any way to factor out this constraint”? Impose a constraint only if you cannot factor it out.</p>
<p>When you <phrase><annotation type="italic">enforce</annotation></phrase> a constraint, the information architect has made the decision, but the writer must execute that decision in the content. When you <phrase><annotation type="italic">factor out</annotation></phrase> a constraint, the information architect has still made the decision, but an algorithm executes the decision, rather than the writer. Not only does this make the writer’s job simpler, but it helps ensure conformance to the constraint and allows you to change the decision without changing the writer’s content.</p>
<p>Beyond factoring out constraints, using <phrase><annotation type="concept">subject-domain</annotation></phrase> markup enables some interesting publishing possibilities. For instance, you can easily create a cookbook of recipes that take 30 minutes or less, because you can query your recipes and select just those where the <code>prep-time</code> field has a value of 30 minutes or less.</p>
<p>There other elements of presentation that you can factor out of the recipe structure. For example, the reStructuredText version in <citation type = "idref" value = "ex.subj-restructured"/> presents ingredients in a table, and the recipe structure in <citation type = "idref" value = "ex.subj-sam"/> uses a simple list. The block that contains the list is labeled “ingredients,” but the list is just an ordinary unordered list. The ingredient list in a recipe has constraints, but the markup doesn’t impose or record those constraints.</p>
<p>You generally define each ingredient in a recipe using three pieces of information: the name of the ingredient, the quantity, and the unit of measure used to express the quantity. These can be presented as a list or a table. To factor out the presentation choice, you can create an ingredient structure that calls out each piece of information separately (see <citation type = "idref" value = "ex.subj-ingredient-1"/>).</p>
<figure id ="ex.subj-ingredient-1">
<title>Subject-domain markup for ingredients</title>
<codeblock language ="sam">
ingredients:
    ingredient: 
        name: eggs
        quantity: 12
        unit: each
    ingredient:
        name: water
        quantity: 2
        unit: qt
</codeblock>
</figure>
<p><citation type = "idref" value = "ex.subj-ingredient-2"/> shows a shortcut that makes this markup less verbose. (This is a markup syntax named <phrase><annotation type="language">SAM</annotation></phrase> that I will talk about later).</p>
<figure id ="ex.subj-ingredient-2">
<title>Subject-domain shortcut for ingredient markup</title>
<codeblock language ="sam">
ingredients:: ingredient, quantity, unit
    eggs, 12, each
    water, 2, qt
</codeblock>
</figure>
<p>This markup turns the ingredients into a set of records with named fields: ingredient, quantity, and unit. Both markups enforce the constraint and record that it has been followed. And because the markup is independent of any one form of presentation, you are now free to use an algorithm to present them as a table, as a list, or in some other form.</p>
<p>By adding and recording these constraints, you get the same benefits as before, but now you also have access to the data, which means you can write algorithms to handle tasks such as converting units from imperial to metric for markets where metric units are preferred.</p>
<section>
<title>Using subjects to establish context</title>
<p>In <citation type = "nameref" value = "chapter.document-domain"/>, I noted that you can use context to identify the role that structures play in a document, which allows you to get away with fewer structures. For instance, you can use a single <code>title</code> tag for all titles because you can differentiate different types of titles from the context in which they occur. The same is true with subject-domain structures. They can provide context that allows you to treat basic text structures differently.</p>
<p>Consider our markup language for recipes (<citation type = "idref" value = "ex.subj-recipe-sam"/>).</p>
<figure id ="ex.subj-recipe-sam">
<title>Subject-domain markup for recipes</title>
<codeblock language ="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</codeblock>
</figure>
<p>With the ingredients we saw that you need to add additional structure to factor out whether the ingredients would be presented as a list or a table. For the preparation, the steps are currently marked up as a numbered list.  Suppose you want to present the steps as steps, rather than just as a generic numbered list (for instance, by labeling them as <phrase><annotation type="bold">Step 1.</annotation></phrase>, etc, rather than just <phrase><annotation type="bold">1.</annotation></phrase>). Do you need to create an additional <code>step</code> structure to do this? Not necessarily. In this case, you can distinguish an ordinary ordered list from a set of preparation steps based on context and write a rule in the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> that creates special formatting for ordered lists that are the children of <code>preparation</code> structures that are children of <code>recipe</code> structures. This uses the same method we used in <citation type = "nameref" value = "chapter.document-domain"/> to format a nested list differently from its parent list based on context. This is another example of how partitioning creates context that you can use to simplify processing.</p>
</section>
</chapter>
