<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.markup">
<title>Markup</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>markup</term>
</record>
</index>
<p>If structures in structured writing consist of nested blocks, the way those blocks are expressed in text and created by writers is (most of the time) markup. Markup is, essentially, the insertion of metadata into a text to constrain the creation and interpretation of that text. We have been looking at structured writing examples expressed in markup all through this book. Now let’s take a look at markup itself.</p>
<p>Markup has long been part of how we partitioned and distributed content creation tasks. For centuries, scribes worked directly in the media domain, using pen and ink to inscribe words and pictures on papyrus or velum. With the printing press, however, came a fundamental partitioning of the publishing process. Writers no longer worked directly in the media domain. While writers were still directly placing ink on paper, at first by pen and then by typewriter, they were no longer preparing the final visual form of the content. That task has been partitioned off and directed to the typesetter.</p>
<p>To tell the typesetter how to create the final visual form, document designers had to add additional instructions (metadata) to the writer’s manuscript. The designers did this using typesetter’s marks, and the process was called “marking up” the document. We still use “marking up” to describe how structured writing is done today and the term “markup language” to describe the languages used for most structured writing.</p>
<figure id="typesetter">
<title>Printer’s markup</title>
<insert item="../graphics/printermarkup.png" type="image"/>
</figure>
<p>The writer preparing a manuscript for typesetting was working in the <phrase><annotation type="concept">document domain</annotation></phrase>, indicating basic document structures like paragraphs, lists, and titles, without any indication of how they should look in print. The designer then wrote a set of instructions for applying formatting to those structures – a <phrase><annotation type="concept">formatting algorithm</annotation></phrase>. Then the typesetter executed that algorithm by setting the type which the printer then used to print final output.</p>
<p>This is pretty much exactly what we do today when we create an HTML page and specify a CSS stylesheet to supply the formatting instructions. Those instructions are then executed by the browser to render the content on screen or paper.</p>
<p>Actually, we are getting ahead of ourselves here. A better analogy to old style typesetter’s marks is an HTML page with the styles specified inline.</p>
<codeblock language="HTML">

&lt;p style="font-family: serif; font-weight: bold; 
 font-size: 12pt"&gt;
</codeblock>
<p>You can see that this markup is very very similar to the old typesetters marks in <citation idref="typesetter"/>.</p>
<p>All writing programs have to store the writing in files. There are two possible file types they can use: binary and text.</p>
<p>For all intents and purposes, a binary file is one that can only be read or written by a computer program, usually the program that created it. Open up a binary file in a text editor and you won’t be able to make heads or tails of it. And even if parts of it look like plain text, editing those sections and saving the file is likely to result in a corrupt file that the original application can no longer open.</p>
<p>A text file, by contrast, is one that you can open in a text editor and actually be able to read and write without breaking it. But to express structure in a text file, you need a way to interpolate information about structure into the text. The way we interpolate structure is with markup – special sequences of text characters that are recognized as defining structure rather than  expressing text.</p>
<p>In the following snippet of HTML, the markup characters are shown in bold while the plain text is shown in regular type.</p>
<formatted-code>
<line><phrase><annotation type="bold">&lt;h1&gt;</annotation></phrase>Moby Dick<phrase><annotation type="bold">&lt;/h1&gt;</annotation></phrase></line>
<line><phrase><annotation type="bold">&lt;p&gt;</annotation></phrase>Herman Melville’s <phrase><annotation type="bold">&lt;i&gt;</annotation></phrase>Moby Dick<phrase><annotation type="bold">&lt;/i&gt;</annotation></phrase> is a long </line>
<line>book about a big whale.<phrase><annotation type="bold">&lt;/p&gt;</annotation></phrase>      </line>
</formatted-code>
<p>A markup parser recognizes the markup characters and builds a structure that has the text and nested structures as content. A processing application then access that data, applying rules to the structures define by the markup, as we saw in <citation nameref="chapter.processing"/>.</p>
<section>
<title>Markup vs. regular text</title>
<p>Some markup languages make the distinction between markup and regular text completely explicit. An example of explicit markup is an HTML tag. Tags are set off by opening and closing angle brackets:</p>
<formatted-code>
<line><phrase><annotation type="bold">&lt;h1&gt;</annotation></phrase>      </line>
</formatted-code>
<p>HTML uses open angle brackets <code>&lt;</code> to indicate the start of markup and closing angle brackets <code>&gt;</code> to indicate the end of markup and a return to regular text. The use of a slash after <code>/</code> the opening <code>&lt;</code> indicates and end tag, which marks the end of a structure:</p>
<formatted-code>
<line><phrase><annotation type="bold">&lt;h1&gt;</annotation></phrase>Moby Dick<phrase><annotation type="bold">&lt;/h1&gt;</annotation></phrase></line>
</formatted-code>
<p>Actually the recognition of markup in HTML is a little more complicated than that, but that is more detail than we need to get into here. The point here is simply that there are certain sequences in the text which trigger a processing program (generally called a “parser”) to recognize when markup starts and when it ends.</p>
<p>What if you want to enter these “markup start” characters into the text of your document? You can’t just type them in because the parser will think they are markup. To fix this, markup languages either define “escape” characters, that signal the parser to treat the following character as text, or they include markup for inserting individual characters in a way that won’t be confused with markup characters. HTML takes the second approach. To include a <code>&lt;</code> character in HTML, you use what is called a “character entity.” A character entity is a code for a character. It begins with <code>&amp;</code> (another markup start character), followed by a character code and ending with a semicolon. The character entity for <code>&lt;</code> in HTML and XML is <code>&amp;lt;</code>. (“lt” is short for “less than”, the name of the <code>&lt;</code> character.)</p>
<codeblock language="html">

&lt;p&gt;In HTML, tags start with the &amp;lt; character.&lt;/p&gt;
</codeblock>
<p>This will display as:</p>
<blockquote>
<p>In HTML, tags start with the &lt; character.</p>
</blockquote>
<p>Since <code>&amp;</code> is also a markup start character, we need to replace it with a character entity as well if we want to include it literally. To include a literal <code>&amp;</code> you use the character entity <code>&amp;amp;</code>.</p>
<codeblock language="html">

&lt;p&gt;In HTML, character entities start 
with the &amp;amp; character.&lt;/p&gt;
</codeblock>
<p>This will display as:</p>
<blockquote>
<p>In HTML, character entities start with the &amp; character.</p>
</blockquote>
<p>To include the literal sting <code>&amp;amp;</code> therefore, you would write <code>&amp;amp;amp;</code>.</p>
<codeblock language="html">

&lt;p&gt;The character entity for an ampersand is &amp;amp;amp;.&lt;/p&gt;
</codeblock>
<p>This will display as:</p>
<blockquote>
<p>The character entity for an ampersand is &amp;amp;.</p>
</blockquote>
<p>Other markup languages do not make such an explicit distinction between text and markup. For example, in Markdown a numbered list is created by putting numbers in front of list items:</p>
<codeblock language="markdown">

1. First
2. Second
3. Third
</codeblock>
<p>Here the numbers are markup. That is, the Markdown processor recognizes them as indicating a list and will translate them into a structure in HTML like this:</p>
<codeblock language="html">

&lt;ol&gt;
    &lt;li&gt;First&lt;/li&gt;
    &lt;li&gt;Second&lt;/li&gt;
    &lt;li&gt;Third&lt;/li&gt;
&lt;/ol&gt;
</codeblock>
<p>But numbers followed by a period are only markup a certain context – the beginning of a line. Elsewhere, they are plain text. There is no need to escape numbers followed by periods when they occur elsewhere in the text. Thus the following markdown file:</p>
<codeblock language="markdown">

1. First comes 1.
2. Second comes 2.
3. Third comes 3.
</codeblock>
<p>will translate to HTML as:</p>
<codeblock language="html">

&lt;ol&gt;
    &lt;li&gt;First comes 1.&lt;/li&gt;
    &lt;li&gt;Second comes 2.&lt;/li&gt;
    &lt;li&gt;Third comes 3.&lt;/li&gt;
&lt;/ol&gt;
</codeblock>
<p>In Markdown, then, markup is not fully explicit. It is a pattern recognized in context. Rather than thinking of markup as being something entirely distinct from text, therefore, it is better to think of markup as being a pattern within a piece of text that delineates its structure. In some cases those patterns may be absolute, meaning the same thing everywhere, and sometimes they may be contextual, meaning one thing in one location and something else in another location. Sometimes the markup characters may be entirely distinct from the text characters, and sometimes a pattern in the text may serve as markup as well.</p>
</section>
<section>
<title>Markup languages</title>
<p>A set of markup conventions taken together constitutes a markup language.  <phrase><annotation type="language">Markdown</annotation></phrase>, <phrase><annotation type="language">DocBook</annotation></phrase>, and <phrase><annotation type="language">JavaDoc</annotation></phrase> are all markup languages. However, each of these languages recognizes markup in a different way. <code>&amp;</code> may be a markup start character in <phrase><annotation type="language">HTML</annotation></phrase> and <phrase><annotation type="language">XML</annotation></phrase>, but it is just a plain text character in <phrase><annotation type="language">reStructuredText</annotation></phrase>.</p>
<p>We can usefully divide markup languages into three types which I will call concrete, abstract, and hybrid.</p>
</section>
<section>
<title>Concrete markup languages</title>
<p>A concrete markup language has a fixed set of markup patterns that describes a fixed set of content structures. For example, <phrase><annotation type="language">Markdown</annotation></phrase> is a concrete markup language that uses a markup that is designed to mimic the way people write plain text emails. Here is the passage about <phrase><annotation type="citetitle">Moby Dick</annotation></phrase> written in Markdown:</p>
<codeblock language="markdown">

Moby Dick
=========

Herman Melville's _Moby Dick_ is a long book about a big whale.
</codeblock>
<p>In <phrase><annotation type="language">Markdown</annotation></phrase>, a line of text underlined with equal signs (<code>=</code>) is a level one heading. A paragraph is a block of text set off by blank lines. Emphasized text is surrounded with underscores or asterisks.</p>
<p>In Markdown, these patterns correspond directly to specific document structures. You cannot invent new structures without inventing a new version of Markdown.</p>
</section>
<section>
<title>Abstract markup languages</title>
<p>An abstract markup languages does not describe specific concrete document structures directly. It describes abstract markup structures which can be named to represent structures in any domain.</p>
<p>XML is an example of an abstract markup language.<citation idref="1"/> The markup in an XML file does not directly indicate things like headings or paragraphs. Instead, it indicates a set of abstract structures called elements, attributes, entities, processing instructions, marked sections, and comments.</p>
<footnote id="1">
<p>The formal term for a language like XML is “meta language”, a language for describing other languages. In calling XML an “abstract” language, I am focusing on a different property, its use of structures that are not parts of a document but generic containers. A meta language needs such abstract containers. But I find that the term “meta language” is not helpful to most readers, so I have chosen instead to focus on this property of using abstract structures as opposed to the concrete structures of a language like Markdown.</p>
</footnote>
<p>None of these abstract structures describes document structures in any of the structured writing domains. Instead, specific markup languages based on XML (or its cousin, SGML) indicate <phrase>subject</phrase>, <phrase>document</phrase>, <phrase>management</phrase>, or <phrase><annotation type="concept">media domain</annotation></phrase> structures as named instances of elements and attributes.</p>
<p>Here is the <phrase><annotation type="citetitle">Moby Dick</annotation></phrase> passage again, this time in <phrase><annotation type="language">XML</annotation></phrase> (more specifically, in <phrase><annotation type="language">DocBook</annotation></phrase>):</p>
<codeblock language="DocBook">

&lt;section&gt;
    &lt;title&gt;Moby Dick&lt;/title&gt;
    &lt;para&gt;Herman Melville's &lt;citetitle&gt;Moby Dick&lt;/citetitle&gt; 
    is a long book about a big whale.&lt;/para&gt;
&lt;/section&gt;
</codeblock>
<p>The structure described by the XML syntax here is that of an element (<code>section</code>) which contains two other elements (<code>title</code> and <code>para</code>), one of which contains text (<code>title</code>), and one of which (<code>para</code>) contains a mix of text and another element (<code>citetitle</code>). There is no separate syntax for titles or paragraphs as there is in Markdown. Everything is an element and every element has a name. To define specific document domain structures, you use named elements. This allows you to create any set of named elements you like to represent any structure you need.</p>
<p>Unlike a <phrase><annotation type="language">Markdown</annotation></phrase> parser, an XML parser does not see paragraphs or titles. It sees elements. It passes the elements it finds, along with their names, down to a processing application which is responsible for knowing what “section”, “title”, and “para” elements mean in a particular markup language like DocBook. The parser is common to all XML-based languages, but the processing application is specific to <phrase><annotation type="language">DocBook</annotation></phrase>. Thus while processing a concrete language like Markdown is generally a one step operation, processing an abstract language like XML is a two step operation, with the first step being to parse the file to discover the structures defined by elements and the second step to process those structures according to a specific set of rules applicable to a particular markup language.</p>
</section>
<section>
<title>Instances of abstract markup languages</title>
<p>This means that <phrase><annotation type="language">DocBook</annotation></phrase> is a instance of the abstract language <phrase><annotation type="language">XML</annotation></phrase>. XML defines abstract structures. DocBook defines concrete structures by giving names to XML elements. Many common markup languages are instances of XML<citation idref="2"/>. XML is virtually the only abstract language used for content these days, so it is the only abstract language I am going to talk about.</p>
<footnote id="2">
<p>Sometimes also referred to as “applications” of XML, though this usage was far more common in the days of <phrase><annotation type="language">SGML</annotation></phrase>.</p>
</footnote>
<p>Since specific markup languages like <phrase><annotation type="language">DocBook</annotation></phrase> are instances of <phrase><annotation type="language">XML</annotation></phrase>, I need to revise my earlier statement: We can usefully divide markup languages into <phrase><annotation type="bold">four</annotation></phrase> types: concrete, abstract, instances of abstract, and hybrid. In fact (spoiler alert), lets revise it again: We can usefully divide markup languages into <phrase><annotation type="bold">five</annotation></phrase> types: concrete, abstract, instances of abstract, hybrid, and instances of hybrid.</p>
<p>You can’t write directly in a abstract language like XML, only in an instance. You can write directly in some hybrid languages, though not all of them.</p>
<footnote id="3">
<p>Or to put it another way, you write in DocBook semantics using XML syntax. Alternatively, since DocBook originated in the days of XML’s predecessor abstract language, SGML, you can write DocBook semantics in SGML syntax.</p>
</footnote>
<p>Or to put it another way, as a designer of markup languages your can either:</p>
<ul>
<li>
<p>Design a concrete language from scratch (or modify and existing one)</p>
</li>
<li>
<p>Use an abstract language (probably XML) to design a concrete language.</p>
</li>
<li>
<p>Use a hybrid language to design a concrete language.</p>
</li>
</ul>
<p>As a writer, you will either use:</p>
<ul>
<li>
<p>A concrete language with ad-hoc syntax (like <phrase><annotation type="language">Markdown</annotation></phrase>)</p>
</li>
<li>
<p>The concrete parts of a hybrid markup language (like <phrase><annotation type="language">ReStructuredText</annotation></phrase>) without extensions</p>
</li>
<li>
<p>A concrete language (like <phrase><annotation type="language">DocBook</annotation></phrase>) based on an abstract language (probably XML)</p>
</li>
<li>
<p>A concrete language (like the recipe markup language used in many of the examples in this book) based on a hybrid language (<phrase><annotation type="language">SAM</annotation></phrase> in this case)</p>
</li>
</ul>
</section>
<section>
<title>Concrete languages in abstract clothing</title>
<p>The key defining characteristic of an abstract language is the use of abstract named structures like XML elements. All XML elements share a common markup start sequence followed by the element name. This creates a named block of content.  But concrete languages can use named blocks too. For example, <phrase><annotation type="language">JavaDoc</annotation></phrase>, a concrete language for describing Java APIs, uses named blocks using <code>@</code> as a markup start character:</p>
<codeblock language="Java">

/**
 * Validates a chess move.
 *
 * Use {@link #doMove(int theFromFile, int theFromRank, 
 int theToFile, int theToRank)} to move a piece.
 *
 * @param theFromFile file from which a piece is being moved
 * @param theFromRank rank from which a piece is being moved
 * @param theToFile   file to which a piece is being moved
 * @param theToRank   rank to which a piece is being moved
 * @return            true if the move is valid, otherwise false
 */
boolean isValidMove(int theFromFile, int theFromRank, 
int theToFile, int theToRank) {
    // ...body
}
</codeblock>
<p>In this sample, <code>@param</code> and <code>@return</code> are named blocks. But in JavaDoc, there is a fixed set of named blocks that are defined as part of the language. You can’t create a new language by defining your own block names. By contrast, <phrase><annotation type="language">XML</annotation></phrase> itself defines absolutely no element names. Only instances of XML, like <phrase><annotation type="language">DocBook</annotation></phrase>, define element names.</p>
<p>A particularly notable example of a concrete language in abstract clothing is <phrase><annotation type="language">HTML</annotation></phrase>. HTML looks a lot like an instance of <phrase><annotation type="language">XML</annotation></phrase>, but it is not. An XML parser cannot parse most HTML. HTML is nominally an instance of SGML but never did quite conform to it. HTML generally requires a specific HTML parser, such as is found in all browsers. XHTML is a version of HTML that is an instance of XML. <phrase>HTML5</phrase> actually supports two different syntaxes, one of which is an instance of XML and one of which is not, meaning that it has both a concrete syntax and a syntax which is a instance of an abstract language. (This is consequence of having made a mess early on and having to live with it for evermore. A lesson for all markup language designers.)</p>
</section>
<section>
<title>The ability to extend</title>
<p>The downside of concrete languages is that their concrete syntax defines a fixed set of structures. If you want other structures, there is no way to create them short of inventing your own concrete language, or a variant of an existing one, and coding the parser and all the other tools to interpret that language. Designing new concrete languages is non-trivial because you need to make sure that any combination of characters that the writer may type is interpreted in an unambiguous way. Some versions of <phrase><annotation type="language">Markdown</annotation></phrase>, including the original, contain ambiguities about how certain sequences of characters should be interpreted, which obviously detracts from its reliability and <phrase><annotation type="concept">functional lucidity</annotation></phrase>.</p>
<p>If you want to define your own structures to express the constraints that matter to your business, you need an easier way to do it. Abstract languages like XML make this much easier. You just write a <phrase><annotation type="tool">schema</annotation></phrase> describing the structures you want, and any algorithms you need to process those structures. (I’ll talk about schemas in <citation nameref="chapter.constraints"/>.)</p>
</section>
<section>
<title>The ability to constrain</title>
<p>Extensibility allows you to add structures to a language but does not place restrictions on where they can occur. Constraints lets you limit where structures can be used.</p>
<p>Extensibility allows you to have elements called <code>ingredient</code> and <code>wine-match</code>. Constraints allow you to require that <code>ingredient</code> only occurs inside an <code>ingredients</code> structure and that the content of the <code>ingredients</code> structure must be a sequence of <code>ingredient</code> elements and nothing else. Constraints let you say that writers can’t put <code>wine-match</code> in the <code>introduction</code> or as a <code>step</code> in the <code>preparation</code>, they can only put it as a child of <code>recipe</code> after the <code>servings</code> field and before the <code>prep-time</code> field. Constraints allow, you to require that every recipe have the full list of nutritional information.</p>
<p>Constraints allow you to partition the content system by creating reliable interfaces between different people and processes. All markup languages have constraints. With a concrete language, you get the constraints that are built into the language. Abstract languages allow you to define your own structures, and your own constraints. However, as we shall see in <citation nameref="chapter.extensible"/>, not all languages that are extensible are also constrainable.</p>
</section>
<section>
<title>Showing and hiding structure</title>
<p>To reliably create structured content, writers need to see the structures they are creating. In the <phrase><annotation type="concept">media domain</annotation></phrase> a WYSIWYG interface shows you the media domain structures you are creating by visually rendering them on screen. But what about in the other domains? The document domain creates abstract document structures that are deliberately separated from their formatting. The subject domain creates subject-based structures that don’t have a one-to-one relationship with any organization or formatting of a document. The management domain creates structures that have nothing to do with the representation of content at all. How does the author get to see these structures when writing in these domains?</p>
<p>This is a big problem with <phrase><annotation type="language">XML</annotation></phrase>, the only abstract language in widespread use today. XML tends to hide structure. As an abstract language, an XML document is a hierarchy of elements and attributes – not the concrete <phrase>subject</phrase>, <phrase>document</phrase>, <phrase>management</phrase>, or <phrase><annotation type="concept">media domain</annotation></phrase> structures the author is supposed to be create. Those concrete structures are present in the markup because their names are there, but they are not visually distinguished the way the basic document structures are in a concrete language like Markdown. And XML syntax is verbose, meaning that there is a lot of clutter in the raw text of an XML document, which makes it hard to discern both the structure and the content. XML’s verbose syntax and strict hierarchy were designed to make it easy to parse and to help guard against transmission errors. It was not designed to be a format to write in. Thus is does a poor job of partitioning parsing issues from authoring issues.</p>
<p>To remove that clutter, many authors use XML editors that provide a graphical view of the content similar to that of a word processor. But while graphical XML editors removes visual clutter, they also hide the structure. Even if the author is supposed to be working in the document domain or the subject domain, the editor is now displaying content in the media domain. This greatly reduces the functional lucidity of the <phrase><annotation type="concept">document domain</annotation></phrase> or <phrase><annotation type="concept">subject domain</annotation></phrase> language and encourages backsliding into the <phrase><annotation type="concept">media domain</annotation></phrase>.</p>
<p>And then there are the problems that arise when you try to edit the graphical view of an XML document. Underneath is a hierarchical XML structure, but all you can see is the flat media-domain view of the graphical editor. Editing or cutting and pasting structures you can’t see can be frustrating and time consuming. You can learn to do it, but even when you learn, the process is still more complicated than it should be. Most editors will let you turn on kind of hybrid view where you see a graphical representation of the XML tags in the WYSIWYG view, allowing you to manipulate the tags in this view, but this is a highly complex interface that requires a lot of attention to us and a lot of study to learn and get used to.</p>
<p>Concrete markup languages like Markdown, on the other hand, show you the structure you are creating and are simple to edit.</p>
</section>
<section>
<title>Hybrid languages</title>
<p>There are significant advantages and significant disadvantages, then, in both concrete and abstract languages. Hybrid languages try to find a middle way.</p>
<p>By hybrid, I mean a language that combines both abstract and concrete markup in one language. A hybrid language has a base set of concrete syntax describing basic text structures but it also has abstract structures such as XML’s elements and attributes that can be the basis of extensibility and constraint.</p>
<p>An example of a hybrid markup language is <phrase><annotation type="language">reStructuredText</annotation></phrase>. Like <phrase><annotation type="language">Markdown</annotation></phrase>, it has a basic concrete syntax for things like lists and paragraphs. But it also supports what it calls “directives”, which are essentially named block structures. For example, a codeblock in reStructuredText looks like this:</p>
<codeblock language="reST">

.. code-block:: html
    :linenos:

    for x in range(10):
        print(x+1, "Hello, World")
</codeblock>
<p><phrase><annotation type="language">reStructuredText</annotation></phrase> provides an extension mechanism that allows you to add new directives. But while reStructuredText directives are similar to XML elements, reStructuredText predefines a core set of directives for common document structures. The <code>code-block</code> directive above is not an extension of reStructuredText, it is part of the core language.</p>
<p>Because it defines a large set of document-domain directives, reStructuredText is inherently a <phrase><annotation type="concept">document domain</annotation></phrase> language. You could, of course, add subject-domain directives to it. Most document-domain languages in use today include some subject-domain structures, reflecting the purpose they were originally designed to serve. Nonetheless, reStructuredText is inherently document domain.</p>
<p>Another important note about reStructuredText is that it has no constraint mechanism. You can add new directives, but you can’t constrain their use, or the use of the predefined directives.</p>
<p>I have developed a hybrid markup language which is designed to be both extensible and constrainable. I call it SAM (which stands either for Semantic Authoring Markdown or Semantic Authoring Markup, as you please). SAM is the language I have been using for most of the examples in this book.</p>
<p>Here is the <phrase><annotation type="citetitle">Moby Dick</annotation></phrase> passage written in SAM:</p>
<codeblock language="sam">

section: Moby Dick

    Herman Melville's {Moby Dick}(novel) is a long 
    book about a big whale.
</codeblock>
<p>In SAM, as in Markdown and most other concrete markup languages, a paragraph is just a block of text set off by whitespace. Thus there is no explicit  structure named <code>p</code> or <code>para</code>.</p>
<p>At the beginning of a line, a single word without spaces and followed by a colon creates an abstract structure called a block. The word before the colon is the name of the block. Thus <code>section:</code> above creates a block structure named “section” just as in XML an element named <code>&lt;section&gt;</code> would create a block structure named “section”. Blocks can contain blocks or text structures such as paragraphs and lists.</p>
<p>The hierarchy of a SAM document is indicated by indentation. Thus the paragraph in the sample is contained in the <code>section</code> block. Using indentation to indicate containers helps make the structure of the document visually clear and removes the need for end tags, which reduces verbosity, making the text easier to read.</p>
<p>Within a paragraph, curly braces markup a phrase, to which you can attach an annotation in parentheses. Here the phrase “Moby Dick” is annotated to indicate that it is a novel. SAM also supports decorations, like the underscores in the Markdown example, so in the <phrase><annotation type="concept">media domain</annotation></phrase> “Moby Dick” could have been written <code>_Moby Dick_</code>.</p>
<p>SAM is not intended to be nearly as general in scope as a purely abstract markup language like XML. It is meant for semantic authoring (which is to say, structured writing). As such it incorporates a number of shortcuts to make writing typical structured documents easier.</p>
<p>In a typical document, a block of text (larger than a paragraph) typically has a title. So in SAM, a string after a block tag is considered to be a title. That means that the markup above is equivalent to:</p>
<codeblock language="sam">

section: 
    title: Moby Dick

    Herman Melville's {Moby Dick}(novel) is a long 
    book about a big whale.
</codeblock>
<p>Unlike <phrase><annotation type="language">RestructuredText</annotation></phrase>, however, <phrase><annotation type="language">SAM</annotation></phrase> does not have an extensive set of predefined named blocks. It only predefines the basic text structures that it provides concrete syntax for. You can write an entire book in reStructuredText without defining any new directives, The most you can write in SAM without defining any blocks is a single paragraph or list.</p>
<p>SAM is designed to have a constraint mechanism, allowing you to write a schema to define what blocks and annotation are allowed in a SAM document. This includes constraining the use of the concrete syntax as well. SAM thus represents a different type of hybrid from <phrase><annotation type="language">reStructuredText</annotation></phrase> which is  extensible but not constrainable. This reflects the fact that reStructuredText is intended as an extensible document domain language, whereas SAM is intended primarily as a neutral starting point for designing subject domain languages (though you can design document domain languages in it as well).</p>
<p>Also unlike <phrase><annotation type="language">RestructuredText</annotation></phrase>, <phrase><annotation type="language">SAM</annotation></phrase> is not intended to have its own publishing tool chain. The SAM parser outputs an <phrase><annotation type="language">XML</annotation></phrase> document which can then be processed by XML publishing tools by transforming it into an appropriate document domain language. This book was written in SAM, using a simple document-domain language I created for the purpose, with a number of subject domain annotations. That language was transformed into a semantically equivalent XML document by the SAM parser. That XML document was then transformed into <phrase><annotation type="language">DocBook</annotation></phrase> according to the publisher’s specifications (the publisher has a number of constraints on the DocBook they use that are not expressed in DocBook itself). From that point on, the publisher’s existing DocBook tool chain took over.</p>
<p>Most concrete markup languages, at least those designed for documents, try to make their marked-up documents look and read as much as possible like a formatted document. SAM is designed to be easy and natural to read, like a concrete markup language, but it is also designed to make the structure of the content as clear and explicit as possible while requiring the minimum of markup. This is why it uses indentation to express structure. Indentation shows structure clearly with a minimum of markup noise to distract the reader’s eye.</p>
<p>Because it is meant specifically for authoring, a SAM parser outputs XML, which can then be processed by the standard XML tool chain. Below is how the SAM markup above would be output by a SAM parser:</p>
<codeblock language="XML">

&lt;section&gt;
    &lt;title&gt;Moby Dick&lt;/title&gt;        
    &lt;p&gt;Herman Melville's &lt;phrase&gt;
    &lt;annotation type="novel"/&gt;Moby Dick&lt;/annotation&gt;
    &lt;/phrase&gt; is a long book about a big whale.&lt;/p&gt;
&lt;/section&gt;
</codeblock>
</section>
<section>
<title>Instances of hybrid markup languages</title>
<p>I said above that this book is written in SAM, but that is not quite accurate. As noted above, you can’t write anything in an abstract or hybrid language directly. You write in instances of those languages. Thus DocBook is an instance of the abstract language XML. You can write documents in DocBook. We do say, of course, that we write documents in XML, but that statement is, if not wholly inaccurate, certainly non-specific. Saying the a document is written in DocBook tells you what constraints it meets. Saying it is written in XML merely tells you which syntax it uses, which is a whole lot less informative.</p>
<p>So, to be more specific, this book is written in a markup language written in SAM, one that I created for the specific purpose of writing this book. That markup language was then transformed by a processing application into <phrase><annotation type="language">DocBook</annotation></phrase>, which is the markup language that the publisher uses for producing books. From there is was processed through the publisher’s regular DocBook-based tool chain to produce print and e-book output.</p>
<p>Choosing the style of markup you will use is very much tied to the choices you make about the structures you want. In the following chapters we will look at a variety of markup languages using a variety of markup styles. As always, of course, your choices should be dictated by what works best for the overall partitioning and direction of complexity that you are seeking to achieve in your content system.</p>
</section>
</chapter>
