<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.generate">
<title>Generated Content</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept">affordances</annotation></phrase> <phrase><annotation type="concept">AI</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">apps</annotation></phrase> <phrase><annotation type="concept" specifically="block-and-map architecture">block and map architecture</annotation></phrase> <phrase><annotation type="concept">block-and-map architecture</annotation></phrase> <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up architecture</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content engineering</annotation></phrase> <phrase><annotation type="concept">content hygiene</annotation></phrase> <phrase><annotation type="concept">content plan</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">curse of knowledge</annotation></phrase> <phrase><annotation type="concept">desktop publishing system</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">Duplication</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">filtering</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept" specifically="information architecture">information architectures</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information scent</annotation></phrase> <phrase><annotation type="concept">information snacking</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> <phrase><annotation type="concept">information-typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management domains</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">Management domains</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase> <phrase><annotation type="concept">markup language</annotation></phrase> <phrase><annotation type="concept">markup</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media domains</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">namespace</annotation></phrase> <phrase><annotation type="concept">natural language processing</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">out-of-band communication</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">profiling</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical quality</annotation></phrase> <phrase><annotation type="concept">rhetorical structure</annotation></phrase> <phrase><annotation type="concept" specifically="rhetoric">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">schema language</annotation></phrase> <phrase><annotation type="concept" specifically="schema">Schemas</annotation></phrase> <phrase><annotation type="concept" specifically="schema">schemas</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">social networks</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">stop list</annotation></phrase> <phrase><annotation type="concept">structural block</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style guide</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">Subject</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology management</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">vector graphics</annotation></phrase> <phrase><annotation type="concept">web publishing</annotation></phrase> <phrase><annotation type="concept">Wikipedia</annotation></phrase> <phrase><annotation type="concept">workflow</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase> <phrase><annotation type="concept">glyphs</annotation></phrase> <phrase><annotation type="concept" specifically="hierarchical information architecture">hierarchical information architectures</annotation></phrase></p>
<p>Markup Languages</p>
<p><phrase><annotation type="markup-language">ASCIIDOC</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">CommonMark</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="markup-language">GitHub flavored Markdown</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML5</annotation></annotation></phrase> <phrase><annotation type="markup-language">JavaDoc</annotation></phrase> <phrase><annotation type="markup-language">LaTeX</annotation></phrase> <phrase><annotation type="markup-language">Lightweight DITA</annotation></phrase> <phrase><annotation type="markup-language">Markdown</annotation></phrase> <phrase><annotation type="markup-language">mathml</annotation></phrase> <phrase><annotation type="markup-language">reStructuredText</annotation></phrase> <phrase><annotation type="markup-language">SAM</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">SGML</annotation></annotation></phrase> <phrase><annotation type="markup-language">TeX</annotation></phrase> <phrase><annotation type="markup-language">vCard</annotation></phrase> <phrase><annotation type="markup-language">Wiki markup</annotation></phrase> <phrase><annotation type="markup-language">XLIFF</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XHTML</annotation></annotation></phrase></p>
<p>Schema languages</p>
<p><phrase><annotation type="schema-language">XSD</annotation></phrase> <phrase><annotation type="schema-language" specifically="XSD">XML schema</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="programming-language">cascading style sheets</annotation></phrase> <phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase> <phrase><annotation type="language-language">XSL-FO</annotation></phrase> <phrase><annotation type="programming-language">XSLT</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">Assemble from Pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">assemble from pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audits</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm" specifically="collaboration">collaborate</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance-checking algorithm</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="algorithm">content generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content generation</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content-generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">eliminating duplication</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithms</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting algorithms</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content from formatting">separation of content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool" specifically="API documentation tool">API documentation tools</annotation></phrase> <phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="component content management system">CCMS</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">component content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing</annotation></phrase> <phrase><annotation type="tool">desktop publishing system</annotation></phrase> <phrase><annotation type="tool">DITA CMS</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool" specifically="formatting language">formatting languages</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting software</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">GitHub</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Jekyll</annotation></phrase> <phrase><annotation type="tool">Liquid</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool" specifically="search engine">Search engines</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">SPFE Open Tool Kit</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool" specifically="static site generator">static site generators</annotation></phrase> <phrase><annotation type="tool">structured editor</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">validator</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> <phrase><annotation type="tool">WordPerfect</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool" specifically="XML editor">XML editors</annotation></phrase> <phrase><annotation type="tool">XML editor</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">wikis</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">Wikis</annotation></phrase> <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> <phrase><annotation type="tool">word processor</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role" specifically="content engineer">content engineers</annotation></phrase> <phrase><annotation type="role">content strategist</annotation></phrase> <phrase><annotation type="role" specifically="content strategist">content strategists</annotation></phrase> <phrase><annotation type="role">document designer</annotation></phrase> <phrase><annotation type="role" specifically="document designer">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role" specifically="information architect">information architects</annotation></phrase> <phrase><annotation type="role">prepress operator</annotation></phrase> <phrase><annotation type="role">publication designer</annotation></phrase> <phrase><annotation type="role" specifically="publication designer">publication designers</annotation></phrase> <phrase><annotation type="role" specifically="subject matter expert">subject matter experts</annotation></phrase> <phrase><annotation type="role" specifically="terminologist">terminologists</annotation></phrase> <phrase><annotation type="role">terminologist</annotation></phrase> <phrase><annotation type="role">typesetter</annotation></phrase> <phrase><annotation type="role">webmaster</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>People <phrase><annotation type="person">Donald Knuth</annotation></phrase> <phrase><annotation type="person">Gutenberg</annotation></phrase> <phrase><annotation type="person">Henry Ford</annotation></phrase> <phrase><annotation type="person">John Gruber</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">fragment</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">map</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure" specifically="rhetorical block">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure" specifically="table">tables</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure" specifically="topic">topics</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">books</annotation></phrase> <phrase><annotation type="media">CD-ROM</annotation></phrase> <phrase><annotation type="media">ebooks</annotation></phrase> <phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Interactive Electronic Technical Manuals</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>generated content</term>
</record>
<record>
<type>task</type>
<term>generating content</term>
</record>
</index>
<p>I have mentioned that one of the advantages of the <phrase><annotation type="concept">subject domain</annotation></phrase> is that it allows you to generate different types of rhetoric from a base of subject-domain data. Here, I look at the content generation algorithm in greater depth.</p>
<p>There is nothing new about generating content. <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> and <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> can generate indexes and tables of contents, for instance, and the <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> algorithms in <citation nameref="chapter.reuse"/> generate content by combining smaller pieces of content or data to form larger units of content.</p>
<p>The fundamentals of content generation are pretty simple. You take separate pieces of content and data and combine them to form new content. Thus, when I spoke earlier about storing the ingredients of a recipe as a data structure and using an algorithm to present them as either a table or a list, that was an example of content generation.</p>
<p><citation idref="fig.generate-pseudocode"/> shows an algorithm to turn that data into a list (again, in pseudocode).</p>
<figure id="fig.generate-pseudocode">
<title>Algorithm to turn a recipe data structure into a list</title>

<codeblock language="pseudo">
match ingredients
    create ul
        continue
    
match ingredients/record
    create li
        output name
        output [tab]
        output quantity
        if unit is not 'each'
            output [space]
            output unit
</codeblock>
</figure>
<p><citation idref="fig.generate-w-prep"/> shows an algorithm for interpolating the serving and preptime fields into the introduction of a recipe.</p>
<figure id="fig.generate-w-prep">
<title>Algorithm to interpolate serving and preptime into a recipe</title>

<codeblock language="pseudo">
match description
    continue
    output 'Preparation time is '
    output /recipe/preptime
    output '. Serves '
    output /recipe/serves
    output '.'

match preptime
    ignore

match serves
    ignore
</codeblock>
</figure>
<p>But this kind of content generation does not have to confine itself to working within a single document. It can pull content from several files or assemble different collections of content to serve a common rhetorical purpose, such as compiling a low-calorie cook book based on nutrition information in a collection of recipes. And it can generate many of the elements required to build a top-down or bottom-up information architecture.</p>
<section>
<title>Categorization</title>

<p>One of the key elements of top-down information architecture is <phrase><annotation type="concept">categorization</annotation></phrase>. An <phrase><annotation type="role">information architect</annotation></phrase> develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.</p>
<p>Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called <phrase><annotation type="italic"><annotation type="concept">faceted navigation</annotation></annotation></phrase>. The easiest place to see faceted navigation in action is on a used-car site, where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions.</p>
<p>Categorization of content requires metadata to identify which category it belongs to. (Even if you just sort papers into piles, as soon as you put a label on each pile, you are adding metadata, and if you don’t add a label, you will soon forget which pile is which.) Categorization may involve the addition of new metadata or it may rely on metadata that is already attached to the content. This effectively means that your categories are expressed as query statements, and those queries do not have to operate on a single piece of metadata. A query can create a category out of the conjunction of several pieces of metadata. For example, you could create a category of heart-healthy recipes by writing a query that looks at the salt, fat, and calorie metadata of a collection of recipes.</p>
<p>For content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, the <phrase><annotation type="concept">metadata</annotation></phrase> required to assign a piece of content to a category may be inherent in its subject-domain markup. It is the nature of the subject domain to describe the subject matter. Therefore, any markup that describes the subject matter may already contain the fields you need for categorization. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don’t need to create additional structures to support a new algorithm.</p>
<p>Relying on the <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a <phrase><annotation type="tool">repository</annotation></phrase> so much easier for writers. But, in some cases, it can also avoid the need for a costly <phrase><annotation type="tool">content management system</annotation></phrase>, since it allows the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> to categorize content at build time without needing a separate metadata store or a separate system to manage categorization. I look more at the role of the content management system in <citation nameref="chapter.content-management"/>.</p>
</section>
<section>
<title>Tables of Contents (TOCs)</title>

<index>
<record>
<type>concept</type>
<term>table of contents</term>
</record>
</index>
<p>If you are creating a top-down information architecture, your structured writing system needs to generate <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> just as a <phrase><annotation type="tool">word processor</annotation></phrase> or <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> does.</p>
<p>Tables of contents can serve different purposes, depending on the nature of the content and the form of the output. Some describe a linear reading order, some provide a <phrase><annotation type="concept">classification</annotation></phrase> scheme for random access to the content, and some simply provide a list of chapters that does not necessarily imply an intended reading order.</p>
<p>A table of contents may seem like a <phrase><annotation type="concept">document-domain</annotation></phrase> structure, but it is really more of a <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> structure, for two reasons. First, it contains specific links to specific resources at specific addresses, or specific page numbers in a paper or a virtual paper format such as <phrase><annotation type="media">PDF</annotation></phrase>. Second, it is virtually always factored out in <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase>. Tables of contents are not written, they are generated.</p>
<p>From a structured writing point of view, what matters is how they are generated. In <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase>, for instance, it is typical to write each chapter of a book in a separate <code>chapter</code> file and then pull them together into a book using a <code>book</code> file. The order of the table of contents is then determined by the order in which the chapters are listed in the <code>book</code> file. The table of contents is generated by extracting chapter and section headings from the <code>chapter</code> files in the order they appear in the <code>book</code> file.</p>
<p>In <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase>, the normal process is to assemble a book using a <code>map</code> file. A map file may assemble a book out of <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> topics or other maps, and this may include assembling the chapters from topics as well. In the end, though, the <phrase><annotation type="structure">table of contents</annotation></phrase> is generated in the same way, by traversing the document assembled by the <code>map</code>.</p>
<p>In both cases, the order of the TOC is specified by hand by the person who creates the <code>book</code> or <code>map</code> file. But there are other ways to determine the order of content in a TOC. For instance, a reference work such as an API reference may be organized by listing each library in order by name and each function in alphabetical order by name within its library, creating a table of content with two levels. You don’t need to write a map or book file to create this table of contents. There is an algorithm for creating this table of contents. In fact, it is the algorithm stated earlier in this paragraph: “listing each library in order by name and each function in alphabetical order by name within its library.” <citation idref="fig.generate-create-toc"/> shows this algorithm in pseudo code.</p>
<figure id="fig.generate-create-toc">
<title>Generate a TOC for an API reference</title>

<codeblock language="pseudo">
create toc
    for each library sorted alphabetically
        create toc-entry library name
        for each function in library sorted alphabetically
            create toc-entry function name
</codeblock>
</figure>
<p><phrase><annotation type="structure" specifically="table of contents">Tables of contents</annotation></phrase> serve different purposes. Some describe a curriculum, a designed reading order. Others are simply a means of navigation, a way to select one topic out of a collection of many. If your content is written in the <phrase><annotation type="concept">subject domain</annotation></phrase>, the chances are that it already contains the structures on which such classifications could be based, and again, the <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> can be generated based on the <phrase><annotation type="concept">metadata</annotation></phrase> already in the content.</p>
<p>One advantage of this approach is that if an algorithm assembles the <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> based on <phrase><annotation type="concept">metadata</annotation></phrase>, new content is automatically included in the TOC the next time you generate output. This simplifies the task of adding new content by avoiding the need to update multiple files or systems. This makes life easier for writers because they do not need to know how the TOC is constructed. They only have to create individual pieces of <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> content and submit them to the right location. This also <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase>, since the metadata the TOC generation algorithm uses is stored only in one place.</p>
</section>
<section>
<title>Lists</title>

<index>
<record>
<type>concept</type>
<term>lists</term>
</record>
</index>
<p>A major feature of a <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> is the <phrase><annotation type="structure">list</annotation></phrase>. Like TOCs, lists are a catalog of resources. But while a TOC is a list of resources defined by their container (contents = things in a container), a list may have any principle of organization or inclusion.</p>
<p>For instance, in a collection of movie reviews, you might want to include a filmography for each actor. Such a list is not only a useful piece of information, it is also an important aid for navigating a site. Maintaining such a list by hand would be laborious and error prone, especially with new movies being added to the collection all the time.</p>
<p>If you have your movie reviews in a structured format that lists the actors in the movie in a format accessible to algorithms, like this:</p>
<codeblock language="sam">
movie: Rio Bravo
    starring:: actor
        John Wayne
        Dean Martin    
        Ricky Nelson    
        Angie Dickinson
        Walter Brennan
</codeblock>
<p>you can generate the filmographies for all your actors, like this:</p>
<codeblock language="pseudo">
create-filmographies
    for each unique actor in movie/starring/actor 
        create filmography named actor with link to actor
        for each movie where starring/actor = actor
            create entry named movie with link to movie
</codeblock>
<p>Tables of contents are a <phrase><annotation type="concept">top-down information architecture</annotation></phrase> device. You expect to find them at the top of the information set. List are a <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> device. You expect to find them as independent pages or as elements within a page. Thus, if your collection includes the biographies of actors, and you want each biography to include the filmography, you can omit the filmography from the <phrase><annotation type="concept">subject domain</annotation></phrase> version of the biography and have the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> generate it with the output, as shown in <citation idref="fig.generate-filmography"/>.</p>
<figure id="fig.generate-filmography">
<title>Algorithm to generate a filmography</title>

<codeblock language="pseudo">
match actor-bio
    create html
        create h1 "Biography: " + actor-name
        continue
        create h2 "Filmography"
        for each movie-review where starring/actor = actor-name
            create li 
                create a with attribute href 
                 = address of movie-review
                    output movie-name
</codeblock>
</figure>
<p>Note the close relationship between rhetoric and navigation in <citation idref="fig.generate-filmography"/>. The generated filmography is both content and <phrase><annotation type="concept">navigation</annotation></phrase>, both part of the individual topic and part of the overall navigation scheme – an example of how <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> unites rhetoric and navigation.</p>
</section>
<section>
<title>Collections and selections</title>

<p>One of the applications of <phrase><annotation type="concept">subject-domain</annotation></phrase> markup that I mentioned in the recipe example is that it can be used to select content for a collection. Thus, if you capture calories and preparation time in your recipe markup, you can use that information to assemble a cookbook with a title like “Diet-Friendly Dishes You Can Make in 30 Minutes or Less.” If you store seasonal information, you can create “Diet-Friendly Christmas Treats” or “Summer Suppers in 20 Minutes.”</p>
<p>One of the most important aspects of creating collections based on subject-domain markup is that you did not have to think of those collections while the recipes were being written. Nothing ties the recipes to these publications. The recipes simply record certain significant facts about the dishes that may matter to readers. A <phrase><annotation type="role">content strategist</annotation></phrase> can then dream up all kinds of collections, and, because the recipes record significant truths about the dishes in a form that is accessible to algorithms, chances are that you will be able to assemble those collections quickly and get them to press while the market demand is hot.</p>
<p>The subject domain is the gift that keeps on giving. You don’t have to anticipate all of the possible uses for your subject-domain data, and collecting that data is relatively inexpensive since you are simply asking writers to enter information they already know in fields with concrete, specific names that are easy to understand.</p>
</section>
<section>
<title>Content queries</title>

<index>
<record>
<type>concept</type>
<term>queries</term>
</record>
</index>
<p>If you know what subjects the phrases in your content refer to, you can use that information to form queries to pull in additional information from other sources. For instance, let’s say that you are writing about novels, and you annotate the titles of novels that are mentioned in your text:</p>
<codeblock language="xml">
{War and Peace}(book "ISBN:1400079985") is a very long book.
</codeblock>
<p>Here, the title is marked up as a book title, and, to make things more precise, an ISBN number is provided. An ISBN number is the key to a large amount of data about a published book. If you have the ISBN number, you can look up all sorts of other information. For instance, you can use the ISBN to look up publication details using a web service like ISBNdb (<phrase><annotation type="url">http://isbndb.com</annotation></phrase>).</p>
<p>Most web services return information in XML. A hypothetical ISBN web service might return an XML document that looked like <citation idref="fig.generate-isbn"/>.<citation idref="fn.generate-isbn"/></p>
<footnote id="fn.generate-isbn">
<p>This is not what ISBNdb returns, just a simplified example.</p>
</footnote>
<figure id="fig.generate-isbn">
<title>Information returned by an ISBN web service</title>

<codeblock language="xml">
&lt;book&gt;
    &lt;isbn&gt;1400079985&lt;/isbn&gt;
    &lt;title&gt;War and Peace&lt;/title&gt;
    &lt;author&gt;Leo Tolstoy&lt;/author&gt;
    &lt;publisher&gt;Vintage&lt;/publisher&gt;
    &lt;publication-year&gt;2008&lt;/publication-year&gt;
    &lt;page-count&gt;1296&lt;/page-count&gt;
    …
&lt;/book&gt;
</codeblock>
</figure>
<p>You could then pull pieces from that XML document and add them to your own content, thus allowing you to produce output like this:</p>
<blockquote>
<p><phrase><annotation type="italic">War and Peace</annotation></phrase> (Leo Tolstoy, Vintage, 2008, 1296 pages) is a very long book.</p>
</blockquote>
<pagination-tweak>
<min-space>3in</min-space>
</pagination-tweak>
<p>The algorithm to do this looks something like <citation idref="fig.generate-isbn-pseudocode"/>.</p>
<figure id="fig.generate-isbn-pseudocode">
<title>Algorithm to look up book information using the ISBN</title>

<codeblock language="pseudo">
match p/book
    $isbn = @specifically 

    $book-info = get 'http://example.com/isbn/lookup?' + $isbn

    create i
        continue

    output " ("
    output $book-info/book/author
    output ", "
    output $book-info/book/publisher"/&gt;
    output ", " 
    output $book-info/book/publication-year"/&gt;
    output ", "
    output $book-info/book/page-count"/&gt;
    output " pages"
    output )
</codeblock>
</figure>
<p>This basic technique opens all kinds of doors. The power of structured writing as a tool to merge information from different sources is enormous. Here are just a few of the tricks you could pull using information retrieved using the ISBN number:</p>
<ul>
<li>
<p>Pull in a picture of the book cover.</p>
</li>
<li>
<p>Create a link to an article about <phrase><annotation type="italic">War and Peace</annotation></phrase> on your website.</p>
</li>
<li>
<p>Create a link to an online bookstore where readers can buy the book. If you belong to an affiliate program for the online bookstore, you can earn a commission each time a reader follows your link and buys the book.</p>
</li>
</ul>
<p>You can also realize major process efficiencies by capturing this kind of metadata in your content. If you can use metadata keys to pull information from external sources, writers don’t have to look up that information when they write. And writers don’t have to decide which book details will appear in the final output. That decision is made separately by editing the algorithm, and you can change that decision for all your existing content simply by changing the algorithm.</p>
<p>Having writers enter the ISBN number in the content makes writing the algorithm straightforward, and sometimes it is appropriate because you are referring to a particular edition of a book and the ISBN number is the most reliable identifier of a specific edition. But in many case it is actually too specific, and it complicates life if writers have to look up the ISBN when all they want to refer to is the novel itself, regardless of the edition. This distinction can be important. There are many other editions of <phrase><annotation type="italic">War and Peace</annotation></phrase>, in many languages. <phrase><annotation type="italic">War and Peace</annotation></phrase> is a very long book in all those editions and all those languages. The paragraph does not refer specifically to the Vintage Edition of 2008. It refers to <phrase><annotation type="italic">War and Peace</annotation></phrase> as a novel generally.</p>
<codeblock language="sam">
{War and Peace}(novel) is a very long book.
</codeblock>
<p>Here, I have replaced the <code>book</code> annotation with the more specific <code>novel</code> annotation. If you are concerned that there might be other novels named <phrase><annotation type="italic">War and Peace</annotation></phrase> by other writers, you could make the annotation more specific:</p>
<codeblock language="sam">
{War and Peace}(novel (Leo Tolstoy)) is a very long book.
</codeblock>
<p>In SAM, a phrase in parentheses inside an annotation is a <phrase><annotation type="concept">namespace</annotation></phrase> identifier. A namespace is a context in which a set of names is guaranteed to be unique. No author publishes more than one novel with the same name, so the name of the author is generally an adequate namespace identifier for the name of a novel. This markup is obviously easier for writers to create than an ISBN. It asks them only for the things they already know, so they won’t have to stop to look anything up. That is an important part of <phrase><annotation type="concept">functional lucidity</annotation></phrase>.</p>
<p>However, without an ISBN number, can you still get the book data you want? You can, but you have to use a different query to extract it:</p>
<codeblock language="pseudo">
match p/novel

    $title = #content
    $author = @namespace 

    $book-info = get 'http://example.com/isbn/lookup?category=novel&amp;title='
                     + $title + '&amp;author=' + $author
</codeblock>
<p>The only thing different about the results you will get from this query is that it may return records for more than one book (actually, for <phrase><annotation type="italic">War and Peace</annotation></phrase>, you will certainly get multiple records, since there are many editions in print). So the code that adds the book info to the content must pick one of the alternatives based on some relevant piece of publication data, such as the most recent publication date.</p>
<p>I could have chosen an example that did not have this kind of ambiguity (title vs. ISBN as identifier of a novel), but you will often come across issues like this in the real world. This is one of those issues that forces you to make a decision about how to correctly partition complexity in your system. You have a choice between an approach that uses a simple, easy-to-write algorithm but requires effort and research from writers versus an approach that requires more thought and effort to write the algorithm but provides greater <phrase><annotation type="concept">functional lucidity</annotation></phrase> for writers.</p>
<p>Stated like this it seems obvious which choice you should make, but in practice these decisions are often made by the people developing the algorithms, and they often choose to make their lives easier at the expense of the writers. This may seem like a detail, but when correct partitioning and distribution is at stake, decisions should not be left to one partition to make. These decisions require input from all sides and the attention of the project owners.</p>
</section>
<section>
<title>Personalized content</title>

<index>
<record>
<type>concept</type>
<term>content, personalized</term>
</record>
<record>
<type>concept</type>
<term>personalized content</term>
</record>
</index>
<p>A key feature of modern web architecture is personalized content, which means content that is generated in response to either what the site already knows about you – from your account information or a transaction token such as a <phrase><annotation type="tool">cookie</annotation></phrase> – or the selections or entries that you make on the page.</p>
<p>For example, when you log into Amazon, the first page you see is crafted for you based on everything Amazon knows about your browsing and purchasing history. As you make selections, such as adding an item to your shopping cart or wish list, that information is used to generate the next page you see.</p>
<p>If you browse a used car site like Autotrader.com, you can select features that you are interested in (red convertibles with manual transmission under $20,000, for instance), and the next page will be generated based on that input.</p>
<p>The ability of a site to personalize pages depends on whether it can identify content that is <phrase><annotation type="algorithm" specifically="relevance">relevant</annotation></phrase> – based on everything it knows about the reader – and assemble that content to form a page. For this to work, the content must be easy to identify unambiguously and must fit together easily.</p>
<p>As we have seen, these properties are maximized when you store content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, both because the <phrase><annotation type="concept">subject domain</annotation></phrase> makes the relevant <phrase><annotation type="concept">metadata</annotation></phrase> available and because working in the <phrase><annotation type="concept">subject domain</annotation></phrase> helps writers produce more consistent content that works better with personalization algorithms.</p>
<p>The consistency of your content is most important in personalized content applications. Because output is assembled in real time by an algorithm based on a combination of unique things you know about the reader and your content, there is no opportunity for a writer or editor to inspect the output of a personalized content publication before the reader sees it. This requires total confidence that:</p>
<ul>
<li>
<p>the content <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> to its <phrase><annotation type="concept">constraints</annotation></phrase></p>
</li>
<li>
<p>the <phrase><annotation type="concept">markup</annotation></phrase> expresses those constraints completely and correctly</p>
</li>
<li>
<p>the algorithm correctly processes and delivers the content</p>
</li>
</ul>
<p>All three of these requirements depend on the soundness and simplicity of the <phrase><annotation type="concept">markup</annotation></phrase> design. They require precise content structures with few alternatives, clear guidance for writers, and good <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> capability. Without these properties, your content and its markup will be inconsistent, and it will be hard to write and test reliable algorithms because of the wide variety of markup combinations they may encounter.</p>
<p>Most personalized content applications model their content in relational database tables for these very reasons. However, with the correct markup design, almost certainly in the <phrase><annotation type="concept">subject domain</annotation></phrase>, there is no reason why you cannot use markup-based tools alone or in concert with database tools and solutions to achieve the same kind of result.</p>
</section>
<section>
<title>Audit reports</title>

<index>
<record>
<type>concept</type>
<term>audits</term>
</record>
</index>
<p>Finally, you can use content generation algorithms to generate things other than content to be published. You can use it to generate reports about your content itself, which you can use to audit and manage your collection. I look at this in more detail in <citation nameref="chapter.audit"/>, but it is worth looking at the basics here because it is just another application of the capacity for content generation that you gain when you move content into the subject domain.</p>
<p>For instance, suppose your content strategist establishes an editorial calendar that says that you are going to put out a Christmas-themed diet cookbook every October as people are starting to prepare for Christmas. Do you have enough Christmas seasonal recipes under 300 calories? An algorithm can quickly go through your subject-domain recipes and create a list of all the recipes that meet that criteria.</p>
<p>Or suppose that you want to make sure that your book-related site has reviews and shopping links for every book that has been mentioned on the site this year. An algorithm can go through your content collection looking for the <code>book</code> or <code>novel</code> annotations in your articles, compile a list, sort it, eliminate duplicates, compare it to the list of reviews you currently have, and create a list of every book that is mentioned but not reviewed.</p>
</section>
<section>
<title>Reuse vs Generation</title>

<p>As you have probably noticed, the methods used to generate content have a lot in common with those used to reuse content. That is because content reuse is just a form of content generation. Content reuse means generating more than one form or output content from the same collection of output content. Technically, the mechanisms and algorithms are the same; the differences have more to do with how you think about the problem.</p>
<p>The biggest difference is that when you think in content generation terms, you are automatically thinking in <phrase><annotation type="concept">subject-domain</annotation></phrase> terms. Content generation starts by treating content as data and then generates content from that data. When people think in <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> terms, however, their thoughts often go straight to the <phrase><annotation type="concept">management domain</annotation></phrase>, to conditional content and pulling in content by reference. Thinking in content reuse terms also tends to give first use primacy over secondary uses. The first instance is created to serve a specific purpose. You then  serendipitously discover another potential use for the content. Thinking in content generation terms does not give primacy to any one use. The content is created as data with many potential uses. There is no first use or secondary uses. Every use is a production from the source data, and it really does not matter how many such uses there are.</p>
<p>As I noted in <citation nameref="chapter.reuse"/>, there are certain kinds of reuse that are only feasible using <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> constructs, but a great deal can be accomplished using the subject-domain approach. Creating conditional markup in your recipe to provide a different beverage match for <phrase><annotation type="italic">Wine Weenie</annotation></phrase> and <phrase><annotation type="italic">The Teetotaler's Trumpet</annotation></phrase> is a case of <phrase><annotation type="algorithm">reuse</annotation></phrase> thinking. Creating structure for alcoholic and non-alcoholic beverage matches to achieve the same goal (and potentially many more) is a case of content generation thinking. In many cases, you will create a far more valuable content resource that is is easier to write for and is easier to maintain by thinking of your content set as a data source from which many kinds of content can be generated rather than a collection of reusable content components.</p>
</section>
</chapter>
