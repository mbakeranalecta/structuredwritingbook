<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.generate">
<title>Generated Content</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>generated content</term>
</record>
<record>
<type>task</type>
<term>generating content</term>
</record>
</index>
<p>I have mentioned at several times already that one of the advantages of the <phrase><annotation type="concept">subject domain</annotation></phrase> is that it allows you to generate different types of rhetoric from a base of subject domain data. Here I will look at the content generation algorithm in greater depth.</p>
<p>There is nothing new about generating content. <phrase>Word processors</phrase> and <phrase>desktop publishing programs</phrase> can generate indexes and tables of contents, for instance, and the <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> algorithms that we looked at in <citation nameref="chapter.reuse"/> are all forms of content generation because they combine smaller pieces of content or data to form larger units of content.</p>
<p>The fundamental of content generation are pretty simple. It is just a matter of taking separate pieces of content and data and combining them to form new content. Thus when I spoke earlier about storing the ingredients of a recipe as a data structure and using an algorithm to present them as either a table or a list, that was an example of content generation.</p>
<p>Here is what the algorithm to turn that data into a list might look like (again, in pseudocode):</p>
<codeblock language="pseudo">
match ingredients
    create ul
        continue
        
match ingredients/record
    create li
        output name
        output [tab]
        output quantity
        if unit is not 'each'
            output [space]
            output unit
</codeblock>
<p>Here is what the algorithm for interpolating separate serving and preptime fields into the introduction of a recipe might look like:</p>
<codeblock language="pseudo">
match description
    continue
    output 'Preparation time is '
    output /recipe/preptime
    output '. Serves '
    output /recipe/serves
    output '.'
    
match preptime
    ignore
    
match serves
    ignore
</codeblock>
<p>But this kind of content gereration does not have to confine itself to working within a single document. It can also involve pulling content from several files or in assembling different collections of content to serve a common rhetorical purpose, such as compiling a low calorie cook book based on nutrition information in a collection of recipes.</p>
<p>It can also involve the generation of many of the elements required to build a top-down or bottom-up information architecture.</p>
<section>
<title>Categorization</title>

<p>One of the key elements of top-down information architecture is <phrase><annotation type="concept">categorization</annotation></phrase>. An <phrase><annotation type="role">information architect</annotation></phrase> develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.</p>
<p>Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called <phrase><annotation type="concept">faceted navigation</annotation></phrase>. The easiest place to see faceted navigation in action is on a used-car site where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions.</p>
<p>Categorization of content require metadata to identify which category it belongs to. (Even if you just sort papers into piles, as soon as you put a label on each pile, you are adding metadata, and if you don’t add a label, you will soon forget which pile is which.) Categorization may involve the addition of new metadata or it may rely on existing metadata that is already attached to the content. This effectively means that your categories are expressed as query statements, and those queries do not have to operate on a single piece of metadata. They can create a category out of the conjunction of several pieces of metadata. For example, they can create a category of heart healthy recipes by looking at the salt, fat, and calorie metadata of a collection of recipes.</p>
<p>For content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, therefore, the <phrase><annotation type="concept">metadata</annotation></phrase> required to assign a piece of content to a category may be inherent in its subject domain markup. It is the nature of the subject domain to describe the subject matter and any markup that describes the subject matter may already contain the fields that you need for categorization. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don’t need to create additional structures to support a new algorithm.</p>
<p>Relying on the <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a <phrase><annotation type="tool">repository</annotation></phrase> so much easier for writers. But in some cases it can also avoid the need for a costly <phrase><annotation type="tool">content management system</annotation></phrase>, since it allows the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> to categorize content at build time without the need of a separate metadata store or a separate system to manage categorization. I will look more at the role of the content management system in <citation nameref="chapter.content-management"/>.</p>
</section>
<section>
<title>Tables of Contents</title>

<p>If you are creating a top-down information architecture, your structured writing system needs to be able to generate <phrase><annotation type="structure">tables of contents</annotation></phrase> just as a <phrase>word processor</phrase> or <phrase>desktop publishing application</phrase> does.</p>
<p>Tables of contents can serve various purposes depending on the nature of the work. Some describe a linear reading order for a work, some provide a <phrase><annotation type="concept">classification</annotation></phrase> scheme for random access to the content, some are simply a list of chapters that does not necessarily imply an intended reading order.</p>
<p>A <phrase><annotation type="structure">table of contents</annotation></phrase> may seem like a <phrase><annotation type="concept">document domain</annotation></phrase> structure, but it is really more of a <phrase><annotation type="concept">media domain</annotation></phrase> structure, for two reasons. First, it contains specific links to specific resources at specific addresses, or specific page numbers in a paper or a virtual paper format such as <phrase><annotation type="media">PDF</annotation></phrase>. Secondly, it is virtually always factored out in <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase>. Tables of contents are not written, they are generated.</p>
<p>From a structured writing point of view, what matters is how they are generated. In <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase>, for instance, it is typical to write each chapter of a book in a separate <code>chapter</code> file and then pull them together into a book using a <code>book</code> file. The order of the table of contents is then determined by the order in which the chapters are listed in the <code>book</code> file. The TOC itself is generated by extracting chapter and section headings from the <code>chapter</code> files in the order they appear in the <code>book</code> file.</p>
<p>In <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>, the normal process is to assemble a book using a <code>map</code> file. A map file may assemble a book out of <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> topics or other maps, and this may include assembling the chapters from topics as well. In the end, though, the <phrase><annotation type="structure">table of contents</annotation></phrase> is generated in the same way, by traversing the document assembled by the <code>map</code>.</p>
<p>In both these cases, the order of the TOC is specified by hand by the person who creates the <code>book</code> or <code>map</code> file. But there are other ways to determine the order of content in a TOC. For instance, a reference work such as an API reference may be organized by listing each library in order by name, and each function in alphabetical order by name within its library, creating a table of content with two levels. There is no need to write a map or book file to create this table of contents. There is an algorithm for creating this table of contents. In fact, it is the algorithm stated in the first sentence of this paragraph, “listing each library in order by name, and each function in alphabetical order by name within its library”. Here is that algorithm expressed in pseudo code:</p>
<codeblock language="pseudo">
create toc
    for each library sorted alphabetically
        create toc-entry library name
        for each function in library sorted alphabetically
            create toc-entry function name
</codeblock>
<p><phrase><annotation type="structure">Tables of contents</annotation></phrase> serve different purposes. Some describe a curriculum, a designed reading order. Others are simply a means of navigation, a way to select one topic out of a collection of many. If your content is written in the <phrase><annotation type="concept">subject domain</annotation></phrase>, the chances are that it already contains the structures on which such a classification could be based, and again the <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> can be generated based on the <phrase><annotation type="concept">metadata</annotation></phrase> already in the content.</p>
<p>One advantage of this approach is that if a <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> is assembled based on <phrase><annotation type="concept">metadata</annotation></phrase> in the content, that means that when new content is added, it is automatically included in the TOC the next time output is generated. This simplifies the task of adding new content to a collection by avoiding the need to update multiple files or systems when a update occurs. This makes life easier for authors as they do not need to know how the TOC is constructed. They only have to create an individual piece of <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> content and submit it to the right location. This also constitutes yet another example of the <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase>, since the basis for the content’s inclusion at a particular point in the TOC is stored only in one place.</p>
</section>
<section>
<title>Lists</title>

<p>A major feature of a <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> is the <phrase><annotation type="structure">list</annotation></phrase>. Like <phrase><annotation type="structure">tables of contents</annotation></phrase>, lists are a catalog of resources. But while a TOC is a list of resources defined by their container (contents = things in a container) a list may have any principle of organization or inclusion.</p>
<p>For instance, you might want to have a list of all the movies starring each actor in a collection of movie reviews. Such a list is not only a useful piece of information, they are also an important aid for navigating around a site. Maintaining such a list by hand would be laborious and error prone, especially with new movies being added to the collection all the time.</p>
<p>If you have your movie reviews in a structured format that lists the actors in the movie in a format accessible to algorithms, like this:</p>
<codeblock language="sam">
movie: Rio Bravo
    starring:: actor
        John Wayne
        Dean Martin    
        Ricky Nelson    
        Angie Dickinson
        Walter Brennan
</codeblock>
<p>you can generate the filmographies for all your actors, like this:</p>
<codeblock language="pseudo">
create-filmographies
    for each unique actor in movie/starring/actor 
        create filmography named actor with link to actor
        for each movie where starring/actor = actor
            create entry named movie with link to movie
</codeblock>
<p>Tables of contents are a <phrase><annotation type="concept">top-down information architecture</annotation></phrase> device. You expect to find them at the top of the information set. List are a <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> device. You expect to find them as independent pages or as elements within a page. Thus if our collection includes the biographies of actors, and we want each biography to include the filmography, we can omit the filmography from the <phrase><annotation type="concept">subject domain</annotation></phrase> version of the biography and add it to the output in the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase>.</p>
<codeblock language="pseudo">
match actor-bio
    create html
        create h1 "Biography: " + actor-name
        continue
        create h2 "Filmography"
        for each movie-review where starring/actor = actor-name
            create li 
                create a with attribute href 
                 = address of movie-review
                    output movie-name
</codeblock>
<p>Note the close relationship between rhetoric and navigation here. The generated filmography is both content and <phrase><annotation type="concept">navigation</annotation></phrase>, both part of the individual topic and part of the overall navigation scheme – an example of how <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> unites rhetoric and navigation.</p>
</section>
<section>
<title>Collections and selections</title>

<p>One of the applications of <phrase><annotation type="concept">subject domain</annotation></phrase> markup that I have already mentioned in the recipe example is that it can be used to select content for a collection. Thus if you capture calorie and prep time information in your recipe markup, you can use that information to assemble a cookbook with a title like, “Diet-Friendly Dishes You Can Make in 30 Minutes or Less”. If you store seasonal information in your markup, you can do “Diet-Friendly Christmas Treats” or “Summer Suppers in 20 Minutes”.</p>
<p>One of the most important aspect of making these collections based on subject domain markup is that you did not have to think of them at the time the recipes were written. There is nothing that ties the recipes to these publications. The recipes simple record certain significant facts about the dishes that may matter to readers. A <phrase>content strategist</phrase> can then dream up all kinds of collections they would like to do, and because the recipes record significant truths about the dishes in an explicit form that is accessible to algorithms, chances are that you will be able to assemble the collection that the content strategist has dreamed up and get it right out to press while the market demand is hot.</p>
<p>The subject domain is the gift that keeps on giving. You don’t have to have anticipated all of the uses you will put subject domain data to, and collecting it is relatively inexpensive since it is simply asking writers to enter information they already know in fields with concrete specific names that are easy to understand.</p>
</section>
<section>
<title>Content queries</title>

<p>If you know what subjects the phrases in your content are referring to, you can use that information to form queries to pull in additional information from other sources. For instance, let’s say that you are writing about novels and you annotate the titles of novels that are mentioned in your text:</p>
<codeblock language="xml">
{War and Peace}(book "ISBN:1400079985") is a very long book.
</codeblock>
<p>Here the title is marked up as the title for a book and, to make things more precise, an ISBN number is provided as well. An ISBN number is the key to a large amount of data about a published book. If we have the ISBN number, we can look up all sorts of other information. For instance, we can use the ISBN to look up publication details using a web service like ISBNdb (http://isbndb.com).</p>
<p>Most web services return information in XML. A hypothetical ISBN web service might return an XML document that looked like this (this is not what ISBNdb returns, just a simplified example):</p>
<codeblock language="xml">
&lt;book&gt;
    &lt;isbn&gt;1400079985&lt;/isbn&gt;
    &lt;title&gt;War and Peace&lt;/title&gt;
    &lt;author&gt;Leo Tolstoy&lt;/author&gt;
    &lt;publisher&gt;Vintage&lt;/publisher&gt;
    &lt;publication-year&gt;2008&lt;/publication-year&gt;
    &lt;page-count&gt;1296&lt;/page-count&gt;
    …
&lt;/book&gt;
</codeblock>
<p>We could then pull pieces from that XML document to add to our own content, thus allowing us to produce output like this:</p>
<blockquote>
<p>War and Peace (Leo Tolstoy, Vintage, 2008, 1296 pages) is a very long book.</p>
</blockquote>
<p>The algorithm to do this looks something like this:</p>
<codeblock language="pseudo">
match p/title
    $isbn = @specifically 

    $book-info = get 'http://example.com/isbn/lookup?' + $isbn

    create i
        continue
        output " ("
        output $book-info/book/author
        output ", "
        output $book-info/book/publisher"/&gt;
        output ", " 
        output $book-info/book/publication-year"/&gt;
        output ", "
        output $book-info/book/page-count"/&gt;
        output " pages"
        output )
</codeblock>
<p>This basic technique opens all kinds of doors. The power of structured writing to enable the merging of information from different sources is enormous. Here are just a few of the tricks we could pull using information retrieved using the ISBN number:</p>
<ul>
<li>
<p>Pull in a picture of the book cover.</p>
</li>
<li>
<p>Create a link to an article on War and Peace on your website.</p>
</li>
<li>
<p>Create a link to an online bookstore, where the the reader could buy the book. If you  belonged to an affiliate program for an online bookstore, you could pick up some cash every time a reader followed your link and bought a book.</p>
</li>
</ul>
<p>There are also some major process efficiencies to be realized by capturing this kind of metadata in your content. If you can use metadata keys to pull information from external sources, authors don’t have to look up all that information themselves when they write. Authors don’t have to decide which of the book details are going to appear in the final output. That decision is made by editing the XSLT stylesheet, and it can be changed, for all your existing content, simply by changing the stylesheet.</p>
<p>Having writers enter the ISBN number in the content makes writing the algorithm straightforward, and sometimes it is appropriate because you are referring to a particular edition of a book and the ISBN number is the most reliable identifier of a specific edition. But in many case it is actually too specific, and it complicates life for the author to have to look up an ISBN when all they really want to refer to is the novel itself, regardless of which edition it is. This distinction can be important. There are many other editions of War and Peace, in many languages. War and Peace is a very long book in all those editions and all those languages. The paragraph is not referring specifically to the the Vintage Edition of 2008. It is referring to <phrase><annotation type="italic">War and Peace</annotation></phrase> as a novel generally.</p>
<codeblock language="sam">
{War and Peace}(novel) is a very long book.
</codeblock>
<p>Here, we have replaced the <code>book</code> annotation with the more specific <code>novel</code> annotation. If you are concerned that you might have references to other novels named <phrase><annotation type="italic">War and Peace</annotation></phrase> by other writers, you could make it more specific:</p>
<codeblock language="sam">
{War and Peace}(novel (Leo Tolstoy)) is a very long book.
</codeblock>
<p>In SAM, a phrase in parentheses inside an annotation is a namespace identifier. A namespace is a context in which a set of names is guaranteed to be unique. No author publishes more than one novel with the same name, so the name of the author is generally an adequate namespace identifier for the name of a novel. This markup is obviously easier for writers to create compared to asking for an ISBN. It only asks them for the things they already know, so they won’t have to stop to look anything up. That is an important part of <phrase><annotation type="concept">functional lucidity</annotation></phrase></p>
<p>But without an ISBN number, can we still get the book data we want? We still can, but we have to use a different query to extract it. Our original code did the lookup like this:</p>
<codeblock language="pseudo">
match p/novel

    $title = #content
    $author = @namespace 

    $book-info = get 'http://example.com/isbn/lookup?category=novel&amp;title=' + $title + '&amp;author=' + $author
</codeblock>
<p>The only thing different about the results we will get from this query is that it may return records for more than one book (actually, there will certainly be, since there are many editions of <phrase><annotation type="italic">War and Peace</annotation></phrase> in print). So the code that adds the book info to the content will need to pick one of the alternatives based on some relevant pieces of publication data (such as the most recent publication date).</p>
<p>I could have chosen an example that did not have this kind of ambiguity in its data (title vs. ISBN as identifier of a novel) to illustrate this type of content generation, but the fact is that you will often come across this kind of issue in the real world. This is one of those issues that forces you to make decision about how to correctly partition complexity in your system.</p>
<p>Here you have a choice between an approach to markup that makes for a simple algorithm that is easy to write, but which requires effort and research from the writer, versus an approach that requires more thought and effort to write the algorithm, but provides greater <phrase><annotation type="concept">functional lucidity</annotation></phrase> for the writers. Stated like this it seems obvious which choice you should make, but in practice these decisions are often made by the people developing the algorithms, and they often choose to make their lives easier at the expense of the writers. It may seem like a detail, but this is an area in which the correct partitioning and distribution is at stake, and such decisions should not be left to one partition to make. They require input from all sides and the attention of the project owners.</p>
</section>
<section>
<title>Personalized content</title>

<p>A key feature of modern web architecture is personalized content, which means content that is generated in response either to what the site already knows about you (from your account information, or a transaction token such as a <phrase><annotation type="tool">cookie</annotation></phrase>, or the  selections or entries that you make on the page). For example, when you log into Amazon, the first page you see is crafted for you based on everything Amazon knows about your browsing and purchasing history. As you make selections, such as adding an item to your shopping cart or wish list, that information is used to generate the next page you see.</p>
<p>If you browse a used car site like Autotrader.com, you can select those features of a car that you are interested in (red convertibles with manual transmission under $20000, for instance) and the next page will be generated based on that input.</p>
<p>The ability of a site to personalize pages depends on its ability to identify content that is <phrase><annotation type="algorithm" specifically="relevance">relevant</annotation></phrase>, based on everything it knows about the reader, and to assemble those pieces to form a page. For this to work, the content has to be easy to identify unambiguously, and it needs to fit together easily.</p>
<p>As we have seen, these properties are maximized when content is stored in the <phrase><annotation type="concept">subject domain</annotation></phrase>, both because the <phrase><annotation type="concept">subject domain</annotation></phrase> makes the relevant <phrase><annotation type="concept">metadata</annotation></phrase> available, and because working in the <phrase><annotation type="concept">subject domain</annotation></phrase> helps authors produce more consistent content that works better with these algorithms.</p>
<p>The consistency of the content is most important in any personalized content application. There is no possibility for a writer or editor to inspect the output of a personalized content publication before the reader sees it, since it is assembled in real time based on the unique things we know about each reader. This requires total confidence that:</p>
<ul>
<li>
<p>the content <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> to its <phrase><annotation type="concept">constraints</annotation></phrase></p>
</li>
<li>
<p>those constraints are completely and correctly expressed by its <phrase><annotation type="tool">markup</annotation></phrase></p>
</li>
<li>
<p>the algorithm correctly processes and delivers the content</p>
</li>
</ul>
<p>All three of these requirements depend on the soundness and simplicity of the <phrase><annotation type="tool">markup</annotation></phrase> design. They require precise content structures with few alternatives, clear guidance for writers, and good <phrase><annotation type="algorithm">audit</annotation></phrase> capability. Without these properties, content and its markup will be inconsistent and reliable algorithms will be hard to write and test because of the wide variety of markup combination they may encounter.</p>
<p>Most personalized content applications model their content in relational database tables for these very reasons. However, with the correct markup design, almost certainly in the <phrase><annotation type="concept">subject domain</annotation></phrase>, there is no reason why you cannot use markup-based tools alone or in concert with database tools and solutions to achieve the same kind of thing.</p>
</section>
<section>
<title>Audit reports</title>

<p>Finally, we can use content generation to generate things other than content to be published. You can use it to generate reports about your content itself which we can use to help us audit and manage your collection. We will look at this in more detail in <citation nameref="chapter.audit"/>, but it is worth looking at the basics here because it is just another application of the capacity for content generation that we gain when we move content into the subject domain.</p>
<p>For instance, let us say that your content strategist establishes an editorial calendar that says that you are going to put out a Christmas-themed Diet Cookbook every October as people are starting to think about the Christmas preparations. Do you have enough Christmas seasonal recipes under 300 calories? An algorithm can quickly go through your subject-domain recipes and create a list of all the recipes that meet that criteria.</p>
<p>Or suppose that your book-related site wants to know all the books that have been mentioned in articles this year so that you can make sure you have reviews (and shopping links) for each of those books. An algorithm can go through your content collection looking for the <code>book</code> or <code>novel</code> annotations in your articles, compile a list, sort it, eliminate duplicates, and compare it to the list of reviews you currently have, to give you a list of every book that is mentioned but not reviewed.</p>
</section>
<section>
<title>Reuse vs Generation</title>

<p>As you have probably noticed, the methods used to generate content have a lot in common with those used to reuse content. That is because content reuse is just a form of content generation. Content reuse means generating more than one form or output content from the same collection of output content. Technically, the mechanisms and algorithms are the same; the differences have more to do with how you think about the problem.</p>
<p>The biggest difference is that when you think in terms of content generation, you are automatically thinking in <phrase><annotation type="concept">subject domain</annotation></phrase> terms. Content generation starts by treating content as data, and then generating content from that data. When people think of <phrase><annotation type="algorithm" specifically="content reuse algorithm">Content reuse</annotation></phrase>, however, their thoughts often go straight to the <phrase><annotation type="concept">management domain</annotation></phrase>, to conditional content and pulling in content by reference. There can also be a tendency in content reuse to think of the first use as having a kind of primacy over the secondary uses. The first instance is not created as data with many potential uses, but as content designed for a specific use, which is then serendipitously reused when another potential use for the content is discovered.</p>
<p>As I noted in <citation nameref="chapter.reuse"/>, there are certain kinds of reuse that are only feasible using <phrase><annotation type="concept">management domain</annotation></phrase> constructs, but a great deal can be accomplished using the subject domain approach. Creating conditional markup in your recipe to provide a different beverage match for <phrase><annotation type="italic">Wine Weenie</annotation></phrase> and <phrase><annotation type="italic">The Teetotaler's Trumpet</annotation></phrase> is a case of <phrase><annotation type="algorithm">reuse</annotation></phrase> thinking. Creating structure for alcoholic and non-alcoholic beverage matches to achieve the same goal (and potentially many more) is a case of content generation thinking. In many cases you will create a far more valuable content resource that is is far easier to write for and is far easier to maintain by thinking of your content set as a data source from which many kinds of content can be generated, rather than as a collection of reusable content components.</p>
</section>
</chapter>
