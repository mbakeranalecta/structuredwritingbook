<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.translation">
<title>Translation</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<record>
<type>algorithm</type>
<term>translation</term>
</record>
</index>
<p>Many organizations deliver content in multiple languages. Translation is a major source of complexity for those organizations. It is not only the complexity of doing the translation, but the complexity of integrating the translation process into the overall content process, and of integrating the translated content into the publishing process. Translation is a huge subject in its own right and I have neither the space not the expertise to do it full justice. Therefore I will make just a couple of points about how structured writing can help partition and transfer certain aspects of the complexity of translation.</p>
<section>
<title>Extracting content for translation</title>
<p>Translators generally do not work in the the original source format of the content. A translation agency works with many customers and thus content in many file formats, so it would be onerous for translators be be fluent in all of them. Besides, the translators donâ€™t need any of the features of these programs. In many cases, though, they do need features specific to translation, such as access to translation memory. Thus text to be translated is often extracted from its source format, translated in a separate tool, and then reinserted into the original source application.</p>
<p>There is an XML standard that is used to do this round-trip, called <phrase>XLIFF</phrase>. It records the metadata necessary to extract and replace the content in its original format after publishing. The ability of your source format to work with XLIFF can therefore be an important consideration. (XLIFF represents a neat partitioning and transfer of the complexity of file formats in translation.)</p>
<p>If your source format is a desktop publishing format, however, inserting the translated content back into the source format may leave the layout looking wrong since the translated text may be longer or shorter, or may require a completely different layout from the original text. This need to redo the formatting of the translated content can add significantly to translation time and costs. Using a structured writing format that factors out the the formatting can reduce these costs by allowing each translated version to be formatted algorithmically. But as we saw in <citation type="nameref" value="chapter.separating"/>, there are various degree of separation that you can achieve using different kinds of structure to factor out more of the formatting. The different presentation and formatting needs of different languages and cultures could require a higher degree of separation that you might otherwise have created, so make sure to account for this when choosing which content structures to use.</p>
</section>
<section>
<title>Avoiding trivial differences</title>
<p>Trivial differences in how the same thought is worded make little difference to a reader, but they can run up translation costs. Structuring content to avoid these trivial differences can reduce translation costs.</p>
<p>There are two principle ways you can do this with structured writing. The first is to reuse the same piece of content every time the same thought is expressed. As we have seen, though, this approach comes with complexities of its own. The smaller you make the pieces of content you reuse, the more reuse you can get, but the more pieces you have to manage and the more pieces the writer has to look through to find reusable content.</p>
<p>The second is to factor out the content that repeats the thought. We have seen examples of this a number of times in this book. As we moved our recipe example into the subject domain, we factored out the titles of the recipe sections, eliminating any trivial differences in the titles writers might use. In <citation type="nameref" value="chapter.reuse"/> we factored out a repeated safety warning by adding a <phrase><annotation type="code">is-it-dangerous</annotation></phrase> field to our <phrase><annotation type="code">procedure</annotation></phrase> structure. This not only removes the need for authors to think about the reuse of the warning, it also factors out any issues regrading the file name for the different language versions. (Something similar could be achieved using the keys approach we also looked at in that chapter.)</p>
</section>
<section>
<title>Isolating content that has changed</title>
<p>When a text is revised, such as when you bring out a new version of a product, some of the text is changed, but much of it remains the same. You can save time and money on translation if you only translate the content that has changed. To do this, though, you need a way to isolate the content that has changed from that which has not, and a way to integrate them again after the changed material has been translated.  Structured writing allows you to clearly define structures in your content set and deliver just those structures that have changed.</p>
</section>
<section>
<title>Continuous translation</title>
<p>If you write a book and, when it is finished, send it for translation, you translated version will we ready to release quite a long time after your first language version is ready. This delay can represent serious missed opportunities. To bring out first language and translated versions simultaneously, or close to it, you need the translation to occur simultaneously with the development of the first language content.</p>
<p>Continuous translation is not just about getting all version of a book released at the same time. On the web, you may be releasing new pieces of content into your content collection every day. If you are maintaining translated versions of that content, you want them to go out at the same time. You may also want to provide links between the different language version of the same content as searches and links do not always send readers to their own language version of your content. A structured approach to publishing and information architecture can accommodate these requirements.</p>
</section>
</chapter>
