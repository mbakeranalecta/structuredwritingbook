<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.blocks">
<title>Blocks, fragments, paragraphs, and phrases</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept">affordances</annotation></phrase> <phrase><annotation type="concept">AI</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">apps</annotation></phrase> <phrase><annotation type="concept" specifically="block-and-map architecture">block and map architecture</annotation></phrase> <phrase><annotation type="concept">block-and-map architecture</annotation></phrase> <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up architecture</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content engineering</annotation></phrase> <phrase><annotation type="concept">content hygiene</annotation></phrase> <phrase><annotation type="concept">content plan</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">curse of knowledge</annotation></phrase> <phrase><annotation type="concept">desktop publishing system</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">Duplication</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">filtering</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept" specifically="information architecture">information architectures</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information scent</annotation></phrase> <phrase><annotation type="concept">information snacking</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> <phrase><annotation type="concept">information-typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management domains</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">Management domains</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase> <phrase><annotation type="concept">markup language</annotation></phrase> <phrase><annotation type="concept">markup</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media domains</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">namespace</annotation></phrase> <phrase><annotation type="concept">natural language processing</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">out-of-band communication</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">profiling</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical quality</annotation></phrase> <phrase><annotation type="concept">rhetorical structure</annotation></phrase> <phrase><annotation type="concept" specifically="rhetoric">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">schema language</annotation></phrase> <phrase><annotation type="concept" specifically="schema">Schemas</annotation></phrase> <phrase><annotation type="concept" specifically="schema">schemas</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">social networks</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">stop list</annotation></phrase> <phrase><annotation type="concept">structural block</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style guide</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">Subject</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology management</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">vector graphics</annotation></phrase> <phrase><annotation type="concept">web publishing</annotation></phrase> <phrase><annotation type="concept">Wikipedia</annotation></phrase> <phrase><annotation type="concept">workflow</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase> <phrase><annotation type="concept">glyphs</annotation></phrase> <phrase><annotation type="concept" specifically="hierarchical information architecture">hierarchical information architectures</annotation></phrase></p>
<p>Markup Languages</p>
<p><phrase><annotation type="markup-language">ASCIIDOC</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">CommonMark</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="markup-language">GitHub flavored Markdown</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML5</annotation></annotation></phrase> <phrase><annotation type="markup-language">JavaDoc</annotation></phrase> <phrase><annotation type="markup-language">LaTeX</annotation></phrase> <phrase><annotation type="markup-language">Lightweight DITA</annotation></phrase> <phrase><annotation type="markup-language">Markdown</annotation></phrase> <phrase><annotation type="markup-language">mathml</annotation></phrase> <phrase><annotation type="markup-language">reStructuredText</annotation></phrase> <phrase><annotation type="markup-language">SAM</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">SGML</annotation></annotation></phrase> <phrase><annotation type="markup-language">TeX</annotation></phrase> <phrase><annotation type="markup-language">vCard</annotation></phrase> <phrase><annotation type="markup-language">Wiki markup</annotation></phrase> <phrase><annotation type="markup-language">XLIFF</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XHTML</annotation></annotation></phrase></p>
<p>Schema languages</p>
<p><phrase><annotation type="schema-language">XSD</annotation></phrase> <phrase><annotation type="schema-language" specifically="XSD">XML schema</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="programming-language">cascading style sheets</annotation></phrase> <phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase> <phrase><annotation type="language-language">XSL-FO</annotation></phrase> <phrase><annotation type="programming-language">XSLT</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">Assemble from Pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">assemble from pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audits</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm" specifically="collaboration">collaborate</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance-checking algorithm</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="algorithm">content generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content generation</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content-generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">eliminating duplication</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithms</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting algorithms</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content from formatting">separation of content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool" specifically="API documentation tool">API documentation tools</annotation></phrase> <phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="component content management system">CCMS</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">component content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing</annotation></phrase> <phrase><annotation type="tool">desktop publishing system</annotation></phrase> <phrase><annotation type="tool">DITA CMS</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool" specifically="formatting language">formatting languages</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting software</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">GitHub</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Jekyll</annotation></phrase> <phrase><annotation type="tool">Liquid</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool" specifically="search engine">Search engines</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">SPFE Open Tool Kit</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool" specifically="static site generator">static site generators</annotation></phrase> <phrase><annotation type="tool">structured editor</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">validator</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> <phrase><annotation type="tool">WordPerfect</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool" specifically="XML editor">XML editors</annotation></phrase> <phrase><annotation type="tool">XML editor</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">wikis</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">Wikis</annotation></phrase> <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> <phrase><annotation type="tool">word processor</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role" specifically="content engineer">content engineers</annotation></phrase> <phrase><annotation type="role">content strategist</annotation></phrase> <phrase><annotation type="role" specifically="content strategist">content strategists</annotation></phrase> <phrase><annotation type="role">document designer</annotation></phrase> <phrase><annotation type="role" specifically="document designer">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role" specifically="information architect">information architects</annotation></phrase> <phrase><annotation type="role">prepress operator</annotation></phrase> <phrase><annotation type="role">publication designer</annotation></phrase> <phrase><annotation type="role" specifically="publication designer">publication designers</annotation></phrase> <phrase><annotation type="role" specifically="subject matter expert">subject matter experts</annotation></phrase> <phrase><annotation type="role" specifically="terminologist">terminologists</annotation></phrase> <phrase><annotation type="role">terminologist</annotation></phrase> <phrase><annotation type="role">typesetter</annotation></phrase> <phrase><annotation type="role">webmaster</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>People <phrase><annotation type="person">Donald Knuth</annotation></phrase> <phrase><annotation type="person">Gutenberg</annotation></phrase> <phrase><annotation type="person">Henry Ford</annotation></phrase> <phrase><annotation type="person">John Gruber</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">fragment</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">map</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure" specifically="rhetorical block">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure" specifically="table">tables</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure" specifically="topic">topics</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">books</annotation></phrase> <phrase><annotation type="media">CD-ROM</annotation></phrase> <phrase><annotation type="media">ebooks</annotation></phrase> <phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Interactive Electronic Technical Manuals</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase></p>
</annotations>
<p>If the data structure of a structured document is a set of nested blocks, how do you design a content structure as a set of nested blocks? Let’s start by looking at the different types of blocks, their purpose, and how they relate to each other. Most markup systems don’t make a high-level distinction between different types of blocks (for example, in XML, they are all elements). However, from a language design point of view, it is useful to break down blocks into different types, each of which requires a different design focus.</p>
<p>In this chapter I look at four main types of block. These types are not mechanically different from each other; rather, they play a different design role in the overall structure of a document. The four types are:</p>
<ll>
<li>
<label>Structural blocks</label>

<p>the basic building blocks of structure.</p>
</li>
<li>
<label>Semantic blocks</label>

<p>blocks that have a meaningful relationship to things writers understand and care about.</p>
</li>
<li>
<label>Information-typing blocks</label>

<p>semantic blocks used in information typing theory, which is used in some markup systems, particularly <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase>.</p>
</li>
<li>
<label>Rhetorical blocks</label>

<p>blocks that govern the rhetorical structure of a document.</p>
</li>
</ll>
<p>Although the above list is ordered by size, it is actually easier to explain the design roles of these block types if you start in the middle with semantic blocks.</p>
<section>
<title>Semantic blocks</title>

<p>If you ask writers to describe the things that make up a document, they will probably name things like paragraphs, tables, and lists. If you ask about a particular type of document, such as a recipe, they will probably name things like introduction, ingredients, and preparation steps. A structured writing language is typically much more fine-grained than this. For instance, a table may be made up of dozens of smaller structures, such as rows, cells, and cell contents. But tables, procedures, and lists are the units that have meaning to writers independent of how those units are constructed internally. Without knowing anything about the mechanics of structured writing, a writer could design the rhetorical structure of a piece of content as a set of such blocks, creating, for instance, a recipe with three main blocks: introduction, ingredients, and preparation.</p>
<p>At the risk of adding further burden to an already overloaded term, I am going to call these recognizable objects <phrase><annotation type="concept"><annotation type="italic">semantic blocks</annotation></annotation></phrase>, because they are blocks that mean something in whichever domain they belong to.  (Note that I am not using the term <phrase><annotation type="italic">semantic</annotation></phrase> to mean subject domain; blocks have semantics in all domains.) High-level markup design is essentially a matter of defining semantic blocks and the ways they go together.</p>
<p>An easy example of a semantic block is a list. A list is a semantic block because <phrase><annotation type="italic">list</annotation></phrase> is an idea with meaning in the document domain independent of its exact internal structure. A writer can say, “I want a list here,” independent of any specifics of markup. If a structure has a name like this in the real world, the block that implements it is a semantic block in the terminology I am coining for this book.</p>
</section>
<section>
<title>Structural blocks</title>

<p>Semantic blocks generally contain other blocks that you might not talk about independently if they weren’t needed to describe the construction of a semantic block. I call these <phrase><annotation type="concept"><annotation type="italic">structural blocks</annotation></annotation></phrase>. Structural blocks are the construction details of a structured document. By analogy, in architectural terms, if a window is a semantic block, the lintel, sash, and jamb are structural blocks.</p>
<p>The distinction between a semantic block and a structural block is not hard and fast. It has more to do with design intent than any concrete characteristic. The main point of making the distinction is to encourage you to think of markup design first in terms of semantic blocks. That is, blocks, with whatever internal structure you require, that capture the structure of something that is real and meaningful to you. Don’t get bogged down in the precise internal structure until you figure out which semantic blocks you need.</p>
<p>Different markup languages often construct the same semantic block differently. <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase>, <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase>, and <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> all define lists, and each defines them differently. Nonetheless, you can recognize that each implements a list, and for most purposes, you can mark up your content using any one of them without any loss of functionality.</p>
<p>A list is made up of structural blocks that build the shape of a list. <citation idref="fig.chunks-1"/> illustrates this with XML, which makes the blocks easy to see.</p>
<figure id="fig.chunks-1">
<title>XML markup for a list</title>

<codeblock language="xml">
&lt;ol&gt;
    &lt;li&gt;
        &lt;p&gt;This is the first item.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;This is the second item.&lt;/p&gt;
    &lt;/li&gt;
&lt;/ol&gt;
</codeblock>
</figure>
<p>In <citation idref="fig.chunks-1"/>, the semantic block is the ordered list bounded by the <code>ol</code> tags. The <code>li</code> and <code>p</code> tags inside are structural blocks that together implement the structure of an ordered list. (Since paragraphs are semantic blocks, albeit relatively simple ones, this illustrates that a semantic block can also be a structural block for a larger semantic structure.)</p>
<p>Other <phrase><annotation type="concept">document-domain</annotation></phrase> examples of semantic blocks include <phrase><annotation type="structure">tables</annotation></phrase> and <phrase><annotation type="structure">procedures</annotation></phrase>. For example, <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase>, <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase>, and <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase>, not to mention <phrase><annotation type="standard">S1000D</annotation></phrase> and <phrase><annotation type="markup-language">reStructuredtext</annotation></phrase>, all have tables with different internal structures, and both DocBook and DITA have procedures, again internally different. It is possible to disagree greatly about how to structure a semantic block while still recognizing different implementations as examples of the same semantic type.</p>
</section>
<section>
<title>Semantic blocks in the subject domain</title>

<p>In the <phrase><annotation type="concept">subject domain</annotation></phrase>, examples of semantic blocks include an ingredients list from a recipe (<citation idref="fig.chunk-2"/>) and the parameter description from an API reference (<citation idref="fig.chunk-2a"/>).</p>
<figure id="fig.chunk-2">
<title>Subject-domain ingredients list</title>

<codeblock language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 3, each
    salt, 1, tsp
    butter, .5, cup
</codeblock>
</figure>
<figure id="fig.chunk-2a">
<title>Subject-domain API parameter description</title>

<codeblock language="sam">
parameter: string
    required: yes
    description:
        The string to print.
</codeblock>
</figure>
<p>Semantic blocks often repeat as a unit, as <citation idref="fig.chunk-3"/> shows in an API reference entry.</p>
<figure id="fig.chunk-3">
<title>Semantic blocks repeated as a unit</title>

<codeblock language="sam">
function: print
    return-value: none
    parameters:
        parameter: string
            required: yes
            description:
                The string to print.
        parameter: end
            required: no
            default: '\n'
            description:
                The characters to output after the {string}(parameter).
</codeblock>
</figure>
<p>Semantic blocks may also be used as a unit in different places in a markup language or in different markup languages. For instance, the ordered-list semantic block may be allowed in more than one place in a document-domain language, such as in a section or in a table cell.</p>
<p>In fact, if you have multiple markup languages in your content system, particularly multiple subject-domain languages, then it makes a lot of sense to define a common set of semantic blocks for use across all of these languages. Thus, if you have five subject-domain languages that all require lists, you can use the same list structure across all five of those languages.</p>
<p>This means that you can define the structure of a list and all of the algorithms that work on lists just once and reuse them for every subject-domain language that shares those structures. It also means that your authors only have to learn one definition for each semantic structure, which makes it much easier for them to learn several different subject-domain languages.</p>
<p>If you do this, then each subject-domain language only has to define, and provide processing algorithms for, those structures that are unique to the subject matter. All the other structures you need are already defined, tested, and ready to use. This makes it much quicker and simpler to design and implement a new subject-domain language when you need one.</p>
<p>Designing in terms of semantic blocks not only helps keep markup design and processing simpler, it also improves <phrase><annotation type="concept">functional lucidity</annotation></phrase>. If you present your markup language to writers as a set of familiar objects such lists and tables or as logical structures such as an ingredients list or parameter description – rather than as a sea of tags – you make their job easier.</p>
<p>Semantic blocks also make things easier for tools developers. An <phrase><annotation type="tool">XML editor</annotation></phrase> that implements a WYSIWYG interface to <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> authoring can provide tool-bar buttons for inserting semantic blocks such as lists or tables. This allows the author to enter these blocks as complete structures rather than having to enter every tag separately.</p>
<p>The structure of a semantic block can be strict or loose. A strict semantic block has one basic structure with few options. A loose one allows a much wider variety of structure inside, sometimes to the point that it acts more as a semantic wrapper than a defined semantic block.</p>
<p><phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> is an example of a language with loose semantic blocks. DocBook has the same high-level semantic blocks as any other generalized document-domain markup language, but it allows so many tags in so many places that none of these objects are simple and easy to understand. Even though you can use DocBook to describe almost any document structure you might want to create, this flexibility reduces functional lucidity and constraint.</p>
<p>How do you balance flexibility with functional lucidity and constraint in creating semantic blocks? Sometimes it is best to have more than one implementation of a particular semantic block. For instance, both DITA and DocBook have two table models, a simple model and a more complex one based on the CALS table model.</p>
</section>
<section>
<title>Information-typing blocks</title>

<p>We have looked at examples of <phrase><annotation type="concept"><annotation type="italic">semantic blocks</annotation></annotation></phrase>, which can be in both the <phrase><annotation type="concept">document domain</annotation></phrase> (lists and tables) and the <phrase><annotation type="concept">subject domain</annotation></phrase> (ingredients list and parameter description). Another way some structured writing systems divide content into blocks is according to the type of information they contain. I call these <phrase><annotation type="italic">information-typing blocks</annotation></phrase>, since the practice of dividing content into such blocks is commonly called information typing (though this is not the only thing the words information typing could refer to, since all structured writing assigns information to types).</p>
<p>Information-typing blocks are a type of semantic block, but they introduce a degree of abstraction not found with most semantic blocks. Unless they have been trained in an information-typing system such as Information Mapping®<citation>http://www.informationmapping.com</citation> or DITA, most writers don’t describe their content in terms of information-typing blocks.</p>
<p><phrase><annotation type="tool">Information Mapping</annotation></phrase> is a structured writing system based on a theory about how humans receive information. It views all content as being made up of six types of information block: Procedure, Process, Principle, Concept, Structure, and Fact. These are information-typing blocks. They don’t directly describe a physical or logical element of document structure (except for procedure) nor are they specific to any one subject. They describe the kind of idea that the content conveys.</p>
<p>Which structured writing domain do information-typing blocks belong to? Clearly they are not <phrase><annotation type="concept" specifically="media domain">media</annotation></phrase>-, <phrase><annotation type="concept" specifically="subject domain">subject</annotation></phrase>-, or <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> structures. Are they a kind of <phrase><annotation type="concept">document-domain</annotation></phrase> structure or something else again? I believe it is more useful to regard them as document-domain structures than to invent another domain. Information Mapping regards a document as a mapping of information-typing blocks, so Information Mapping’s information-typing blocks are components of documents and, therefore, in the document domain.</p>
<p><phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> also adopted this idea of documents being made up of information-typing blocks. In DITA’s case, these blocks are named <phrase><annotation type="italic">topics</annotation></phrase>, which leads to some confusion since the word topic can be used to refer to both an information-typing block and also to a complete document (as in a “help topic” for instance).</p>
<p>DITA has popularized the idea that all content (or all technical content, at least) is made up of just three information-typing blocks: concept, task, and reference, although newer releases of DITA define more topic types than this, and the DITA architecture allows for the creation of even more. This idea is appealing because it is simple, and it is easy to see a correspondence between these three types and the reader activities of learning (concept), doing (task), and looking stuff up (reference). The question is whether this architecture provides adequate or appropriate constraints for the rhetoric of your content and whether it is useful for partitioning the complexity of your content system.</p>
<p>This simple triptych is also appealing because it promises (though it does not necessarily deliver) easy <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> for <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase>. Some people also maintain that it makes content easier to access for readers, though others (myself included) criticize it on the grounds that it tends to break content down too finely to be useful and robs content of its narrative thread.</p>
<sidebar>
<p>There is evidence that DITA is moving away from this vision of information typing. In DITA 1.3, the technical committee puts the emphasis on topic and map as the core types, rather than concept, task, and reference.</p>
<blockquote>
<citation>http://docs.oasis-open.org/dita/dita-1.3-why-three-editions/v1.0/cn01/dita-1.3-why-three-editions-v1.0-cn01.html#focus-of-dita</citation>
<p>The DITA Technical Committee wants to emphasize that topic and map are the base document types in the architecture.</p>
<p>Because DITA was originally developed within IBM as a solution for technical documentation, early information about DITA stressed the importance of the concept, task, and reference topics.</p>
<p>Many regarded the topic document type as nothing more than a specialization base for concept, task, and reference.</p>
<p>While this perspective might still be valid for technical content, times have changed. DITA now is used in many other contexts, and people developing content for these other contexts need new specializations. For example, nurses who develop evidence-based care sheets might need a topic specialization that has sections for evidence, impact on current practices, and bibliographic references.</p>
</blockquote>
<p>Stating that the evidence-based care sheets example would include information from more than one abstract type and proposing this example as a specialization of topic – rather than concept, task, or reference – both suggest a significant shift in thinking on this point and may indicate a shift away from abstract information typing towards a more concrete subject-domain approach.</p>
</sidebar>
<p>Since neither <phrase><annotation type="tool">Information Mapping</annotation></phrase> nor <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> provide any mechanism for constraining how information-typing blocks go together to form documents, they do not provide much support for creating and maintaining repeatable rhetorical structures. (This does not mean that authors can’t create such structures, but the complexity of doing so falls entirely on them, with the added complexity of having to construct the rhetorical structure out of a jigsaw puzzle of abstract information-typing blocks.) DITA, however, does allow you to create much more specific content types. See <citation nameref="chapter.extensible"/> for more details.</p>
<p>This abstract information typing is distinct from the subject-based information typing of the <phrase><annotation type="concept">subject domain</annotation></phrase>. <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> and <phrase><annotation type="tool">Information Mapping</annotation></phrase>’s approaches are broad and analytical, concerned with finding commonalities across many different kinds of information. The subject domain is specific and synthetic, concerned with fitting pieces together to successfully describe a particular subject.</p>
<p>However, the two approaches are not as incompatible as this makes them seem. The design role of information types is often to suggest how a particular kind of content should be written. Thus a software procedure, a knitting pattern, and a recipe are all procedural information. At the subject-domain level they are quite distinct, but at the information typing level they are constructed similarly. If you are creating a subject-domain structure, recognizing its information type (according to whichever information-typing scheme you prefer) can help you design its internal structure. The resulting block will be a subject-domain semantic block, rather than a generic information-typing block, but information typing will have informed the construction of that block. <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> attempts to exploit this relationship between the generic information type and the more specific block design of a particular language through its specialization mechanism, which I look at in <citation nameref="chapter.extensible"/>. However, you can certainly design subject-domain semantic blocks without reference to information-typing theory.</p>
</section>
<section>
<title>Rhetorical blocks</title>

<p>Neither semantic blocks nor information-typing blocks constitute a piece of content that is rhetorically complete – that persuades, informs, entertains, or enables the reader to act. I use the term <phrase><annotation type="italic">rhetorical block</annotation></phrase> for a piece of content that is rhetorically complete. A rhetorical block is made of up smaller semantic and structural blocks, but the structure of a rhetorical block controls the completeness and repeatability of a content type. The key design question is, do you want to constrain the structure of your rhetorical blocks? This is an important question because systems based on information typing, such as <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase>, provide no mechanism for constraining anything larger than the information-typing block, and document-domain systems, such as <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase>, provide no mechanism for constraining rhetorical structure, even though they allow you to capture complete rhetorical blocks.</p>
<p>As we have seen, there are many advantages to constraining the rhetorical block, but the key advantage is <phrase><annotation type="algorithm">repeatability</annotation></phrase>. This is not simply because repeatability allows you to produce quality content more quickly and reliably. It is also because it makes content quality testable in a repeatable manner. You don’t just test the quality of an individual piece, but of a repeatable pattern (as we will see in <citation nameref="chapter.repeatability"/>).</p>
<p>Do all rhetorical blocks have a repeatable pattern? Certainly not. This book is a rhetorical block, but it does not have a repeatable pattern that one could define as a specific data structure. (Hopefully there is a structure to its rhetoric, but it is not one that lends itself to modeling as a set of nested blocks.) Although this book encourages the use of the <phrase><annotation type="concept">subject domain</annotation></phrase> for structured writing, it was not written in the subject domain. It was written (in <phrase><annotation type="markup-language">SAM</annotation></phrase> syntax) in a small constrained document-domain language with a number of <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> for things such as markup languages, markup concepts, and processing tools.</p>
<p>But not all physical books constitute a single rhetorical block. Many books, such as cookbooks, are collections of related rhetorical blocks, such as recipes. Not only can you define a repeatable rhetorical block for a recipe, doing so provides significant benefits for most of the structured writing algorithms and allows you to effectively partition and direct the content complexity of a cookbook publisher or a magazine publisher that inserts recipes into many different publications.</p>
<p>Where you can reasonably define repeatably structured rhetorical blocks in your content, there are good reasons to do so. One approach is to take the rhetorical blocks that you produce now, identify those that could be repeatably structured, and develop a structure to contain and constrain them. This may involve moving some content around, since the application of a repeatable structure inevitably reveals misplaced, missing, and superfluous content. But overall, this is a reasonably straightforward process.</p>
<p>A second approach is to take material that is currently in long discursive rhetorical blocks (such as text books) and move it to much shorter and more structured rhetorical blocks (such as recipes or encyclopedia articles). Breaking material into smaller rhetorical units is not a new idea. It has been practiced in encyclopedias and periodicals for centuries, and it has greatly accelerated in the age of the Internet. This has not only improved our access to information, it has radically changed how we seek and use information, creating a style called <phrase>information snacking<citation>https://www.nngroup.com/articles/information-scent/</citation></phrase> in which readers reach for discrete pieces of information as and when they need them, confident that they will always be able to rapidly find and read what they need when the time arises.<citation idref="2"/> In other words, people prefer to consume content in shorter rhetorical blocks (not because they need to know less, but because they need to know less at a time), so it makes sense to refactor your content and its architecture into a collection of smaller rhetorical blocks.</p>
<footnote id="2">
<p>I discuss this change of information seeking and consuming habits in my book <phrase><annotation type="citetitle">Every Page is Page One: Topic-based Writing for Technical Communication and the Web</annotation></phrase>.</p>
</footnote>
<p>This transformation to shorter rhetorical blocks is often called <phrase><annotation type="italic">topic-based writing</annotation></phrase>, but that term can be confusing because it is also used to mean a system in which, instead of writing in long rhetorical blocks, individual writers write independent information-typing blocks that are then compiled into long rhetorical blocks, often by somebody else. The confusion caused by giving these two different approaches the same name is that some people have started to think that topic-based writing means writing information-typing blocks and then publishing them separately as if they were rhetorical blocks. This confusion is compounded because <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> calls its information-typing blocks <phrase><annotation type="italic">topics</annotation></phrase> (Information Mapping calls them <phrase><annotation type="italic">blocks</annotation></phrase>) and because publishing each information-typing block separately is the default behavior when you publish a DITA map to the web.</p>
<p>But while a single information-typing block may sometimes be a rhetorical block all by itself, this is often not the case. Whether one believes in the usefulness of information-typing theory or not, it is clear that most useful rhetorical blocks contain more than one type of information.</p>
<p>I have attempted to distinguish topics as complete rhetorical blocks from topics as information-typing blocks by coining the term “Every Page is Page One topic.” Why “Every Page is Page One”? Because a complete rhetorical block, regardless of its length, is a block that an <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> reader will consume independently of any larger work or collection in which it is embedded. It is page one for that reader. And since information-snacking readers use search to dive directly down to the individual page they want, every rhetorical block in your collection is going to be page one for some reader. I explore the design of Every Page Is Page One topics in my book <phrase><annotation type="citetitle">Every Page is Page One: Topic-based Writing for Technical Communication and the Web</annotation></phrase>.</p>
<p>But does an Every Page is Page One topic have any more reason to follow a constrained rhetorical block structure than a book? Yes, topics tend to demonstrate a consistent rhetorical pattern once they become smaller and are accessed in an Every Page is Page One fashion. This makes the information in these topics more accessible to the information-snacking reader, both because it makes them easier to find and recognize and because it ensures that they do the job they are supposed to do more completely and consistently.</p>
<p>Additionally, as I explored in <citation nameref="chapter.architecture"/>, Every Page is Page One topics are part of the way you create a <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> – one in which readers enter by search or by following a link and navigate the information set from the point they arrived. Building and maintaining a bottom-up information architecture is much easier if you do it algorithmically using <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> and <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> algorithms. Thus, creating subject-domain rhetorical block types for as much of your content as will fit a repeating pattern is key to creating and managing a bottom-up information architecture.</p>
<p>Deciding if you want to model and constrain your rhetorical blocks is therefore one of the most important decisions you make in designing your content system and determining how complexity will be partitioned and directed in that system.</p>
<section>
<title>Granularity</title>

<p>There can be a conflict between ease of writing and ease of <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase>. The designers of content management systems typically want to manage content down to a fine level of granularity, especially for purposes of <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase>. Content management algorithms may be best served by managing fairly small chunks of content – semantic units rather than rhetorical units. But for writers, writing something less than a rhetorical unit can be difficult. Writers can find it difficult to get a sense of how well a particular semantic block will meet a reader’s needs when they don’t see the rhetorical block that block will fit into.</p>
<p>It is hard to create discrete parts, unless the parts are really well defined. Writers are trained to construct entire essays and are able to structure them well as a whole. But it is hard to correctly structure a part without clear and explicit guidance – the kind of guidance you do not get from a generic information-typing block such as concept, task, or reference.</p>
</section>
</section>
<section>
<title>Fragments</title>

<p>Another division of content, found mostly in relationship to the management domain, is the <phrase><annotation type="structure">fragment</annotation></phrase>. By fragment I mean a chunk of text that is not a semantic block, an information-typing block, or a rhetorical block. A fragment is a block that you manage independently of the surrounding text. In other words, it is a block that has no rhetorical role and exists purely for process purposes.</p>
<p>For example, in a <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> scenario, you might want to make an item in a list conditional based on which version of a product that list item applies to.</p>
<p>Individual list items are not semantic blocks. They are just structural blocks of a list. When you make list items conditional, you are actually creating multiple separate lists with some items in common and recording them as a single list. You might be able to attach reasonably informative metadata to any one of those lists as a whole, but there is usually not a lot you can say about individual list items. They are fragments of a list. When you apply conditions to them, you are applying those conditions to fragments.</p>
<p>In some <phrase><annotation type="algorithm">reuse</annotation></phrase> systems, including <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> and <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase>, you can apply conditions to arbitrary bits of text – three words in a sentence for instance. The block that contains those words is a fragment. Some reuse systems also allow you to reuse arbitrary bits of text from other parts of the content set, simply because the text is the same in each case. Those bits of text are also fragments.</p>
<p>In some cases, you can turn an existing structural block into a fragment by attaching <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> metadata to it. In other cases, you have to introduce additional markup into the document to delineate the fragment.</p>
<p>Fragments definitely solve some problems, but they are also inherently unstructured and unconstrained. It is easy to get into trouble with fragments. It is easy to create relationships and dependencies that are hard to manage because they don’t follow any structural logic. You should use them with great caution and restraint.</p>
</section>
<section>
<title>Paragraphs and phrases</title>

<p>Paragraphs are the one thing that makes structured content different from other computable data sets. This is not because of the paragraph structure per se, but because of the way we annotate phrases within the paragraphs. It is rare in any other data set to see a structure floating within the value of another structure. But that is exactly what happens when you annotate phrases in a paragraph.</p>
<codeblock language="sam">
In {Rio Bravo}(movie), {the Duke}(actor "John Wayne") 
plays an ex-Union colonel.
</codeblock>
<p>In this example, the annotation on the phrases “Rio Bravo” and “the Duke” float in the middle of the paragraph block. Here is the same thing in XML:</p>
<codeblock language="xml">
&lt;p&gt;In &lt;movie&gt;Rio Bravo&lt;/movie&gt;, 
&lt;actor name="John Wayne"&gt;the Duke&lt;/actor&gt; 
plays an ex-Union colonel.&lt;/p&gt;
</codeblock>
<p>Here the <code>movie</code> and <code>actor</code> elements float in the content of the <code>p</code> element. In XML parlance, this is called <phrase><annotation type="italic">mixed content</annotation></phrase>.</p>
<p>XML breaks the structure of elements down into three types:</p>
<ll>
<li>
<label>element content</label>

<p>Elements that contain only other elements.</p>
</li>
<li>
<label>data content</label>

<p>Elements that contain only text data.</p>
</li>
<li>
<label>mixed content</label>

<p>Elements that contain both text data and elements.</p>
</li>
</ll>
<p>Mixed content is the reason that most traditional data formats are not a good fit for content. They may be able to model element content and data content, but they lack an elegant way to model mixed content.</p>
<p>Even conventional programming languages have trouble with mixed content. Most libraries for XML processing invent an additional wrapper around each string of characters in a mixed content element, effectively representing it as if it were written like this (without mixed content):</p>
<codeblock language="xml">
&lt;p&gt;&lt;text&gt;In &lt;/text&gt;&lt;movie&gt;Rio Bravo&lt;/movie&gt;&lt;text&gt;, 
&lt;/text&gt;&lt;actor name="John Wayne"&gt;the Duke&lt;/actor&gt;&lt;text&gt; 
plays an ex-Union colonel.&lt;/text&gt;&lt;/p&gt;
</codeblock>
<p>But while this makes the content easier to process for programming languages, it is clearly false to the actual structure of the document. Structured writing is essentially about reflecting the structure of thought or presentation in a narrative, and narratives have a structure that is not shared with other data. Indeed, you might say that all other data formats exist as an attempt to extract information from the narrative format to make it easier to process.</p>
<p>Thus, if you are presented with a problem in this format:</p>
<blockquote>
<p>John had 4 apples and Mary had 5 apples. They place their apples in a basket. Bill eats 2 apples. How many apples are left in the basket?</p>
</blockquote>
<p>You solve it by first extracting the data from the narrative:</p>
<codeblock>
4 + 5 - 2 =
</codeblock>
<p>But with content, while you can sometimes extract the data from the content, you also need to retain the content or the means to recreate the content, since the content (not the answer) is the product you are trying to produce.</p>
<p>When you move content to the <phrase><annotation type="concept">subject domain</annotation></phrase>, you will, in some cases, break down paragraphs and isolate data with the intention of recreating paragraphs algorithmically on output or switching from a narrative to a data-oriented reporting of the subject matter. Either way, this process makes the data easier for algorithms to handle and, thus, makes most of the structured writing algorithms work better. (You may have noticed that the <phrase><annotation type="concept">subject domain</annotation></phrase> provides the most constrained and elegant solution to many structured writing algorithms.)</p>
<p>Even so, it is not always possible to do a complete breakdown of all paragraphs when refactoring content to the subject domain. Therefore, most subject-domain markup languages use paragraphs and other basic text structures and allow writers to annotate phrases within paragraphs. Only narrative is capable of expressing the full variety and subtlety of the real-world relationships between things, and only narrative is capable of conveying these things effectively to most human readers. Even things that can be fully described to algorithms with fielded data must be described to human audiences with narrative.</p>
<p><phrase><annotation type="concept">Subject-domain</annotation></phrase> structured writing extends the reach of more conventional algorithms into the world of narrative to enable specific structured writing algorithms and to provide rhetorical constraints to improve the quality of the writing. Subject-domain structured writing does not attempt to capture the whole semantics of a narrative, just to discipline and structure narrative to achieve specific content creation objectives – a particular partitioning of content complexity.</p>
<p>Every structured writing domain needs to annotate phrases. <phrase><annotation type="concept" specifically="media domain">Media-domain</annotation></phrase> structured writing needs to annotate phrases to describe formatting. The <phrase><annotation type="concept">document domain</annotation></phrase> needs to annotate phrases to describe their role in the document. The <phrase><annotation type="concept">management domain</annotation></phrase> needs to annotate phrases to assign conditions or extract content for reuse. The <phrase><annotation type="concept">subject domain</annotation></phrase> needs to annotate phrases to describe the subject the phrase refers to.</p>
<p>In planning your markup structures, therefore, it is important to think about which structures in your language need to be mixed content and which do not. Finding ways to avoid mixed content without violating the spirit of the narrative nature of writing can pay dividends in an improved ability to express constraints and to execute virtually all the structured writing algorithms.</p>
<p>On the other hand, some of the most important subject matter that you need to model and make available to algorithms cannot effectively be factored out of paragraphs, particularly while maintaining <phrase><annotation type="concept">functional lucidity</annotation></phrase>. Be prepared, therefore, to think seriously about the types of phrases that you need to annotate below the paragraph level and exactly which domain those annotations should be in.</p>
</section>
</chapter>
