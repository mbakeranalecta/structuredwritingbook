<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.repeatability">
<title>Repeatability</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>algorithm</type>
<term>repeatability</term>
</record>
<record>
<type>concept</type>
<term>repeatability</term>
</record>
</index>
<p>However you design your content process, they key to its success is repeatability. Making it work once is great, but real success is making it work reliably day after day after day.</p>
<p>One of the biggest challenges to repeatability in content processes is actually determining if you are repeating the right things and repeating them successfully. Content is one of the hardest products to test. One of the biggest barriers to consistently producing quality content is being able to test that quality has actually been achieved – that is, that the content is serving and/or influencing the reader as you want it to do.</p>
<p>The problem has two parts. The first is that it is hard to observe the effect of content. You just aren’t there to watch people read it. The second is that even when you do get to observe the effect of content on the reader, how do you know what aspects of the contents rhetoric achieved the effect you observed? Making these observations on individual pieces of content is of limited value. Yes, you can do continual A/B testing, taking down content that does not perform well and continually trying other things until you finally create a piece of content that performs well. But then how do you reproduce that success with the next piece of content you write? How do you discover the rhetorical pattern that contributed to its success and should be emulated in future content?</p>
<p>Measuring content is not like measuring minivans or cans of peas, where every example is supposed to be exactly alike. Every piece of content is supposed to be different. It is great to find that you have a successful ad or blog post or manual topic, but to repeat that success, you have to look beyond the particularity of an individual item to see what it has in common with other successful items. You need to find, and reproduce, the common rhetorical pattern shared by many different pieces of successful content.</p>
<p>Some part of the success of individual items doubtless lies in the features they and they alone possess – your review of a Harry Potter movie is going to get more hits than your review of an art-house flop for reasons entirely unrelated to the quality of your reviews – but much of it also comes from meeting specific user needs in a highly accessible ways, and there is often a pattern to that that can be repeated. Did your review of Harry Potter get more or fewer views than the next site’s review of Harry Potter? Do your reviews of art-house flops get more views than their’s? What is it about how you write your reviews that makes them more popular, regardless of the popularity of the movie?</p>
<p>Maybe its your acerbic wit, of course, which is not easy for another writer to reproduce, but maybe it is the rhetorical pattern of your reviews, how you present the information that movie goers really care about in a format that is clear and easy to read. If so, that pattern should be repeated across all your reviews.</p>
<p>Many content types, such as recipes, have generic rhetorical patters which everyone knows and uses, but you can create more specific versions of these rhetorical patterns that will make your content work better than your rivals’ content. With recipes, maybe there is a pattern to a recipe that makes it particularly easy for a reader to choose which dish to prepare and to prepare it successfully, and those characteristics should be repeatable across a whole set of recipes. While literary charm doubtless counts for something – and for more in some forms of content than in others – saying the right things in the most accessible way is still the basic bread and butter of content <phrase><annotation type="algorithm">quality</annotation></phrase>, and structured writing is the best way to ensure that you can deliver that repeatably.</p>
<p>Trying to derive lessons from a single piece of successful content is little more than an educated guess. You are abstracting from a single data point. To be certain which aspects of the content are contributing the most to its success, you need to observe multiple samples that exhibit the same basic features. It is when you observe that multiple pieces of content exhibiting the same features are all successful that you know with some degree of reliability that it is those features that make the content work. Once you know this, you are in a position to reliably produce new content that will be similarly successful. You have achieved <phrase><annotation type="algorithm">repeatability</annotation></phrase>.</p>
<p>To achieve repeatability, you need to partition those <phrase><annotation type="concept">rhetorical</annotation></phrase> elements that you want repeated and constrain your writers to follow them. But is it is not enough to constrain rhetorical patterns after the fact, when you already know what works. If you don’t have many examples of the same pattern to test, you can’t draw any useful conclusions about which elements of the pattern are working and which are not. You not only have to constrain in order to repeat, you have to constrain in order to measure. Without constraints, you don’t know what you are measuring.</p>
<p>In order to generalize the measurements you are taking, so that you can draw conclusions that apply to more than one piece of content, you need to make sure that each piece of content you are measuring has the same structures and features. That is the only way you can measure if it is the structures and features, rather than the individual texts, that are performing well. You need consistent <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> content structures that express those features of a text that impact is quality. Until you have that, you have no reliable basis on which to extrapolate any measurements you do of individual pieces of content. In order to achieve <phrase><annotation type="algorithm">repeatability</annotation></phrase> in content creation, therefore, you need structured writing.</p>
<p>The most fundamental part of content quality is to give the reader the information they need in a form they can use. A confounding aspect of content quality is that every reader is different. They are doing different thing, they have different experiences, and they have different vocabularies.</p>
<p>For many writers in corporate environments, lack of knowledge about the readers, their tasks, and their backgrounds, is one of the biggest problems in determining what content is required and what form it should take. While direct contact with the customer is undoubtedly the best way to address this, you can actually learn what content to create without ever meeting the reader, as long as you can measure the performance of your content, generalize your results, and repeat the structures that perform best.</p>
<p>If the bread and butter of content <phrase><annotation type="algorithm">quality</annotation></phrase> is to provide the right pieces of information in the most accessible way, and if you have some means of measuring the impact of your content, then you can use strictly constrained patterns and testing to establish which set of information and which presentation of that information works best for your audience. While seeding this process based on knowledge of the reader is obviously to be preferred, ultimately, this is a the most reliable way to learn about what content works for your reader, even if you don’t actually know why it works.</p>
<p>Without known good patterns and reliable tests, only personal knowledge of the reader will help the individual writer craft content that may meet their needs. But this means that every writer is doing the reader research and the associated information design work every time, and with a limited body of information and few if any opportunities to test their design. If they spend the kind of time that is required to get this research and design work right, this is a huge overhead for the organization, and a huge amount of repeated effort. If they don’t spend the time to do it right, then the content probably won’t meet the reader’s needs. As much as we talk about the potential cost savings of information reuse, the potential cost saving and quality improvement from the reuse of known good rhetorical patterns verified by testing is enormous.</p>
<p>Organizations often look to <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> as the principle source of cost savings in the content system. But as we have seen, content reuse can be quite expensive to implement. Cost savings are not guaranteed, and <phrase><annotation type="algorithm">quality</annotation></phrase> problems can result from an overzealous approach to reuse. <phrase><annotation type="algorithm">Repeatability</annotation></phrase>, which we can think of as the <phrase><annotation type="concept">reuse of patterns</annotation></phrase> rather than individual pieces of content, can be a huge time-saver, and one that, if applied correctly, can bring big quality gains at the same time. And the kinds of constrained patterns which provide repeatability also direct the complexity of information design away from contributors, opening the way to greater <phrase><annotation type="algorithm">collaboration</annotation></phrase> by bringing in authors who are experts in the subject matter but not <phrase><annotation type="concept">information design</annotation></phrase>, and who do not have the time or inclination to use complex <phrase><annotation type="process">content management</annotation></phrase> or <phrase><annotation type="algorithm">reuse</annotation></phrase> systems. You should consider carefully whether <phrase><annotation type="algorithm">repeatability</annotation></phrase>, rather than <phrase><annotation type="algorithm">reuse</annotation></phrase>, should be the first place you should look to reduce costs in your content system.</p>
<p>Every structured writing domain provides support for <phrase><annotation type="algorithm">repeatability</annotation></phrase> within its domain. The use of a style sheet in a word processor ensure repeatability in the formatting of headings and lists. <phrase><annotation type="concept">Document-domain</annotation></phrase> languages like <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> and <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> provide repeatability in document structures (but only to the extent that they constrain the use of such structures). To get repeatability in the <phrase><annotation type="structure">rhetorical structure</annotation></phrase> of content, however, you need to turn to the <phrase><annotation type="concept">subject domain</annotation></phrase>.</p>
<p>Finally, while I have focused on rhetorical repeatability in this chapter, it should be noted that the whole pattern of partitioning complexity to make sure it is handled by a person or process that has the knowledge, skills, and resources to handle it, contributes to repeatability at every point of the content process. And here again we see the importance of conformance to known good patterns, since the effectiveness and reliability of algorithms depends entirely on the quality of the content and metadata that is passed into them.</p>
</chapter>
