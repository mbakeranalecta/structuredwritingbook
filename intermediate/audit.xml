<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.audit">
<title>Auditing</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>auditing</term>
</record>
</index>
<p>While the appropriate structured writing techniques can help to avoid your content set falling into disorder, maintaining a healthy content collection and a well integrated information architecture still requires constant monitoring  to find and fix errors and to ensure that your processes are working as well as possible.</p>
<p>In <citation type = "nameref" value = "chapter.conformance"/> we looked at how structured writing techniques can improve the <phrase><annotation type="process">conformance</annotation></phrase> of individual pieces of content. In <citation type = "nameref" value = "chapter.metadata"/>, we looked at how they can assist in the maintenance of <phrase><annotation type="concept">metadata</annotation></phrase> and <phrase><annotation type="concept">taxonomy</annotation></phrase> across the entire information set. Now we will look at how they can be used to audit a content set as a whole to ensure it meets its constraints, and that its constraints are consistent with its goals.<citation type = "idref" value = "1"/></p>
<p>It is not a given that if every item in a collection meets its individual constraints that the whole collection meets its constraints. Just because every item in your collection is conformant does not mean that the collection is complete, for instance, or that all the links that should exist do exist, or that they point to the best resources. For issues like these, you need both a sound strategy for creating and supporting your <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase>, and a sound <phrase><annotation type="algorithm">audit</annotation></phrase> process to make sure everything is in its place.</p>
<footnote id="1">
<p><phrase><annotation type="concept" specifically="content strategy">Content strategists</annotation></phrase> often use the term “content audit” to mean a current state analysis performed at the beginning of a website redevelopment project. A content strategy content audit is about cataloging, and possibly categorizing, the content you already have. I am using the word audit to refer to an ongoing and or recurring activity in which a you ensure that a content set is meeting or continuing to meet its goals.</p>
</footnote>
<p>Auditing is about making sure that:</p>
<ul>
<li>
<p>The definition of the content set is correct (we know what types of content it should contain, and which instances of each type)</p>
</li>
<li>
<p>The content set is complete (it contains all the items of each type that it should)</p>
</li>
<li>
<p>The content set is uncontaminated (it does not contain any items or types it should not)</p>
</li>
<li>
<p>The content set is integrated (it expresses all of the relationships between items that it should)</p>
</li>
<li>
<p>Each item in the content set <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> to its constraints</p>
</li>
</ul>
<p>Auditing a large content set is difficult and many CMS solutions are deficient in audit capabilities. The main reason for this is that with the way most content is recorded and stored (<phrase><annotation type="concept">media domain</annotation></phrase> or generic <phrase><annotation type="concept">document domain</annotation></phrase> formats), it is very difficult to mechanically assess what content you have and what state it is in. It is hard to know if you have all the pieces you should have if you can’t tell exactly what each piece is.</p>
<p>One of the biggest, and least appreciated, benefits of structured writing is that it makes content more auditable. When content management systems fail or become unmanageable, the root cause is often either an incorrect distribution of complexity from day one or a failure to audit: either lack of attention to regular audits, or the lack of ability to audit effectively. Without the ability to audit effectively, content sets often end up incomplete, corrupt, and poorly integrated, which reduces quality and increases costs at every stage of the process. It creates a body of unmanaged complexity that every downstream process and person has to deal with, including, of course, the reader. And a vicious cycle can develop in which writers, frustrated with the difficulties of the system, create workarounds that further corrupt the information set. Unmanaged complexity breeds more complexity. Whatever expenses you may incur to implement a more structured structured writing approach could well be offset or even exceeded by the savings associated with more effective auditing of the content set.</p>
<section>
<title>Correctness of the definition of the content set</title>
<p><phrase><annotation type="concept" specifically="content strategy">Content strategists</annotation></phrase> will spend a great deal of time and effort developing a content plan (usually this is for a website, but the same principle applies to any content set). How they do this is beyond the scope of this book, but the result should be a definition of the content set: which types of information it is supposed to contain and which instances of those types. (This definition is based, of course on the goals it is designed to achieve, which it is the business of the content strategist to define.)</p>
<p>The definition of a content set is not necessarily static. It is not necessarily a fixed list of topic types or of specific topics to be developed. For one thing, the subject matter may change during the course of content development, which would change the content pieces needed, and perhaps require new content types or modifications to existing types. Second, the exact set of pieces or types may not be knowable at the outset. Content development explores a complex set of relationships between subject matter and the needs and background of the reader that cannot be fully known without traveling the ground in detail.</p>
<p>It is hard to be disciplined and deliberate in evolving the big picture model of the content set if you are not disciplined and deliberate in how you create the pieces. If you ask a writer to write a piece and then ask them after they are finished to describe the job it does by assigning CMS metadata to it, they will tag it using the terms that seem like the closest fit to the content they have already written, but they will probably not revise the content to fit the labels they are applying to it. Their view will not be that the content is wrong, but that the labels don’t fit the content. And since the labels won’t fit the content, you won’t really know what type of content you have in your collection.</p>
<p>If you don’t really know what type of content you have, you can’t really tell if the definitions for your content set are correct. Some content may perform poorly because it does not fit the type definition properly. But you can’t tell whether it failed because it didn’t fit the type definition or because the type definition is wrong. Thus you don’t know what to fix.</p>
<p>Of course, a writer may come up with something that is better than the current type definition. This is a good thing. If it really is better, you want to change the type definition to match it so that all future content will be better as well. But if the author simply tags it according to the current CMS tags, you will never know that it is a different model, never have the chance to test the new model to see if it is better, and never have the chance to update the definition so that new content follows the successful new model. Unless your content types are codified and auditable, you won’t detect improvements in the types and they won’t carry over to other content. See <citation type = "nameref" value = "chapter.repeatability"/> for more on this.</p>
<p>Having strong well-defined content types makes it easier to audit your  types to make sure they are doing the job they were designed to do. Similarly, having strong well-defined content types means that you can have greater assurance that each item is doing the job it is supposed to do, which helps you make sure you have covered all the subjects you should have.</p>
</section>
<section>
<title>Completeness</title>
<p>But structured writing can do more than this to help you audit the definition of the content set. It can help you assess its completeness as well. If you create content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, including <phrase><annotation type="concept" specifically="subject annotation">annotating the subjects</annotation></phrase> that you mention in the text, you can use algorithms to extract a list of the types and subjects that your content is actually talking about. In your initial top-down plan, you may not have thought about the need for content on a certain subject or to support a certain activity, but if that subject or that activity start showing up in the body of your content, that is a strong indication that those subjects and activities are related to the purpose of your content set and should probably be included in the definition of the content set.</p>
<p>Subject domain structured writing is how you know what your content is actually talking about, what every author is discovering or thinks needs saying. Content needs are ultimately driven by subject matter and it is your writers working with the subject matter every day who are on top of what the subject matter is and how it is changing. Bottom-up content planning distributes the responsibility for discovery outward and for coordination inward to keep you in touch with evolving content needs. Without this information flow it is very difficult to establish that the content set is meeting its coverage goals. (We saw the same pattern of information flow with bottom up taxonomy development in <citation type = "nameref" value = "chapter.taxonomy"/>.)</p>
<p>This actually attacks two audit problems. If writers are writing about things outside your current coverage definition, either your coverage definition needs updating, or writers are polluting the content set with irrelevant material.</p>
</section>
<section>
<title>Avoiding contamination</title>
<p><phrase><annotation type="concept">Subject domain</annotation></phrase> content structures and annotations can help you prevent contamination of the content set by irrelevant or poor quality material. But more important than catching writers in the act is catching the flaws in content types that allow for contamination to creep in.</p>
<p>A major form of contamination in any content set is redundant content. As we noted in <citation type = "nameref" value = "chapter.duplication"/>, we have to be careful in how we define redundancy, because it is not simply a matter of only addressing a subject once. It is a matter of addressing an audience need only once, and that may require several topics on the same subject addressed to different readers. But it is all too easy for duplicate content to sneak into a content set. Some of it comes in because the same functionality is repeated in many products or in content delivered to different media. Some comes in through writers simply not knowing that suitable content already exists.</p>
<p><phrase><annotation type="algorithm" specifically="content reuse algorithm">Content reuse</annotation></phrase> is a major motivator for structured writing for exactly this reason. But the <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> algorithm only addresses the problem of how to reuse content. It provides a method to reuse content you are aware of. It does not prevent you from duplicating content because you did not look for or did not find existing reusable content. You need to audit your content regularly to make sure that content is findable by writers who may want to reuse it, and to make sure that duplication is not creeping in.</p>
<p>There are <phrase>natural language processing</phrase> algorithms that will attempt to identify redundant content in a content set, but such algorithms focus on similar texts. This is not enough. The same or similar sequences of words may occur in different places without being redundant. They may mean different things, or perform different roles, in context. On the other hand, redundant pieces of information may be expressed in very different words. It is redundant information, not redundant phrases, that we care about.</p>
<p>Even when redundancies are found, they may be very difficult to consolidate if they don’t have similar boundaries within their respective documents (the <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> problem – see <citation type = "nameref" value = "chapter.composition"/>). Strongly typed subject domain content, meaning content that conforms to a model that breaks down and enforces the various pieces of information required to correctly cover a topic, makes it possible to detect duplication in a much more formal and precise way. Duplication of subject matter is much easier to detect when content is captured in the subject domain.</p>
<p>A person who consults a repository to see if there is a piece of content they can use relies on the ability to query the repository in a sensible way for the type of content they are looking for. They also rely on their ability to recognize the content when they see it, and on it actually being strongly conformant so that they can use it with confidence. Subject domain topic typing helps with all of these things. Subject domain labeling of document and media domain content can help as well, but only if it is conforms to the appropriate constraints, a problem discussed in <citation type = "nameref" value = "chapter.conformance"/>. The easier it is to correctly identify reusable content and use it, the less corruption of the repository will occur.</p>
</section>
<section>
<title>Maintaining integration</title>
<p>A content set is never a collection of wholly independent pieces. The items in the set have relationships to each other that matter to the reader.  Whether you express those relationships through <phrase><annotation type="structure">links</annotation></phrase> or <phrase><annotation type="structure">cross references</annotation></phrase>, or whether you rely entirely on tables of contents and indexes, it is still important to understand and manage the relationships between items.</p>
<p>Relationships between items may matter for management reasons as well. If you have documentation for multiple releases of a product, the relationship between the documentation for feature X in version 3 and that for feature X in version 2 matters to you. It may matter because the feature has not changed and you can reuse the item. It may matter because an error was found in version 2 and you want to fix it in version 3 as well. And if you put this content online, the relationship may matter for the reader as well, if they search for feature X and get the result for version 2 when they are using version 3.</p>
<p>You can describe the relationship between items externally. Items are related whenever they have the same value in any one of their <phrase><annotation type="concept">metadata</annotation></phrase> fields. Which field it is tells you what the relationship is. Finding the relevant metadata field to look at allows you to manage the relationship. But the same problem exists here as it always does with all external metadata (see <citation type = "nameref" value = "chapter.content-management"/>) – the content may not conform to the metadata, and without structured writing in the content itself, it is hard to audit the conformance of the content to its metadata. In-band information is always more reliable than out-of-band information.</p>
<p>But the bigger problem is that external metadata does not map the important relationship that can exist between a part of one item and the whole of another item. Are function names mentioned in the programming topics all listed in the API reference? Are the utensils mentioned in a recipe all covered in the appendix of kitchen tools? These are important content relationship questions, but their importance cannot be mapped with external metadata. You need subject domain markup inside the piece that identifies function calls and the names of kitchen tools.</p>
<p>Structured writing, particularly in the subject domain, helps you discover and manage these relationships by making clear the subjects on which these relationships are based.</p>
</section>
<section>
<title>Making content auditable</title>
<p>I have talked all through this chapter about how using strong content types makes content easier to audit. What is a strong content type? Fundamentally, a strong content type is one that makes explicit what the content is supposed to say an how it is supposed to say it. Or, to put it another way, a strong content type is one that captures, enforces, or factors out the major constraints of the content, including its major rhetorical constraints. A strong content type constrains the interpretation of content as well as its composition, and the more reliably content can be interpreted, the more reliably it can be audited. Strong content types are almost always in the <phrase><annotation type="concept">subject domain</annotation></phrase>.</p>
<p>It is possible for content to conform to all of its rhetorical constraints without the use of structured writing techniques. But strong content types provide explicit guidance to the author and facilitate the use of <phrase><annotation type="process">conformance</annotation></phrase> algorithms. They are created to meet your conformance goals. Similarly with auditing, you specify the content structures you need in order to meet your auditing goals.</p>
</section>
<section>
<title>Facilitating human review</title>
<p>Auditing is sometimes not as straightforward as conformance, even with structured writing techniques in place. Auditing often requires human review, not only to make sure that all subjects have been covered, but to discover new issues or subjects that need to be addressed. Human review of a large content set is difficult due to the sheer amount of content. An <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> can simplify this work by creating different views of the content set that humans can review more easily (an application of the <phrase>content generation algorithm</phrase> for internal purposes).</p>
<p>Suppose, for instance, that an organization is using subject-domain annotations to drive linking as described in <citation type = "nameref" value = "chapter.linking"/>. Every topic in the collection is supposed to be indexed to state the type and names of the subjects it covers. Every mention of a significant subject is supposed be annotated with its type. The <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> uses these annotations and index entries to link the content without any need for writers to create or manage links in the source text. But that does not guarantee that all the right links get made. There could be errors in indexing or annotation that are impossible to detect when <phrase><annotation type="process">conformance</annotation></phrase> testing individual topics. But you can do an awful lot to catch these kinds of errors when you audit the content set as a whole.</p>
<p>These are some of the audit functions we can perform based on the annotations and index entires in a content set:</p>
<ul>
<li>
<p>We can create a sorted list of all the phrases that have been annotated and see if they are being annotated consistently. This will tell us a lot about the subject types we are using, how well they are understood, and what instances of each type we should be covering.</p>
</li>
<li>
<p>We can create a list of all the phrases that have been indexed and check it against our content plan (perhaps against a <phrase><annotation type="concept">taxonomy</annotation></phrase>, if we have one). This will tell us a lot about whether our coverage is complete, whether our writers are getting off track, or whether our <phrase>content plan</phrase> or our taxonomy is off base with reality.</p>
</li>
<li>
<p>We can create a sorted list of all the index terms and check it against the list of annotated phrases to find phrases are that being indexed but not annotated or annotated but not indexed. This can tell us is there are subjects we are not covering, if writers are discussing subjects they should not be, or if some topics are not being indexed or annotated properly.</p>
</li>
<li>
<p>During the content development phase, the list of things that are annotated but not indexed will inevitable grow, as subjects are being referred to before the content that describes them is written. The trend line of the growth of new subjects being annotated vs subjects being indexed will allow you to track how close a content set is to completion, even in cases were defining the boundaries in advance is difficult.</p>
</li>
</ul>
<p>Content is one of the hardest assets to audit and inventory. Structured writing, particularly subject domain structured writing, can greatly aid in establishing an effective audit function for your content. An effective content audit process, in turn, can help avoid the gradual decline of order and reliability that affects so many managed content sets and leads to the slow death by strangulation of so many content management systems.</p>
</section>
<!--  FIXME: Needs an example audit report. Generate one for the book to illustrate the idea. -->
</chapter>
