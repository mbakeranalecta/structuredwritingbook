<?xml version="1.0" encoding="UTF-8"?>
<chapter name ="chapter.single-sourcing">
<title>Single Sourcing</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>single sourcing</term>
</record>
</index>
<p>One of the sources of complexity in content creation and delivery is that you sometimes want to publish the same document in more than one media. These days that usually means on paper and on the Web. Publishing the same document to more than one media is generally called single sourcing.<citation type = "idref" value = "1"/></p>
<footnote id ="1">
<p>The term “single sourcing” gets used to mean different things, all of which involve a single source in one way or another, but which use different approaches and achieve different ends. I will look at a number of variation on this theme in subsequent chapters.</p>
</footnote>
<p>Single sourcing adds complexity to the notion of separating content from formatting because we are now separating the content from not one but two or more sets of formatting. In other words, we are not simply separating content from a particular set of formatting but from a set of decisions about formatting so that we can decide differently for two different media. If you do not get the partitioning of content and formatting correct, it will show up when your try to apply two different sets of formatting to the same content.</p>
<p>This is an area in which many organizations have unhandled complexity which is falling through to their readers. Their authoring techniques do not allow them to sufficiently separate the content from all of the formatting that is appropriate in different media, resulting in their delivering one media’s formatting to a different media. This means the content does not work as well in the media it was not designed for. By improving how we separate content from formatting, though, we can significantly reduce the amount of complexity that goes unhandled, resulting in a better experience for our readers.</p>
<section>
<title>Basic single sourcing</title>
<p>The basic single sourcing algorithm is straightforward and we have covered most of it already in <citation type = "nameref" value = "chapter.processing"/>.</p>
<p>Basic single sourcing involves taking a piece of content in the <phrase><annotation type="concept">document domain</annotation></phrase> and processing its document domain structures into different <phrase><annotation type="concept">media domain</annotation></phrase> structures for each of the target media.</p>
<p>Suppose we have a recipe recorded in the document domain:</p>
<codeblock language ="sam">
page: 
    title: Hard Boiled Eggs
    
    A hard boiled egg is simple and nutritious. 
    Prep time, 15 minutes. Serves 6.
    
    section: Ingredients
        ul:
            li: 12 eggs
            li: 2qt water
    
    section: Preparation
        ol:
            li: Place eggs in pan and cover with water.
            li: Bring water to a boil.
            li: Remove from heat and cover for 12 minutes.
            li: Place eggs in cold water to stop cooking.
            li: Peel and serve.
</codeblock>
<p>We can output this recipe to two different media by applying two different formatting algorithms. First we output to the Web by creating <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase>:</p>
<codeblock language ="pseudo">
match page
    create html
        stylesheet www.example.com/style.css
        continue
    
match title
    create h1
        continue
        
match p
    copy
        continue
        
match section
    continue
        
match section/title 
    create h2
        continue
        
match ul
    copy 
        continue
        
match ol
    copy
        continue

match li
    copy
        continue
</codeblock>
<p>In the code above, paragraph and list structures have the same names in the source format as they do in the output format (HTML) so we just copy the structures rather than recreating them. This is a common pattern in structured writing algorithms.</p>
<p>The above algorithm transforms our source into HTML that looks like the following:</p>
<codeblock language ="html">
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" type="text/css"
        href="//www.apache.org/css/code.css"&gt;
    &lt;/head&gt;
    
    &lt;h1&gt;Hard Boiled Eggs&lt;/h1&gt;
    
    &lt;p&gt;A hard boiled egg is simple and nutritious. 
    Prep time, 15 minutes. Serves 6.&lt;/p&gt;
    
    &lt;h2&gt;Ingredients&lt;/h2&gt;
    
    &lt;ul&gt;
        &lt;li&gt;12 eggs&lt;/li&gt;
        &lt;li&gt;2qt water&lt;/li&gt;
    &lt;/ul&gt;
        
    &lt;h2&gt;Preparation&lt;/h2&gt;
    
    &lt;ol&gt;
        &lt;li&gt;Place eggs in pan and cover with water.&lt;/li&gt;
        &lt;li&gt;Bring water to a boil.&lt;/li&gt;
        &lt;li&gt;Remove from heat and cover for 12 minutes.&lt;/li&gt;
        &lt;li&gt;Place eggs in cold water to stop cooking.&lt;/li&gt;
        &lt;li&gt;Peel and serve.&lt;/li&gt;
    &lt;/ol&gt;
&lt;/html&gt;
</codeblock>
<p>Outputting to paper (or to PDF, which is a kind of virtual paper) is more complex. On the Web, you output to a screen which is of flexible width and infinite length. The browser generally takes care of wrapping lines of text to the screen size (unless formatting commands tell it to do otherwise) and there is no issue with breaking text from one page to another. For paper, though, you have to format for a fixed size page. This means that formatting for paper involves fitting the content into a set of fixed size pages.</p>
<p>This leads to a number of formatting problems, such as:</p>
<ul>
<li>
<p>Where to break each line of text so the margins look neat and the text is not cramped or spread out too much.</p>
</li>
<li>
<p>How to avoid a heading appearing at the bottom of a page or the last line of a paragraph appearing as the first line of a page?</p>
</li>
<li>
<p>How do you handle a list or a table when you run out of space on the page for it?</p>
</li>
<li>
<p>How do you create a cross reference to the page on which a chapter starts or a figure appears when you don’t know the page number yet?</p>
</li>
</ul>
<p>Because of issues like this, you don’t write a formatting algorithm for paper directly, the way you would write an algorithm to output HTML. Rather, you use an intermediate typesetting system which already knows how to handle things like inserting page number references and handling line and page breaks. Rather than handling these things yourself, you tell the typesetting system how you would like it to handle them and then let it do its job.</p>
<p>One such typesetting system is <phrase><annotation type="language">XSL-FO</annotation></phrase> (Extensible Stylesheet Language - Formatting Objects). Other typesetting systems you can use for print output include <phrase><annotation type="language">TeX</annotation></phrase> and later versions of <phrase><annotation type="language">CSS</annotation></phrase>. XSL-FO is a typesetting language written in <phrase><annotation type="language">XML</annotation></phrase>. To format your content using <phrase><annotation type="language">XSL-FO</annotation></phrase>, you transform your source content into <phrase><annotation type="language">XSL-FO</annotation></phrase> markup, just the way you transform it into <phrase><annotation type="language">HTML</annotation></phrase> for the Web. But then you run the <phrase><annotation type="language">XSL-FO</annotation></phrase> markup through an <phrase><annotation type="language">XSL-FO</annotation></phrase> processor to produce your final output, such as <phrase><annotation type="language">PDF</annotation></phrase>.</p>
<p>Here is a small example of XSL-FO markup:</p>
<codeblock language ="XSL-FO">
&lt;fo:block space-after="4pt"&gt;
   &lt;fo:wrapper font-size="14pt" font-weight="bold"&gt;
     Hard Boiled Eggs
   &lt;/fo:wrapper&gt;
&lt;/fo:block&gt;
</codeblock>
<p>As you can see, the <phrase><annotation type="language">XSL-FO</annotation></phrase> code contains a lot of specific <phrase><annotation type="concept">media domain</annotation></phrase> instructions for spacing and font choices. The division between <phrase><annotation type="language">HTML</annotation></phrase> for basic structures and <phrase><annotation type="language">CSS</annotation></phrase> for specific formatting does not exist here. Also note that as a pure media-domain language, XSL-FO does not have document domain structures like paragraphs and titles. From its point of view, a document consists simply of a set of blocks with specific formatting properties attached to them.</p>
<p>Because of all this detail, I am going to show the literal <phrase><annotation type="language">XSL-FO</annotation></phrase> markup in the pseudocode of the algorithm, and I am not going to show the algorithm for the entire recipe. (The point is not for you to learn <phrase><annotation type="language">XSL-FO</annotation></phrase> here, but to understand how the single-sourcing algorithm works.)</p>
<codeblock language ="pseudo">
match title
    output '&lt;fo:block space-after="4pt"&gt;'
        output '&lt;fo:wrapper font-size="14pt" font-weight="bold"&gt;'
            continue
        output '&lt;/fo:wrapper&gt;'
    output '&lt;/fo:block&gt;'
</codeblock>
<p>Here, as you can see, the rule simply wraps the XSL-FO formatting structures around the text of the title. It unpacks the text from a <phrase><annotation type="concept">document domain</annotation></phrase> structure and inserts it into a <phrase><annotation type="concept">media domain</annotation></phrase> structure.</p>
</section>
<section>
<title>Differential single sourcing</title>
<p>Basic <phrase><annotation type="algorithm">single sourcing</annotation></phrase> outputs the same document presentation to different media. But each media is different, and what works well in one media does not always work as well in another. For example, online media generally support <phrase><annotation type="concept">hypertext</annotation></phrase> links, while paper does not. Let’s suppose that we have a piece of content that includes a link.</p>
<codeblock>
In Rio Bravo, {the Duke}(link "http://JohnWayne.com") 
plays an ex-Union colonel out for revenge.
</codeblock>
<p>In SAM syntax, the piece of markup represented by <code>"http://JohnWayne.com"</code> specifies the address to link to. In the algorithm examples below, this markup is referred to as the “specifically” attribute using the notation <code>@specifically</code>.</p>
<p>In HTML we want this output as a link using the HTML <code>a</code> element, so we write the algorithm like this:</p>
<codeblock>
match p
    copy
        continue

match link
    create a
        attribute href = @specifically 
        continue
</codeblock>
<p>The result of this algorithm is:</p>
<codeblock language ="html">
&lt;p&gt;In Rio Bravo, &lt;a href="http://JohnWayne.com"&gt;The Duke&lt;/a&gt;
plays and ex-Union colonel out for revenge.
&lt;/p&gt;
</codeblock>
<p>But suppose we want to output this same content to paper. If we output it to PDF, we could still create a link just like we do in HTML, but if that PDF is printed, all that will be left of the link will be a slight color change in the text and maybe an underline. It will not be possible for the reader to follow the link or see where it leads.</p>
<p>Paper can’t have active links but it can print the value of a URL so that reader can type it into a browser if they want to. An algorithm could do this by printing the link inline or as a footnote. Here is the algorithm for doing it inline. (We’ll dispense with the complexity of XSL-FO syntax this time.)</p>
<codeblock language ="pseudo">
match p
    create fo:block
        continue
        
match link
    continue
    output " (see: "
    output @specifically
    output ") "
</codeblock>
<p>This will produce:</p>
<codeblock language ="xml">
&lt;fo:block&gt;
In Rio Bravo, the Duke (see: http://JohnWayne.com) 
plays an ex-Union colonel out for revenge.
&lt;/fo:block&gt;
</codeblock>
<p>This works, but we should note that the effect is not exactly the same in each media. Online, the link to JohnWayne.com serves to disambiguate the phrase “The Duke” for those readers who do not recognize it. A simple click on the link will explain who “the Duke” is. But in the paper example, such disambiguation exists only incidentally, because the words “JohnWayne” happen to appear in the URL. This is not how we would disambiguate “The Duke” if we were writing for paper. We would be more likely to do something like this:</p>
<blockquote>
<p>The Duke (John Wayne) plays an ex-Union colonel.</p>
</blockquote>
<p>This provides the reader with less information, in the sense that it does not give them access to all the information on JohnWayne.com, but it does the disambiguation better and in a more paper-like way. The loss of the reference to JohnWayne.com is probably not an issue here. Following that link by typing it into a browser is a lot more work than simply clicking on it on a Web page. If someone reading on paper wants more information on John Wayne they are far more likely to type “John Wayne” into Google than type “JohnWayne.com” into the address bar of their browser.</p>
<p>With the source content written as it is, though, there is no easy way to produce this preferred form for paper. The content is in the <phrase><annotation type="concept">document domain</annotation></phrase> and the document domain specifies the presentation of the content. It is therefore not a neutral format between different media that require different forms of presentation. The choice to specify a link gives it a strong bias towards the Web and online media rather than paper. A <phrase><annotation type="concept">document domain</annotation></phrase> approach that favored paper would similarly lead to a poorer online presentation that omitted the link.</p>
<p>What we need to address the problem is a differential approach to single sourcing, one that allows us to differ not only the formatting but the presentation of the content for different media.</p>
<p>One way to accomplish this differential single sourcing is to record the content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, thus removing the prejudice of the document domain presentation for one class of media or another. Here is how this might look:</p>
<codeblock language ="sam">
{The Duke}(actor "John Wayne") plays an ex-Union colonel.
</codeblock>
<p>In this example, the phrase “The Duke” is annotated with a subject domain annotation that clarifies exactly what the text refers to. That annotation says that “the Duke” is the name of an actor, specifically “John Wayne”.</p>
<p>Our document domain examples attempted to clarify “the Duke” for readers, but did so in media-dependent ways. This subject domain example clarifies the meaning of “The Duke” in a presentation-neutral way by explicitly marking up what the phrase refers to in a formal and unambiguous way. This disambiguation is not written for readers, however. It is written for algorithms.  This allows an algorithm to generate a media-appropriate clarification for the reader in the target media.</p>
<p>For paper:</p>
<codeblock>
match actor
    continue
    output " ("
    output @specifically
    output ") "
</codeblock>
<p>For the Web:</p>
<codeblock>
match actor
    create link
        $href = get link for actor named @specifically
        attribute href = $href
        continue
</codeblock>
<p>This supposes the existence of a system that can respond to the <code>get link</code> instruction and look up pages to link to based on the type and a name of a subject. We will look at how a system like that works in <citation type = "nameref" value = "chapter.linking"/>, which will revisit this example in more detail.</p>
</section>
<section>
<title>Differential organization and presentation</title>
<p>Differences in presentation between media can be broader than this. Paper documents sometimes use complex tables and elaborate page layouts that often don’t translate well to online media. Effective table layout depends on knowing the width of the page you have available, and online you don’t now that. A table that looks great on paper may be unreadable on a mobile device, for instance.</p>
<p>And this is more than a layout issue. Sometimes the things that paper does in a static way should be done in a dynamic way in online media. For example, airline or train schedules have traditionally been printed as timetables on paper, but you will virtually never see them presented that way online. Rather, there will be an interactive travel planner that lets you choose your starting point, destination, and desired travel times and then presents you with the best schedule, including when and where to make connections.</p>
<p>Single sourcing your timetable to print and PDF will not produce the kind of online presentation of your schedule that people expect, and that can have a direct impact on your business.</p>
<p>To single source schedule information to paper and online, you can’t maintain that content in a document domain table structure. You need to maintain it in a timetable database structure (which is <phrase><annotation type="concept">subject domain</annotation></phrase>, but really looks like a database, not a document at all).</p>
<p>An algorithm can then read the database to generate a document domain table for print publication. For the Web, however, you will create a web application that queries the database dynamically to calculate routes and schedules for individual travelers.</p>
<!--  pix of timetable and routing widget ??? -->
<p>In this scenario, you are moving content to the <phrase><annotation type="concept">subject domain</annotation></phrase> to partition the presentation from the information so that you can produce a different information design in different media.</p>
<insert item ="../graphics/Differential.xml" type ="image"/>
<p>We will examine these scenarios in more depth in <citation type = "nameref" value = "chapter.wide"/>.</p>
</section>
<section>
<title>Conditional differential design</title>
<p>You can also do differential single sourcing by using conditional (<phrase><annotation type="concept">management domain</annotation></phrase>) structures in the document domain.</p>
<p>For instance, if you are writing a manual that you intend to single source to a help system, you might want to add context setting information to the start of a section when it appears in the help system. The manual may be designed to be read sequentially, meaning that the context of individual sections is established by what came before. But help systems are always accessed randomly, meaning that the context of a particular help topic may not be clear if it was single sourced from a manual. To accommodate this, you could include a context setting paragraph that is conditionalized to appear only in help output:</p>
<codeblock language ="sam">
section: Wrangling left-handed widgets

    ~~~(?help-only)
    
        Left-handed widgets are used when wrangling 
        counter-clockwise.
        
    To wrangle a left handed widget:
    
    1. Loosen the doohickey using a medium thingamabob.
    2. Spin three times around under a full moon.
    3. Touch the sky.            
</codeblock>
<p>In the SAM markup above, the <code>~~~</code> creates a “fragment” structure to which conditional tokens can be applied. Content indented under the fragment marker is part of the fragment.</p>
<p>To output a manual, we suppress the help-only content:</p>
<codeblock language ="pseudo">
match fragment where conditions = help-only
    ignore
</codeblock>
<p>To output help, we include it:</p>
<codeblock language ="pseudo">
match fragment where conditions = help-only
    continue
</codeblock>
</section>
<section>
<title>Primary and secondary media</title>
<p>While there is a lot you can do in the way of differential single sourcing to successfully output documents that work well in multiple media, there are limits to how far this approach can take you.</p>
<p>Books are a linear media in which one chapter follows another in order. The Web is a <phrase><annotation type="concept">hypertext</annotation></phrase> media in which Every Page is Page One. Readers arrive by search and navigate by following hypertext links. The linear and hypertext approaches are fundamentally different ways of writing which invite fundamentally different ways of navigating and using information.<citation type = "idref" value = "eppo"/> Even moving content to the <phrase><annotation type="concept">subject domain</annotation></phrase> as much as possible will not entirely factor out these fundamental differences of approach.</p>
<footnote id ="eppo">
<p>For a full examination of the differences, see my book <phrase><annotation type="citetitle">Every Page is Page One: Topic-based Writing for Technical Communication and the Web</annotation></phrase>.</p>
</footnote>
<p>When single sourcing content to both linear paper-like media and <phrase><annotation type="concept">hypertext</annotation></phrase> web-like media, you will generally have to choose a primary media to write for. Single sourcing that content to the other media will be on a best-effort basis. It may be good enough for a particular purpose, but it will never be quite as good as it could have been had you designed for that media.</p>
<p>Many of the tools used for single sourcing have a built in bias towards one media or another. Desktop-publishing tools like <phrase><annotation type="tool">FrameMaker</annotation></phrase>, for instance, were designed for linear media. Online collaborative tools like <phrase><annotation type="tool">wikis</annotation></phrase> were designed for <phrase><annotation type="concept">hypertext</annotation></phrase> media. It is usually a good idea to pick a tool that was designed for the media you choose as your primary. Tools partition the complexity of content creation in a way that suits the primary media they are designed for.</p>
<p>In many cases, the choice of primary media is made implicitly based on the tools a group has traditionally been using. This usually means that the primary media is paper, and it often continues to be so even after the organization had stopped producing paper and their readers are primarily using online formats.</p>
<p>Some organizations seem to feel that they should only switch to tools that are designed primarily for online content when they have entirely abandoned the production of paper and paper-like formats such as PDF. This certainly does not need to be the case. It is perfectly possible to switch to an online-primary tools and still produce linear media as a secondary output format.</p>
<p>Changing your information design practices from linear paper based designs to <phrase><annotation type="concept">hypertext</annotation></phrase> designs is non-trivial, but such designs better suit the way many people use and access content today. I discuss these design differences in depth in my book, <phrase><annotation type="citetitle">Every Page is Page One: Topic-based Writing for Technical Communication and the Web</annotation></phrase> Don’t expect single sourcing to successfully turn document-oriented design into effective hypertext by themselves. To best serve modern readers it will usually be much more effective to adopt an <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> approach to information design and use structured writing techniques to do a best-effort single sourcing to linear media for those of your readers who still need paper or paper-like formats – or for those documents where linear organization still makes sense.</p>
</section>
<section>
<title>Responsive Design</title>
<p>Responsive design, an approach to web design in which a page automatically adjusts to the viewport it is displayed on, is a form of differential single sourcing. Many attempts at responsive design are not as responsive as we would like them to be because the content is not stored in a source format that allows a sufficient degree of differential presentation. Effectively, responsive design allows an algorithm to decide on the fly how to organize and present content as the viewport changes, and like all deferred decisions, it is only as good as the information communicated to it. If you want to achieve effective and consistent responsive design in your output, you will find that the use of <phrase><annotation type="concept">subject domain</annotation></phrase> structures in your content will be enormously helpful in capturing and transferring the information required to make these decision on the fly.</p>
<p>It is very difficult to expect writers to encode the presentation structures of a responsive design into their files as they write. Not only that, the very idea of responsive design should take into account the possibility of having to respond to new media in the future. Every sound responsive design decision is based on the appropriate organization of subject matter in a particular view port. Therefore, the rules of effective responsive design are going to be expressed in subject matter terms. The best way to create content that will presented using responsive design, therefore, is in the <phrase><annotation type="concept">subject domain</annotation></phrase> where the subject matter divisions on which responsive design rules are expressed are made fully explicit in the content. We will look at this in more depth in <citation type = "nameref" value = "chapter.active"/>.</p>
</section>
</chapter>
