<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.timeliness">
<title>Timeliness</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept">affordances</annotation></phrase> <phrase><annotation type="concept">AI</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">apps</annotation></phrase> <phrase><annotation type="concept" specifically="block-and-map architecture">block and map architecture</annotation></phrase> <phrase><annotation type="concept">block-and-map architecture</annotation></phrase> <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up architecture</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content engineering</annotation></phrase> <phrase><annotation type="concept">content hygiene</annotation></phrase> <phrase><annotation type="concept">content plan</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">curse of knowledge</annotation></phrase> <phrase><annotation type="concept">desktop publishing system</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">Duplication</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">filtering</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept" specifically="information architecture">information architectures</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information scent</annotation></phrase> <phrase><annotation type="concept">information snacking</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> <phrase><annotation type="concept">information-typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management domains</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">Management domains</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase> <phrase><annotation type="concept">markup language</annotation></phrase> <phrase><annotation type="concept">markup</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media domains</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">namespace</annotation></phrase> <phrase><annotation type="concept">natural language processing</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">out-of-band communication</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">profiling</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical quality</annotation></phrase> <phrase><annotation type="concept">rhetorical structure</annotation></phrase> <phrase><annotation type="concept" specifically="rhetoric">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">schema language</annotation></phrase> <phrase><annotation type="concept" specifically="schema">Schemas</annotation></phrase> <phrase><annotation type="concept" specifically="schema">schemas</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">social networks</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">stop list</annotation></phrase> <phrase><annotation type="concept">structural block</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style guide</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">Subject</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology management</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">vector graphics</annotation></phrase> <phrase><annotation type="concept">web publishing</annotation></phrase> <phrase><annotation type="concept">Wikipedia</annotation></phrase> <phrase><annotation type="concept">workflow</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase> <phrase><annotation type="concept">glyphs</annotation></phrase> <phrase><annotation type="concept" specifically="hierarchical information architecture">hierarchical information architectures</annotation></phrase></p>
<p>Markup Languages</p>
<p><phrase><annotation type="markup-language">ASCIIDOC</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">CommonMark</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="markup-language">GitHub flavored Markdown</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML5</annotation></annotation></phrase> <phrase><annotation type="markup-language">JavaDoc</annotation></phrase> <phrase><annotation type="markup-language">LaTeX</annotation></phrase> <phrase><annotation type="markup-language">Lightweight DITA</annotation></phrase> <phrase><annotation type="markup-language">Markdown</annotation></phrase> <phrase><annotation type="markup-language">mathml</annotation></phrase> <phrase><annotation type="markup-language">reStructuredText</annotation></phrase> <phrase><annotation type="markup-language">SAM</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">SGML</annotation></annotation></phrase> <phrase><annotation type="markup-language">TeX</annotation></phrase> <phrase><annotation type="markup-language">vCard</annotation></phrase> <phrase><annotation type="markup-language">Wiki markup</annotation></phrase> <phrase><annotation type="markup-language">XLIFF</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XHTML</annotation></annotation></phrase></p>
<p>Schema languages</p>
<p><phrase><annotation type="schema-language">XSD</annotation></phrase> <phrase><annotation type="schema-language" specifically="XSD">XML schema</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="programming-language">cascading style sheets</annotation></phrase> <phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase> <phrase><annotation type="language-language">XSL-FO</annotation></phrase> <phrase><annotation type="programming-language">XSLT</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">Assemble from Pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">assemble from pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audits</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm" specifically="collaboration">collaborate</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance-checking algorithm</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="algorithm">content generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content generation</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content-generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">eliminating duplication</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithms</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting algorithms</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content from formatting">separation of content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool" specifically="API documentation tool">API documentation tools</annotation></phrase> <phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="component content management system">CCMS</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">component content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing</annotation></phrase> <phrase><annotation type="tool">desktop publishing system</annotation></phrase> <phrase><annotation type="tool">DITA CMS</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool" specifically="formatting language">formatting languages</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting software</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">GitHub</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Jekyll</annotation></phrase> <phrase><annotation type="tool">Liquid</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool" specifically="search engine">Search engines</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">SPFE Open Tool Kit</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool" specifically="static site generator">static site generators</annotation></phrase> <phrase><annotation type="tool">structured editor</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">validator</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> <phrase><annotation type="tool">WordPerfect</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool" specifically="XML editor">XML editors</annotation></phrase> <phrase><annotation type="tool">XML editor</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">wikis</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">Wikis</annotation></phrase> <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> <phrase><annotation type="tool">word processor</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role" specifically="content engineer">content engineers</annotation></phrase> <phrase><annotation type="role">content strategist</annotation></phrase> <phrase><annotation type="role" specifically="content strategist">content strategists</annotation></phrase> <phrase><annotation type="role">document designer</annotation></phrase> <phrase><annotation type="role" specifically="document designer">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role" specifically="information architect">information architects</annotation></phrase> <phrase><annotation type="role">prepress operator</annotation></phrase> <phrase><annotation type="role">publication designer</annotation></phrase> <phrase><annotation type="role" specifically="publication designer">publication designers</annotation></phrase> <phrase><annotation type="role" specifically="subject matter expert">subject matter experts</annotation></phrase> <phrase><annotation type="role" specifically="terminologist">terminologists</annotation></phrase> <phrase><annotation type="role">terminologist</annotation></phrase> <phrase><annotation type="role">typesetter</annotation></phrase> <phrase><annotation type="role">webmaster</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>People <phrase><annotation type="person">Donald Knuth</annotation></phrase> <phrase><annotation type="person">Gutenberg</annotation></phrase> <phrase><annotation type="person">Henry Ford</annotation></phrase> <phrase><annotation type="person">John Gruber</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">fragment</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">map</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure" specifically="rhetorical block">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure" specifically="table">tables</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure" specifically="topic">topics</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">books</annotation></phrase> <phrase><annotation type="media">CD-ROM</annotation></phrase> <phrase><annotation type="media">ebooks</annotation></phrase> <phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Interactive Electronic Technical Manuals</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase></p>
</annotations>
<index>
<title>type, term</title>

<p>concept, timeliness algorithm, timeliness</p>
</index>
<p>Information changes quickly these days, and readers no longer have any patience with outdated content. However, it is difficult to ensure that content is always timely.</p>
<ul>
<li>
<p>How do you detect when content is out of date?</p>
</li>
<li>
<p>How do you push updated content to readers quickly?</p>
</li>
<li>
<p>How do you make sure updates in one place don’t break content in another place?</p>
</li>
</ul>
<p>These are all sources of complexity both in the content process and in many of the algorithms we have already looked at. If the partitioning and redirection of complexity is poor in any of these algorithms, or if the algorithms leak complexity by not fully and appropriately handling the responsibilities assigned to their partition, this will reduce your ability to deliver in a timely fashion.</p>
<p>Traditional paper <phrase><annotation type="algorithm">publication</annotation></phrase> could endure inefficient processes because publication was a rare event. Indeed, publication was treated like a wedding day. All the effort and coordination of the preceding months went into making that day work, and normal life ceased several days before the event. The complexity of preparing for and then executing the events of the day was enormous and was tolerable only because publication was rare.</p>
<p>For modern <phrase><annotation type="concept">web publishing</annotation></phrase>, a wedding-day model of publication is untenable. Publication must be simple and quick, because every day is publication day. You cannot treat every day like a wedding day, with weeks of elaborate preparation. Instead, you need to maintain your systems and your content in a constant state of readiness to publish. If you attempt frequent publication without correctly partitioning and distributing complexity in your content, much of the complexity will get dumped on the reader in the form of outdated, inaccurate, or inconsistent content. Structured writing helps you address all of these issues.</p>
<section>
<title>Algorithms and timeliness</title>

<p>Timeliness rests on executing the entire content process – from ideas in a writer’s head to dots on a page or screen in front of a reader – in the shortest time possible, while maintaining <phrase><annotation type="algorithm">quality</annotation></phrase>. Thus, all of the structured writing algorithms contribute to timeliness.</p>
<pagination-tweak>
<min-space>1in</min-space>
</pagination-tweak>
<ll>
<li>
<label><phrase><annotation type="algorithm" specifically="separating content form formatting">Separating content from formatting</annotation></phrase></label>

<p>Formatting content by hand takes time and is subject to unintended variation through human error. If you want to publish quickly and with consistent formatting, you need to factor out the formatting from the content and hand the formatting to an algorithm. This will allow you to shorten the time it takes to publish by making formatting and output virtually instantaneous. It also helps speed up the writing process and improve content quality because writers don’t have to divide their attention between writing and formatting. However, you need to ensure that the structures you create to factor out formatting are not more complicated than the structures they replace.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Single sourcing</annotation></phrase></label>

<p>If you deliver content to multiple media, you need to avoid having to prepare content separately for each output. The less you have to manipulate content for each output, the better. A <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> approach helps ensure high quality in each medium without slowing down the publishing process.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="content reuse algorithm">Content reuse</annotation></phrase></label>

<p>Content reuse can improve timeliness. If you can create a new piece of content by pulling in pieces of existing content, you may be able to publish faster. However, be careful; do not assume that this is an automatic win. The reuse process takes time. A lot of its payoff comes from avoiding re-<phrase><annotation type="algorithm">translation</annotation></phrase> of content, not from reducing end-to-end authoring time. Complex reuse systems also require writers to be conversant with the tools and the content set (so they can find reusable content efficiently). The availability of writers with these skills may affect your ability to move quickly. Reuse can improve timeliness, under the right circumstances, but don’t forget that simplicity is a virtue when you need to act quickly.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Eliminating duplication</annotation></phrase></label>

<p>Maintaining a <phrase><annotation type="algorithm">single source of truth</annotation></phrase> can be a huge win for timeliness – if you can achieve it. If you can ensure that there is only one source for a particular truth (however you define truth for this purpose), then you can simply deliver content from that source when and where it’s required.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="linking algorithm">Linking</annotation></phrase></label>

<p>One of the most challenging aspects of adding and removing content is managing the links. New content should link to any relevant content in the current content set, and current content should link to any relevant new content. When you remove content, all links to that content should be updated, either to remove the link or to link to something else. Any structured writing approach that manages links will help, but the most efficient way to deal with this challenge is to use the soft-linking approach detailed in <citation nameref="chapter.linking"/>.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Publishing</annotation></phrase></label>

<p>Automating publication can allow you to release content more quickly. This is particularly important if you need to release content to multiple media or if you have made changes that affect multiple pieces of content. Continuous publication requires your publishing processes to be mostly hands off and highly reliable. Merely automating the publishing build does little for you if your output requires extensive manual quality assurance. You need to build reliability into your content and processes from the beginning so that you can confidently press the publication button without needing to look at the output.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase></label>

<p>Changes to subject matter don’t just affect individual pieces of content. They affect the overall information architecture. If you know that your content is going to change on a regular basis, it makes sense to create an information architecture that is highly adaptable to change. Many of the artifacts that implement your architecture – the links, lists, categories, and menus that shape the structure and navigation of your content – can be generated with algorithms based on existing metadata (particularly in the subject domain). The more you use algorithms to generate these artifacts, the easier it will be to adapt your architecture to changes in subject matter or business requirements.</p>
<p>However, this is not just about structured writing. It is also about an approach to architecture that allows for algorithmic generation of the architectural pieces of your content set. A bottom-up information architecture is particularly effective at handling rapid and constant change. Implementing a bottom-up architecture, which relies heavily on well-structured topics connected by rich linking, benefits enormously from structured writing techniques. By changing the way content is organized and linked, these techniques can allow you to add and remove individual pages from a content set without fear of breaking things.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="extract algorithm">Extract</annotation></phrase></label>

<p>The extract algorithm is not just a great shortcut for generating content, it is also a great way to keep up with changes in the real world. If the data source you draw content from is updated, repeating the extraction and republishing brings your content up to date. You can also run the extract algorithm dynamically, pulling content from the source when a reader requests it. If you have a fully automated publishing process that does not require any user intervention, you can effectively publish live data right out of the source file.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="merge algorithm">Merge</annotation></phrase></label>

<p>In many cases the <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> algorithm works with the <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> algorithm to combine content your team has written with content extracted from an external source. In this case, you can track changes in the external source to flag when your local content needs to change.</p>
</li>
</ll>
</section>
<section>
<title>Process and timeliness</title>

<p>As with algorithms, your processes must be working well to maintain quality and provide timely delivery.</p>
<ll>
<li>
<label><phrase><annotation type="algorithm" specifically="content management algorithm">Content management</annotation></phrase></label>

<p>Every change in your content set is a content management action. Unless you design your system carefully, the cost of each content management action will increase as your content set grows, because each action must account for its impact on more and more resources. Using structured writing techniques to automate aspects of content management can help keep the cost of content management from escalating and make each content management action easier and more reliable.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Collaboration</annotation></phrase></label>

<p>Collaboration can improve the timeliness of content by making more writers available to contribute content and by moving content creation closer to the source of information changes. Structured writing can be a double-edged sword when it comes to collaboration. Automating publishing and implementation of information architecture, makes it easier to coordinate the efforts of multiple contributors. By supporting composability, structured writing can help ensure that the contributions of different collaborators work well together. And by enforcing content constraints, it can help ensure that all contributors create content that does the job it is supposed to do. However, many structured writing systems are difficult to learn and use, making it difficult for collaborators to contribute. They can also be expensive, making it uneconomical to include occasional contributors as writers. Both of these problems can be avoided by focusing on the functional lucidity of your structures and markup, which not only avoids the heavy learning curve of structured writing but also removes the need for complex editing tools.</p>
</li>
<li>
<label><phrase><annotation type="algorithm" specifically="auditing algorithm">Auditing</annotation></phrase></label>

<p>A huge part of timeliness is knowing when you need new content or edits to old content. The world changes all the time, but unless you have an efficient way to determine the  impact of changes on your content set, you can’t respond to them in a timely manner. Taking a structured writing approach to auditing, as outlined in <citation nameref="chapter.audit"/>, can help ensure that you always know when changes need to be made and that you can always find the content that needs to be changed.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Change management</annotation></phrase></label>

<p>Although the <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> algorithm will alert you to the need for changes, you still need to manage the execution of those changes in such a way that they happen quickly and without compromising quality. Using structured writing techniques to facilitate change management can help ensure that you can make the required changes quickly and reliably.</p>
</li>
<li>
<label><phrase><annotation type="algorithm">Repeatability</annotation></phrase></label>

<p>Repeatability is key to timely delivery. Repeatability is the ability to make sure that you are doing the same thing every time. If your processes don’t support repeatability, you can’t deliver quickly without the risk of introducing variability into your content and compromising its quality.</p>
</li>
</ll>
<p>The way you select and integrate the other structured writing algorithms and processes has a big impact on your ability to deliver in a timely fashion. Optimizing pieces individually may not give you the time savings you are looking for or may not maintain your quality standards. You need to carefully consider where bottlenecks can occur in your overall process and identify any points in the chain where complexity may go unhandled and end up being dumped on readers.</p>
<p>Although your content structure design activities depend mostly on the specific algorithms you want to support, you also need to consider how those structures and algorithms affect the timeliness and quality of the entire process. For example, complex <phrase><annotation type="concept">document-domain</annotation></phrase>/<phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> structures may save time by avoiding duplicate work, but you need to consider the time it takes writers to use these features and any quality traps that lurk in their use.</p>
<p>You also need to consider whether such features leave you overly dependent on writers with specialized training. The most technically efficient system is of little value if the only person who can execute it is on vacation. All structured writing systems require special skills in certain key roles, but it pays to avoid setting up your system in a way that creates skill bottlenecks, especially for the skills required to execute quick content changes.</p>
<p>One of the key features of the <phrase><annotation type="concept">subject domain</annotation></phrase> is that subject-domain structures support multiple algorithms with the same markup. This can be an enormous benefit in ensuring timeliness. Not only does it simplify the writer’s job when changes need to be made quickly, it hands more of the management and production phases over to algorithms, which are always faster than people. It also means that content updates require no knowledge of the management systems, which helps avoid a skills bottleneck for content changes.</p>
</section>
</chapter>
