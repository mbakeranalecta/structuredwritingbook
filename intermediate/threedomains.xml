<?xml version="1.0" encoding="UTF-8"?>
<chapter name ="chapter.three-domains">
<title>How ideas become content</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conformant</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conforming</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance algorithm">conforms</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
<p><phrase><annotation type="language">XSL-FO</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>media domain</term>
</record>
<record>
<type>concept</type>
<term>document domain</term>
</record>
<record>
<type>concept</type>
<term>subject domain</term>
</record>
<record>
<type>concept</type>
<term>structured writing domains</term>
</record>
</index>
<p>An efficient structured writing system must consider the whole content creation process in order to distribute complexity appropriately without overloading anybody or letting any of the complexity slip through to fall on the reader. Let’s start, therefore, by looking at how content gets from ideas in a head to dots on a page or screen.</p>
<section>
<title>From ideas to dots</title>
<p>The process of creating and delivering content consists of translating ideas (stuff someone thinks or knows) into concrete physical form that can be read (dots or lines of ink on a page, or pixels on screen).</p>
<insert item ="../graphics/ideas2dots.xml" type ="image"/>
<p>Structured writing is about applying a structured methodology to that process. It is a long road from ideas to dots, and structured writing techniques can be applied at many points along that road. Almost all writing done today uses structured writing techniques to one extent or another. As this book will show, the basic principles of structured writing apply across the spectrum, from the tools and techniques used in most offices today, to most sophisticated structured writing systems. It is not a matter of unstructured vs structured approaches, but the type of structures used.</p>
<p>All writing has structure in the literary sense of the word. Every comprehensible sentence has a grammatical structure. You may even have learned to diagram that structure in school.</p>
<insert item ="../graphics/sentence.xml" type ="image"/>
<p>Just as all writing has at least a basic grammatical structure, all writing on a computer involves creating basic data structures. Thus the only case in which no structured writing techniques are involved in the writing process is when an author writes down their ideas with pen and paper, and gives that paper directly to the reader. In this case, the entire writing process, from an idea in the writer’s head to words on paper takes place in the writer’s head and any constraints that are imposed on the content are captured and imposed by the writer themselves as they inscribe their words with the pen.</p>
<insert item ="../graphics/ideas2dotsrecordend.xml" type ="image"/>
<p>It is rare for writers to record their ideas directly in the final physical form these days. For instance, the writer may write in a word processor, edit the text on screen, and press <phrase><annotation type="guibutton">Print</annotation></phrase> to send the content to a printer to create the final form that the reader receives. Or they may press <phrase><annotation type="guibutton">Send</annotation></phrase> and have the final form rendered on someone else’s monitor. The point at which the content is recorded, in the journey from ideas to dots, has been moved back just a little bit.</p>
<insert item ="../graphics/ideas2dotsrecordmid.xml" type ="image"/>
<p>Word processing, desktop publishing, and various approaches to structured writing all establish a point between ideas and dots where the content will be recorded, and then provide algorithms to complete the journey from that point to dots on a page.</p>
<insert item ="../graphics/ideas2dotsroles.xml" type ="image"/>
</section>
<section>
<title>Algorithms</title>
<p>I’m going to use the word <phrase><annotation type="concept">algorithm</annotation></phrase> a lot in this book. An algorithm is a formalized and consistent way to do something. Basically, if you give an algorithm the same inputs, it should always produce the same outputs every time it is is run. Computer software is an encoding of an algorithm that a computer can execute. A program describes an algorithm to a computer but you do not need to be a programmer to design an algorithm.</p>
<p>Algorithms are fundamental to structured writing. Algorithms and structures work together and you can’t design one without the other. The reason you add structure is to enable algorithms. The heart of this book is a description of the principal structured writing algorithms and the structures that support them. The structures exist to support the algorithms by constraining the content.</p>
<p>We also create structures to constrain the rhetoric of a document, but when we do so, we need algorithms to transform the rhetorically structured document into a form suitable for publication, so algorithm and structure still go hand in hand.</p>
<p>Algorithms apply rules to data that follows rules. If the data does not follow the rules, then the rules applied by the algorithms will not work. If you want algorithms to process your content, therefore, it has to follow the rules laid down for input to that Algorithm. If you want a browser to display your document, it needs to follow the rules of HTML. Structures constrain content to make sure it obeys the rules that the algorithms expect it to obey. But it is not sufficient to obey the rules, you also have to explicitly record that you have obeyed them. The algorithm uses that explicit recording to interpret the content so it can process it.</p>
<p>This leads us to a working definition of structured writing for purposes of this book:</p>
<blockquote>
<p>Structured writing is writing that follows a set of constraints and records that it has done so.</p>
</blockquote>
<p>For instance, let’s say that we have a constraint that every section must start with a title. We can follow this constraint in just about any tool we choose. We could even follow it when writing by hand on paper. But if we choose a structured writing format, such as <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase>, we can not only follow this constraint but record that we have followed it:</p>
<codeblock language ="xml">
&lt;section&gt;
    &lt;title&gt;The quick brown fox&lt;/title&gt;
    &lt;para&gt;The quick brown fox jumps over the lazy dog.&lt;/para&gt;
&lt;/section&gt;
</codeblock>
<p>This markup records that we have followed the constraint by identifying the title as the first thing in the section. This constrains the interpretation of the string “The quick brown fox” by algorithms. Algorithms can now do things such as:</p>
<ul>
<li>
<p>Check that all sections start with titles (that is, check that the constraint has been followed)</p>
</li>
<li>
<p>Format all section titles the same way</p>
</li>
<li>
<p>Create a list of all the section titles in the document (perhaps to create a table of contents)</p>
</li>
</ul>
<p>Recording the constraints that content follows is key to untangling and partitioning the complexity of content creation because it allows information to be passed reliably from one person or process to another.</p>
<p>Generally speaking, the more we constrain the creation and interpretation of content with structure, the more accessible it becomes to algorithms, and the more opportunities we gain to distribute complexity effectively. This means recording the content at a point nearer to ideas in the head and further from dots on a page. The nearer we are to ideas, the more we know about what the content says as opposed to what a page looks like, and the more effectively we can constrain the creation and interpretation of the text.</p>
<p>We can describe this process of earlier recording in terms of three domains, each domain reflecting a stage in the progress from ideas to dots. The domains are the media domain (which is concerned with lines and dots on paper or screen), the document domain (which is concerned with the expression and organization of documents), and the subject domain (which is concerned with the subject matter that we write about).</p>
</section>
<section>
<title>The three domains</title>
<p>Let’s suppose that an author is planning to write a recipe for chicken noodle soup. They start out with the idea of a soup made with chicken and noodles. This is an idea about the subject matter and not yet any form of content.</p>
<insert item ="../graphics/soup1.xml" type ="image"/>
<p>They then decide to give the dish the name “Chicken Noodle Soup.” They figure out which ingredients they want to use and how they want to make the dish. This is all information about making chicken noodle soup but it is not yet part of a document. It is information in the subject domain.</p>
<insert item ="../graphics/soup2.xml" type ="image"/>
<p>Then the author decides how they want to present this information to help other people make Chicken Noodle Soup. They decide they want to have a title, a picture, an introduction, a list of ingredients, and a set of preparation steps. They are no longer gathering information; now they are focused on how to present the information they have gathered. These are decision in the document domain. Documents are how we organize and present information. (As we will see, however, some document types, such as recipes, are highly specific to a particular subject, and there is a considerable overlap between document and subject domain considerations in their design, which may or may not be reflected in how they are recorded.)</p>
<insert item ="../graphics/soup3.xml" type ="image"/>
<p>Then the writer starts to think about how the document will look on screen or on paper. What font will be used for the heading and the body text. How large will the heading and the body be. Will the quantity of the ingredients be flush right? Will the be leading dots? Will the presentation steps be numberer or just presented sequentially?  How big will the picture be? Will the text wrap around it? These are decision in the media domain.</p>
<insert item ="../graphics/soup4.xml" type ="image"/>
<p>All content passes through the three domains. Content always begins with the author thinking about subjects in the real world. They then decide to express ideas about those subjects in words. They collect their ideas together and determine an order and structure to express them. Finally, they decide how they will be formatted in a particular media. The question is, where in this process does the author start recording the content?</p>
<p>Do they lay it all out in the formatted version as they write? Then they are working in the media domain.</p>
<insert item ="../graphics/soup5.xml" type ="image"/>
<p>Do they record the presentation units like lists, heading, and step without associating specific formatting to them? Then they are working in the document domain.</p>
<insert item ="../graphics/soup6.xml" type ="image"/>
<p>Do they record the raw information as data, for instance, recording each ingredient and its quantity as ingredients and quantities, rather than as list items? Then they are working in the subject domain.</p>
<insert item ="../graphics/soup7.xml" type ="image"/>
<p>If they recorded it in the media domain, it is ready to publish.</p>
<insert item ="../graphics/soup8.xml" type ="image"/>
<p>If they recorded it in the document domain, then it needs to be formatted before it can be published (and could potentially be formatted differently for different media or different publications).</p>
<insert item ="../graphics/soup9.xml" type ="image"/>
<p>If they recorded it in the subject domain, it needs to be organized into a document (and then formatted) before it can be published (but can potentially be organized into different kinds or documents or different collections).</p>
<insert item ="../graphics/soup10.xml" type ="image"/>
<p>At the beginning of this section I described the three domain in terms of the decisions that are made in each domain. All these decision, from all three domains,  have to be made for every document that you produce. The author who records content in the media domain is making decisions from all three domain as they write. The author who records content in the document domain is making decisions from the subject and document domains, but deferring media domain decisions to an algorithm. The author who records content in the subject domain is making subject domain decisions as they write and deferring document domain and media decisions to algorithms.</p>
<p>Recording content earlier in the process, therefore, reduces the number of decisions that author has to make while writing (reducing the complexity of the writing task), while preserving the ability to make different decisions later, which can have profound effects on the efficiency of your process and the usefulness of your content.</p>
<p>That is the promise of structured writing. However, it is not always as clear and simple as that makes it sound, since structured writing can introduce decision making requirements, and therefore complexity, of its own. In the next three chapters we will look at what it is like to write in each domain. In <citation type = "nameref" value = "part.algorithms"/> and <citation type = "nameref" value = "part.structures"/> we will look at the sources of complexity in structured writing itself and how best to manage them.</p>
</section>
</chapter>
