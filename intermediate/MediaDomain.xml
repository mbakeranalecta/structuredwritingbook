<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.media-domain">
<title>Writing in the Media Domain</title>
<index>
<row>
<type>concept</type>
<term>media domain</term>
</row>
<row>
<type>concept</type>
<term>document domain</term>
</row>
<row>
<type>concept</type>
<term>subject domain</term>
</row>
<row>
<type>concept</type>
<term>formatting algorithm</term>
</row>
<row>
<type>concept</type>
<term>presentation algorithm</term>
</row>
<row>
<type>concept</type>
<term>rendering algorithm</term>
</row>
</index>
<p>The media domain is the <phrase><annotation type="concept" specifically="structured writing domains">structured writing domain</annotation></phrase> in which the structures relate to the media in which the content is displayed. Such content is often considered “unstructured”, but all content has structure, and we can actually find all the patterns and techniques of structured writing in the media domain. This makes it a good place to study the fundamentals of <phrase><annotation type="concept">structured writing</annotation></phrase>.</p>
<p>At its most basic, a hand guiding the pen over paper or chisel into stone is working in the media domain through direct physical interaction with the media.</p>
<insert item="../graphics/handwritten.jpg" type="image"/>
<p>The closest you can get to pen and paper in the computer world is to use a paint program to directly place dots on the screen. You can select the pen tool and use your mouse or a stylus to write your text. This will record the text as a matrix of dots.</p>
<insert item="../graphics/handwritten-bitmap.xml" type="image"/>
<p>There is very little structure here. We are recording a pattern of dots. Those patterns of dots are text characters only in the sense that the patterns are recognizable as characters to the human eye. The computer has no idea they are characters.</p>
<p>This is a pretty inefficient way to write. You can work faster if you use the paint program’s text tool.</p>
<insert item="../graphics/typed-bitmap.xml" type="image"/>
<p>The text tool is our first step into structure. It partitions off the complexity of forming letter shapes from the task of writing letters and directs that complexity to an algorithm in the paint program, which does a better and more efficient job of it than the author does, as you can see from the much neater letter shapes in the sample above. However, those letters are still recorded as a set of dots, not as characters, so you can’t go back and edit your text as text, only as dots. The act of forming letter shapes has been partitioned off, but the partitioning in not maintained in how the content is recorded.</p>
<p>This failure to maintain the partitioning of complexity in how content is recorded is a problem you may encounter many times in structured writing. For example, some <phrase>wiki</phrase> systems allow you to define content templates but do not record the structure of the template in the resulting page. The ability to maintain the partitioning of complexity is one of the key features of a mature and reliable content system, and one that is often neglected in the name of using simpler tools.</p>
<p>To partition the complexity of forming and editing letter shapes completely, you need to move away from dots and start working in a program that records characters as characters. You could go to a text editor, but a text editor does not keep any formatting information (unless you create markup – but that would be getting ahead of ourselves). That would not be partitioning the letter shape complexity, but dropping it. For most publishing purposes, plain text is inadequate. We need to maintain the ability to format the document.</p>
<p>One type of program that lets us record text as text and also lets us attach formatting to the text is a vector graphic program. A vector graphics (or “draw”) program creates graphics as a collection of  objects (“vector” meaning the mathematical representation of a shape or line). For example, it allows you to create a circle as a shape, described mathematically in computer memory, rather than as a set of dots. Rather than recording an actual circle, the program records an abstraction of a circle: the essential properties needed to reproduce an actual circle on a media, such as its center, diameter, and line weight. In other words, it partitions all the complexity of circle drawing into the circle object. The computer then lets you manipulate that abstraction as an object, only rendering it as actual dots when the graphic is displayed on screen or paper.</p>
<figure id="objects-vs-dots">
<title>Objects vs. dots</title>
<insert item="../graphics/object-vs-dots.png" type="image"/>
<caption>
<p>A circle as an object, displayed in a vector graphics program (Inkscape), left, vs. a circle as a set of dots in a raster graphics program (Microsoft Paint), right.</p>
</caption>
</figure>
<p>In a typical vector graphics program, a shape is rendered into dots on screen instantly as you draw or edit the shape. Nonetheless, the computer is storing data describing the shape, not a circular pattern of dots, as it would in a paint program. This is an instance of what in structured writing is called “separating content from formatting”. The mathematical abstraction of a circle is the content; the dots that represent it on screen are the formatting, or rather, the result of applying formatting to the object.</p>
<p>By partitioning aspects of the content into a form that algorithms can work with, we can make it easier to create and manage the content. All the principles of structured writing are present in this basic piece of computer graphics.</p>
<section>
<title>Partitioning font information</title>
<p>Just as a vector graphics program represents a circle as a circle object, it represents text as a text object. A text object is a rectangular area that contains characters. It has numerous <phrase>media domain</phrase> properties, such as margins, background and foreground colors, the text string, and the font face, size, and weight used to display that text, as in this example from InkScape:</p>
<figure id="text-object">
<title>A vector graphics text object</title>
<insert item="../graphics/text-object.png" type="image"/>
<caption>
<p>A text object in a vector graphics program, with object properties shown.</p>
</caption>
</figure>
<p>A vector graphics program displays text in a chosen font. If you change the value of the text object’s font attribute, it will immediately redraw the text in the new font. Not only has the drawing of letter shapes been partitioned, but the partitioning had been preserved in the way the content has been recorded in the source file, meaning we can redraw the letter shapes as much as we like without editing the text.</p>
<p>The shapes of the individual letters in the font are required information for rendering the text object in the media domain. However, they are not stored as part of the text object. The representation of the text in the paint program includes the shape of the letters. In the vector graphics program it does not. That information has been partitioned out.</p>
<p>The shape of the letters (technically, “glyphs”) that make up the font are stored separately in font files. Font files consist of a set of shape objects that describe each glyph, together with metadata such as the name of the font and the name of each glyph. To actually display the text block on screen, the graphics program (or rather the graphics system API to which it delegates this task) combines information from the font file with information from the text object by matching the metadata to find the right font and character, and then drawing the appropriate glyph on the current media.</p>
<figure id="merge_text_and_font">
<title>Merging text and font information</title>
<insert item="../graphics/TextPlusFont.xml" type="image"/>
<caption>
<p>The vector graphic text object factors out letter shapes to a separate font file.</p>
</caption>
</figure>
<p>The font system represents a partitioning of the complexity of rendering formatted text that has been built into every modern operating system. By partitioning this complexity and transferring it to the operating system, the OS designers made it easier for every developer who wants their application to work with formatted text. Rather than programming font handling themselves, they simply call operating system APIs to do it for them. It also makes it much easier for anyone who wants to design fonts, since it partitions off the problems of installing fonts and making them available to applications. These are a particularly powerful example of partitioning and transferring complexity because they mean that the various sets of people, all working in the content domain – font-designers, tool-developers, and writers – no longer have to know anything about how the others work and no longer need to communicate or coordinate in order to make their individual contributions to the overall content delivery process.</p>
<p>This is a pattern we will see over and over again in the partitioning of content complexity. In order to simplify the objects that we create to store our content, we take part of the information needed to do the final rendering, and partition it to a separate file. By partitioning out information that is constant for a given application (the shape of a capital D is the same for all capital D’s for text in a given font), we simplify the format of the information we are preparing and keep the downstream presentation more consistent.</p>
<p>Designing a content structure, regardless of the domain you choose to work in, essentially consists of identifying the places in the content where we can partition out these invariant properties into separate structures.</p>
</section>
<section>
<title>Partitioning the complexity of pagination</title>
<p>Writing a document in a vector graphics program is certainly better than in a paint program, but you quickly run into a problem if you try to write a document that covers more than one page. A vector graphics program works purely in the media domain, and pretty much lets you put shapes and text boxes anywhere you like. This certainly allows you to create a new page whenever you need one, simply by creating a new drawing. But what happens when you want to edit the text and need to change how it flows from one page to the next? Pagination is a complex process, and we need a way to partition that complexity from the writing task and distribute it elsewhere, preferably to an algorithm.</p>
<p>Word processors and desktop publishing programs partition the pagination process from the writing process by introducing some document domain constraints. A document is made up of a series of pages that have margins and contain text flows. Text flows are made up of blocks (paragraphs, headings) inside of which text can flow, even from one page to the next. Common features like tables are supported as objects than can exist in text flows. New pages are created automatically as text expands. This leaves authors free to focus on writing and leave pagination to the program.</p>
<p>Pages, paragraphs, headings, and tables, are all <phrase><annotation type="concept">document domain</annotation></phrase> objects. Rather than working on a blank slate, as you do in a graphics program, you are now working within the <phrase><annotation type="concept">constraints</annotation></phrase> of these document domain objects.  These constraints remove or constrain decisions about positioning of elements, which makes creating documents faster and more consistent. Structured writing is about making content that obeys constraints, and these basic document domain constraints are the next step in that journey.</p>
<p>Partitioning off the pagination problem is not without its drawbacks, however. There are certain page layout effects that are difficult or impossible to achieve in Word or FrameMaker because you have given up some of the liberty of a vector graphics program. We also gave up some liberty when we moved from raster to vector graphics, which is why photo editing, which requires adjusting individual pixels, is done in raster rather then vector format.</p>
<p>There is an important lesson here. We are starting to see that different partitioning of the content creation process is appropriate for different kinds of content. There is no one universal correct partitioning and distribution of content complexity that works for every type of content or every organization. This will continue to be the case as we look at more advanced forms of structured writing.</p>
</section>
</chapter>
