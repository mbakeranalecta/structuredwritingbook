<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.metadata">
<title>Metadata</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept">affordances</annotation></phrase> <phrase><annotation type="concept">AI</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">apps</annotation></phrase> <phrase><annotation type="concept" specifically="block-and-map architecture">block and map architecture</annotation></phrase> <phrase><annotation type="concept">block-and-map architecture</annotation></phrase> <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up architecture</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content engineering</annotation></phrase> <phrase><annotation type="concept">content hygiene</annotation></phrase> <phrase><annotation type="concept">content plan</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">curse of knowledge</annotation></phrase> <phrase><annotation type="concept">desktop publishing system</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">Duplication</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">filtering</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept" specifically="information architecture">information architectures</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information scent</annotation></phrase> <phrase><annotation type="concept">information snacking</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> <phrase><annotation type="concept">information-typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management domains</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">Management domains</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase> <phrase><annotation type="concept">markup language</annotation></phrase> <phrase><annotation type="concept">markup</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media domains</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">namespace</annotation></phrase> <phrase><annotation type="concept">natural language processing</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">out-of-band communication</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">profiling</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical quality</annotation></phrase> <phrase><annotation type="concept">rhetorical structure</annotation></phrase> <phrase><annotation type="concept" specifically="rhetoric">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">schema language</annotation></phrase> <phrase><annotation type="concept" specifically="schema">Schemas</annotation></phrase> <phrase><annotation type="concept" specifically="schema">schemas</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">social networks</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">stop list</annotation></phrase> <phrase><annotation type="concept">structural block</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style guide</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">Subject</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology management</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">vector graphics</annotation></phrase> <phrase><annotation type="concept">web publishing</annotation></phrase> <phrase><annotation type="concept">Wikipedia</annotation></phrase> <phrase><annotation type="concept">workflow</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase> <phrase><annotation type="concept">glyphs</annotation></phrase> <phrase><annotation type="concept" specifically="hierarchical information architecture">hierarchical information architectures</annotation></phrase></p>
<p>Markup Languages</p>
<p><phrase><annotation type="markup-language">ASCIIDOC</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">CommonMark</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="markup-language">GitHub flavored Markdown</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML5</annotation></annotation></phrase> <phrase><annotation type="markup-language">JavaDoc</annotation></phrase> <phrase><annotation type="markup-language">LaTeX</annotation></phrase> <phrase><annotation type="markup-language">Lightweight DITA</annotation></phrase> <phrase><annotation type="markup-language">Markdown</annotation></phrase> <phrase><annotation type="markup-language">mathml</annotation></phrase> <phrase><annotation type="markup-language">reStructuredText</annotation></phrase> <phrase><annotation type="markup-language">SAM</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">SGML</annotation></annotation></phrase> <phrase><annotation type="markup-language">TeX</annotation></phrase> <phrase><annotation type="markup-language">vCard</annotation></phrase> <phrase><annotation type="markup-language">Wiki markup</annotation></phrase> <phrase><annotation type="markup-language">XLIFF</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XHTML</annotation></annotation></phrase></p>
<p>Schema languages</p>
<p><phrase><annotation type="schema-language">XSD</annotation></phrase> <phrase><annotation type="schema-language" specifically="XSD">XML schema</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="programming-language">cascading style sheets</annotation></phrase> <phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase> <phrase><annotation type="language-language">XSL-FO</annotation></phrase> <phrase><annotation type="programming-language">XSLT</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">Assemble from Pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">assemble from pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audits</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm" specifically="collaboration">collaborate</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance-checking algorithm</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="algorithm">content generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content generation</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content-generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">eliminating duplication</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithms</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting algorithms</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content from formatting">separation of content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool" specifically="API documentation tool">API documentation tools</annotation></phrase> <phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="component content management system">CCMS</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">component content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing</annotation></phrase> <phrase><annotation type="tool">desktop publishing system</annotation></phrase> <phrase><annotation type="tool">DITA CMS</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool" specifically="formatting language">formatting languages</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting software</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">GitHub</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Jekyll</annotation></phrase> <phrase><annotation type="tool">Liquid</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool" specifically="search engine">Search engines</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">SPFE Open Tool Kit</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool" specifically="static site generator">static site generators</annotation></phrase> <phrase><annotation type="tool">structured editor</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">validator</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> <phrase><annotation type="tool">WordPerfect</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool" specifically="XML editor">XML editors</annotation></phrase> <phrase><annotation type="tool">XML editor</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">wikis</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">Wikis</annotation></phrase> <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> <phrase><annotation type="tool">word processor</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role" specifically="content engineer">content engineers</annotation></phrase> <phrase><annotation type="role">content strategist</annotation></phrase> <phrase><annotation type="role" specifically="content strategist">content strategists</annotation></phrase> <phrase><annotation type="role">document designer</annotation></phrase> <phrase><annotation type="role" specifically="document designer">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role" specifically="information architect">information architects</annotation></phrase> <phrase><annotation type="role">prepress operator</annotation></phrase> <phrase><annotation type="role">publication designer</annotation></phrase> <phrase><annotation type="role" specifically="publication designer">publication designers</annotation></phrase> <phrase><annotation type="role" specifically="subject matter expert">subject matter experts</annotation></phrase> <phrase><annotation type="role" specifically="terminologist">terminologists</annotation></phrase> <phrase><annotation type="role">terminologist</annotation></phrase> <phrase><annotation type="role">typesetter</annotation></phrase> <phrase><annotation type="role">webmaster</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>People <phrase><annotation type="person">Donald Knuth</annotation></phrase> <phrase><annotation type="person">Gutenberg</annotation></phrase> <phrase><annotation type="person">Henry Ford</annotation></phrase> <phrase><annotation type="person">John Gruber</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">fragment</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">map</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure" specifically="rhetorical block">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure" specifically="table">tables</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure" specifically="topic">topics</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">books</annotation></phrase> <phrase><annotation type="media">CD-ROM</annotation></phrase> <phrase><annotation type="media">ebooks</annotation></phrase> <phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Interactive Electronic Technical Manuals</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>metadata</term>
</record>
</index>
<p>We live in the age of metadata, so much so that the word metadata has almost come to replace the word data itself and has come to be applied to almost any form of data that describes a resource. For example, we hear a lot about law enforcement getting access to metadata related to phone calls, which simply means the data about which number called which number and for how long.</p>
<p>The standard definition of metadata is “data that describes data,” but that definition misses the central point. Metadata does not merely describe data; metadata creates data. Metadata turns an undifferentiated set of values into useful data.</p>
<p>In the <phrase><annotation type="concept">document domain</annotation></phrase>, the ingredients of a recipe are just list items, strings of characters.</p>
<codeblock language="sam">
section: Ingredients
    * 12 eggs
    * 2 qt water
</codeblock>
<p>Adding <phrase><annotation type="concept">subject-domain</annotation></phrase> markup lets you tell algorithms exactly what the strings mean.</p>
<codeblock language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 12, each
    water, 2, qt
</codeblock>
<p>This subject-domain markup is metadata, and it turns unidentified list items into ingredient data. It is not that the data existed and the metadata came along afterward to describe it. The data exists as data only because metadata describes it. While a human reader can recognize that the list items are ingredients, an algorithm sees only strings of characters until you apply metadata that tells the algorithm that the characters are ingredients.<citation idref="1"/></p>
<footnote id="1">
<p>I am talking here about ordinary algorithms: simple rules that govern the processing of well-defined data. Advances in artificial intelligence (AI) are making progress towards developing algorithms that read the way humans do. A sufficiently advanced AI algorithm might not need this level of explicit metadata to recognized list items as ingredients. However, such an AI would still depend on metadata. It would just be using the same metadata that humans use, which we might fairly, if briefly, characterize as a combination of grammar and memory. Until such AIs are available to us, though, structured writing enables us to add more explicit metadata to content to make it accessible to simpler algorithms.</p>
</footnote>
<p>Structured writing obeys constraints and records the constraints it obeys, creating an interface between partitions in your content system. It applies metadata to constrain the interpretation of values in content, making those values accessible as data.</p>
<p>Partitioning the content system means moving complexity – decisions – from one partition to another. Metadata enables you to record and transfer the information required to do that. If you want to transfer a decision from the writer to another person or process, you have to ask what information the receiver needs in order to make and execute that decision. That information is the metadata that needs to be added to the content.</p>
<p>This is the basis for all partitioning of the complexity of content creation. When you attach metadata to content, you can pass that content to people and processes without dropping any of the complexity. You cannot partition complexity safely if you drop any of the complexity in the process. Metadata ensures that all the complexity transfers successfully from one partition to another.</p>
<p>Metadata preserves the information needed to make decisions about a piece of content. Preserving the fact that a piece of text records an ingredient lets you make decisions later about how to format ingredient listings or about which recipes to include in a collection. Explicitly recording which parts of that string are the quantity and unit of measure lets you defer a decision on which set of weights and measures to use when presenting the recipe to a reader, allowing you to publish the content in other markets.</p>
<p>The subject-domain <code>ingredient</code>, <code>quantity</code>, <code>unit</code> markup is metadata that turns the ingredients list into ingredients data.  But this is is not to say that a <code>list</code> structure is not metadata also. <code>list-item</code> is document-domain metadata.  It allows you to partition the job of formatting lists from the job of the writing recipes and other kinds of content. This makes it easier to write algorithms that recognize lists and format them for whatever medium you choose. The operations you can perform on list-item data are far less sophisticated than those you can perform on ingredient data, but list-item data is still data and still created by metadata.</p>
<p>There is an important point here: The same set of values – the same string of letters, words, and numbers – can be turned into different kinds of data by applying different kinds of metadata. This means that you can choose what kind of data you turn your content into by choosing what type of metadata you apply to it. Moving content from one structured writing domain to another means turning it into different kinds of data by applying different metadata to it. By turning it into different kinds of data, you make it accessible to different algorithms.</p>
<section>
<title>The recursive nature of metadata</title>

<p>Metadata is a confusing concept because metadata is recursive. If metadata is the data that creates data, then as data it too must be created by metadata. In other words, if the line <code>ingredients:: ingredient, quantity, unit</code> turns the ingredient lines into metadata in this markup:</p>
<codeblock language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 12, each
    water, 2, qt
</codeblock>
<p>Then what makes <code>ingredients:: ingredient, quantity, unit</code> a piece of metadata and not just another string of characters? There is another piece of metadata that says that that string is a record set definition, and, in this example, that metadata is the <phrase><annotation type="markup-language">SAM</annotation></phrase> syntax specification. This metadata is not part of the same file as the data it defines, but metadata can be both inline and separate. Thus one piece of data can have a whole cascade of metadata defining it, metadata defining that metadata, and so forth.</p>
<p>In structured writing, you add structure to content to replace the things you have factored out. That structure is metadata to the data that is the text of the file. But if you store that file in a repository, the information that identifies the file in that repository is metadata to the file as a whole. If the structure of the file is described by a <phrase><annotation type="tool">schema</annotation></phrase>, the schema is also metadata for the file.</p>
<p>But we’re not done yet because the specification of the schema language is the metadata that tells you what the schema means.  And then of course, there is the specification of the markup to consider. The XML specification is part of the metadata tree for every XML document in existence. And because the XML specification uses a formal grammar description language called <phrase><annotation type="language">BNF</annotation></phrase>, the BNF specification is metadata for the schema language description.</p>
<p>How do we break out of this seemingly infinite pattern? Data is information that has been formalized for interpretation by algorithms. Fortunately, human beings can understand natural language without that degree of formalization. Eventually, then, we reach a point where the last piece of metadata is not described by metadata but by narrative. That narrative document essentially bootstraps the whole metadata cascade that eventually yields pieces of data that can be unambiguously interpreted by algorithms.</p>
<p>So, every piece of data has a spreading tree of metadata supporting it, which, if traced to its roots, eventually leads to narrative documents that explain things in human terms. Thus the XML specification combines narrative definitions with BNF, and if we go to the BNF specification we will find the plain narrative that describes BNF. Data is a formalization of narrative, and it is this relationship that allows structured writing to move information back and forth between data and narrative forms.</p>
</section>
<section>
<title>Where should metadata live?</title>

<p>One of the great questions about metadata is where it should live: with the data it describes or separate from it? As we noted above, much of the metadata in the metadata cascade is stored separately. Either the data points to the metadata (as when an XML document declares what schema it uses), the metadata points to the data (as when a content management system stores metadata), or the metadata is embedded in the content itself (as in structured writing).</p>
<p>The issue of where metadata should live is closely related to the issue of how you partition responsibilities in your content system. Since metadata transfers complexity from one partition to another, the responsibility for creating the metadata lies with the person or process in the originating partition, and the metadata requirements are dictated by the needs of the receiving partition. By adjusting how your system is partitioned, you can adjust how onerous the metadata requirements are on any one actor in the system. Therefore, the partitioning dictates the location of the metadata.</p>
<p>Most early graphic file formats stored only the image. Most modern formats also store extensive metadata about the image. The pictures you take with your digital camera include information about the camera and the settings that were used to take the shot, all of which helps rendering algorithms and graphic editing applications handle the raw image data better. Having that metadata embedded in the file ensures that the picture and its metadata stay together. Separating them would greatly complicate the system.</p>
<p>Unfortunately, tools are often designed with other priorities in mind. For one thing, many tool developers think almost exclusively in relational database terms. The idea that you could store metadata anywhere other than in relational tables is foreign to them. For another, system vendors have a vested interest in a partitioning that requires every user to interact with their system all day long, because this forces companies to buy a software license for every contributor. Both factors encourage system vendors to implement models that separate metadata from content and store the metadata in their repository, ensuring that you must use their system to have access to the metadata.</p>
<p>For example, should the history of a file be stored in the file or in the repository? Storing it in the file lessens the file’s dependence on the repository and makes it more portable. But a repository vendor may prefer to store file history in their workflow system, making it hard for you to move away from that system. If metadata is stored in the file, it is easier to edit content when you aren’t connected to the system, which can save you on licenses.</p>
<p>In the case of photos, the metadata is in the file because the camera is the best, and possibly only, instrument for recording it. This partitioning of complexity is best for creating, accessing, and managing the information. The location of the metadata should be determined by the best partitioning of the content system, not the convenience of a tool vendor.</p>
<p>Writing your content in the subject domain means that more of your metadata is stored in the same file as the content, increasing its independence and portability. As we have seen, using subject-domain structures can lessen the need for management-domain structures to support algorithms such as <phrase><annotation type="algorithm">single sourcing</annotation></phrase> and <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase>, which reduces the need for external management-domain metadata. All of this contributes to improved functional lucidity, referential integrity, and change management.</p>
<p>But this does not mean that all metadata belongs in the content file. For example, when you import a graphic into a document, you often give it a caption and specify the display size. It doesn’t make sense to include this information in the graphic file, because this information doesn’t describe the graphic itself; it describes the graphic’s relationship to the current document. In a different document, the same graphic might be displayed at a different size with a different caption. Therefore, it is better to include this metadata in the file that imports the graphic, not the graphic file itself. In <citation nameref="chapter.wide"/> I looked at another way of partitioning this metadata, which is based on the nature of the relationship between the files and on the way that the complexity of the content system is partitioned.</p>
<p>This example shows that there are definitely types of metadata that belong in a repository or content management system. If you store your content in a version control system (VCS) such as Git (something that is increasingly popular in the “treat docs like code” movement), the VCS records the differences between each version of the file as well as who committed each version. This allows the VCS to handle management tasks such as telling you who changed a file and when it changed. Storing such metadata in the file would make it much more complex to write the algorithm for this task.</p>
</section>
<section>
<title>Ontology</title>

<index>
<record>
<type>concept</type>
<term>ontology</term>
</record>
</index>
<p>Finally it is worth saying a word about ontology. Ontology (in the information processing sense) attempts to create a formal mapping of the relationships between entities in the real world such that algorithms can draw inferences and reach conclusions about them.</p>
<p>In many ways, an ontology does for algorithms what narrative does for humans. After all, we read so that we can understand the world better. By understanding what various objects and institutions are and how they relate to each other, we can decide what to do.</p>
<p>In some sense, therefore, ontology is the ultimate in <phrase><annotation type="concept">subject-domain</annotation></phrase> markup. Indeed, one should be able to generate human-readable narrative from an ontology, given a sufficiently sophisticated algorithm and a sufficiently sophisticated ontology.</p>
<p>All of this is outside the scope of this book. <phrase><annotation type="concept">Subject-domain</annotation></phrase> markup attempts to capture certain aspects of the subject matter of a work, but it does not attempt to model the argument of a work. Consider this passage:</p>
<codeblock language="sam">
In {Rio Bravo}(movie), {the Duke}(actor "John Wayne") 
plays an ex-Union colonel.
</codeblock>
<p>Here the subject-domain markup formalizes the fact that Rio Bravo is a movie and that “the Duke” refers to the actor John Wayne. It does not model the relationship between them. With an ontology, you would model the “starred in” relationship between John Wayne and Rio Bravo, whereas with <phrase><annotation type="concept">subject-domain</annotation></phrase> structured writing you would normally leave this to the text.</p>
<p>Similarly, this <phrase><annotation type="concept">subject-domain</annotation></phrase> markup does not bother to identify Union as a reference to both a country and its armed forces or that colonel is a rank in those armed forces. It does not identify these relationships because this particular markup language is concerned with movies, and these facts are incidental to the movie business. Actors, directors, and movies are significant subjects in the movie review domain. The names of nations and armies that figure in the plot of individual movies are incidental in that domain. A full ontological treatment of the passage above, however, would need to model those relationships.</p>
<p>Structured writing does make certain aspects of content clear to algorithms, but not with the intention of making it possible for the algorithms to make real-world inferences and decisions based on the information in that content. It only does what is necessary to partition and redirect content complexity in a content system in which human writers use algorithms as tools to improve the quality of the content they prepare for human readers.</p>
</section>
</chapter>
