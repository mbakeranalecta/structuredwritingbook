<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.reuse">
<title>Reuse</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>algorithm</type>
<term>reuse</term>
</record>
<record>
<type>concept</type>
<term>content reuse</term>
</record>
</index>
<p>Another source of complexity in content creation occurs when you want the same information to occur in more than one publication. If there is no coordination between writers, each writer who wants to include that piece of information will research and write it independently. Individual writers who want to use the same information in more than one publication will copy the information from one publication to another. However it happens, you now have two or more instances of the same information that you have to maintain and edit whenever the subject matter changes. If some instances do not get updated, or some of them get updated incorrectly, that is content maintenance complexity that is not being handled, and, as always, it falls through to the reader in the form of inconsistent or incorrect information.</p>
<p>Content reuse is an attempt to handle the complexity associated with using the same information in more than one place. Reuse has become one of the main drivers of structured writing, particularly with the widespread adoption of <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>. Unfortunately, most reuse techniques also introduce a lot of <phrase><annotation type="concept">management-domain</annotation></phrase> complexity. A single-minded focus on reuse has sometimes led to the implementation of systems that dump large amounts of complexity on writers.</p>
<p>Reuse is an area in which, if you are not careful, you can end up with more unhandled complexity in the system than when you began, resulting in both process problems and significant damage to rhetoric. Reuse is also an area in which process and rhetorical goals can easily be at odds; although using the same content for multiple purposes can deliver process benefits, it may not be the best rhetorical strategy.</p>
<p>It is important to remember that content reuse is a means for creating duplication in content. It eliminates duplication on the writing side, but it creates duplication on the output side. It is important to evaluate why you want that duplication at all and see if there are viable alternatives, such as publishing the information once and linking to it from various places. Here are some scenarios where you might want to duplicate information in more than one place:</p>
<ul>
<li>
<p>You are writing about different products that share common technology, and you want to duplicate information on the common features in the documents for each individual product.</p>
</li>
<li>
<p>You are writing about several different releases of a product, and you want information on features that have not changed to be duplicated in the documents for the next release.</p>
</li>
<li>
<p>You are writing documents for different audiences (marketing material, technical documentation for various roles, training material), and you want the same product descriptions in all these documents.</p>
</li>
<li>
<p>You are writing general information (e.g., copyright and trademark statements), and you want to duplicate that information in many different publications.</p>
</li>
</ul>
<p>The term <phrase><annotation type="italic">reuse</annotation></phrase> can suggest that this activity is akin to rummaging through that jar of old nuts and bolts you have in the garage looking for one that is the right size to fix your lawnmower. While you can do it that way, that approach is neither efficient nor reliable. The efficient and reliable approach involves deliberately creating content for duplication in multiple locations. This means that you need to place constraints on the content to be reused and the content that reuses it, and that means you are in the realm of structured writing.</p>
<section>
<title>Fitting pieces of content together</title>

<p>To create one piece of content that can be used in many outputs, you have to make sure it fits in each of those outputs. In other words, you have to partition it appropriately for reuse.</p>
<p>If you cut and paste, this is not a concern. You can cut any text you like, paste it in anywhere, and edit it to fit if you need to. But if the content you want to use is used in other places, you can’t edit it to fit because that might cause it to no longer fit in the other places. For reuse to work, the content must be written to fit in multiple places. In other words, it has to meet a set of constraints that ensure that it will fit in multiple places. I will look at this in more detail in <citation nameref="chapter.composition"/>. In this chapter I focus on the algorithms for fitting the pieces together.</p>
<p>There are seven basic models for fitting pieces of content together:</p>
<ul>
<li>
<p>Common into variable</p>
</li>
<li>
<p>Variable into common</p>
</li>
<li>
<p>Variable into variable</p>
</li>
<li>
<p>Common with conditions</p>
</li>
<li>
<p>Factor out the common</p>
</li>
<li>
<p>Factor out the variable</p>
</li>
<li>
<p>Assemble from pieces</p>
</li>
</ul>
</section>
<section>
<title>Common into variable</title>

<p>In the common-into-variable case, you have a common piece of content that occurs in many places. The common content could occur in many documents, in many places in the same document, or both (see <citation idref="fig.common2variable"/>).</p>
<figure id="fig.common2variable">
<title>Common-into-variable diagram</title>

<insert item="../graphics/common2variable.xml" type="image"/>
</figure>
<p>We looked at an example of this in <citation nameref="chapter.management-domain"/>, where we had a set of dangerous procedures which each required a standard warning. Each individual procedure is the variable part and the standard warning is the common part (see <citation idref="fig.blow-stuff-up-sam"/>).</p>
<figure id="fig.blow-stuff-up-sam">
<title>Common-into-variable markup example</title>

<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(files/shared/admonitions/danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.        
</codeblock>
</figure>
<p>To ensure that the included content will always fit, you need to make sure that there is a clear partitioning of responsibilities between the common content and each place it will be inserted into. In <citation idref="fig.blow-stuff-up-sam"/>, the inserted content should be the safety warning, the whole safety warning, and nothing but the safety warning. The procedure structure should describe the steps and only the steps and should insert the reusable warning at the right place.</p>
<p>Of course, you can also use the subject-domain approach to common into variable that we looked at in <citation nameref="chapter.management-domain"/>. I will go into more detail on that approach later in this chapter.</p>
</section>
<section>
<title>Variable into common</title>

<p>In the variable-into-common case, you have a single document that will be output in many different ways by inserting variable content at certain locations (see <citation idref="fig.variable2common"/>).</p>
<figure id="fig.variable2common">
<title>Variable-into-common diagram</title>

<insert item="../graphics/variable2common.xml" type="image"/>
</figure>
<p>For instance, if you are writing a manual to cover a number of car models, you can factor out the number of seats each model has.</p>
<codeblock language="sam">
The vehicle seats &gt;($seats) people.
</codeblock>
<p>This is the fixed content that will occur in all manuals, with the number of seats pulled in from an external source. Let’s say you have a collection of vehicle data that is stored in a structure like <citation idref="fig.variable2common-sam"/>.</p>
<figure id="fig.variable2common-sam">
<title>Variable-into-common data structure example</title>

<codeblock language="sam">
vehicles:
    vehicle: compact
        seats: four
        colors: red, green, blue, white, black
        transmissions: manual, CVT
        doors: four
        horsepower: 120
        torque: 110 @ 3500 RPM
    vehicle: midsize
        seats: five
        colors: red, green, blue, white, black
        transmissions: CVT
        doors: four
        horsepower: 180
        torque: 160 @ 3500 RPM        
</codeblock>
</figure>
<p><citation idref="fig.variable2common-pseudo"/> shows an algorithm that selects the correct insert by querying the structure in <citation idref="fig.variable2common-sam"/>.</p>
<figure id="fig.variable2common-pseudo">
<title>Pseudocode for the variable-into-common algorithm</title>

<codeblock language="pseudo">
match insert where variable = $seats
    $number_of_seats = vehicles/vehicle[$model]/seats
    output $number_of_seats        
</codeblock>
</figure>
<p>Of course, the insert and query mechanism in <citation idref="fig.variable2common-pseudo"/> is <phrase><annotation type="concept">pseudocode</annotation></phrase>. Exactly how things work and exactly how you delineate, identify, and insert content will vary from system to system.</p>
<p>With the variable-into-common technique, you create a common source by factoring out all the parts of the different outputs that are not common. This is, in some ways, the inverse of the usual pattern of factoring out invariants: you are actually factoring out the variants. But, really, it amounts to the same thing. You are factoring variants from invariants. The only real difference between this and the common-into-variable technique is whether the common parts are embedded in the variable parts or vice versa. Either way, you still end up with two artifacts: the variable piece or pieces and the common piece or pieces.</p>
</section>
<section>
<title>Variable into variable</title>

<p>Variable into variable is a variation on common into variable in which you select different common elements to pull into a set of variable documents.</p>
<p>For example, suppose you decide to sell your product line in a new market. The new market has different safety regulations, which means you need to insert a different standard warning into your manuals for that market. In this case, you want to swap out the common elements used in your home market and substitute the common elements for the foreign market (see <citation idref="fig.variable2variable-diagram"/>).</p>
<figure id="fig.variable2variable-diagram">
<title>Variable-into-variable diagram</title>

<insert item="../graphics/variable2variable.xml" type="image"/>
</figure>
<p>In the common-into-variable example, you inserted the contents of a file that contained a standard warning. But for variable into variable, this approach does not work. Variable into variable requires you to load a different file for each market, but the content specifies a particular file name, making it difficult to select a different file for the new market.</p>
<p>As always in structured writing, you look for a way to factor out the problematic content. So here, you look for a way to factor out the file name and replace it with something else.</p>
<section>
<title>Using IDs</title>

<index>
<record>
<type>concept</type>
<term>IDs</term>
</record>
</index>
<p>The most basic way to factor out the file name is to give the file an ID. An ID is a management-domain structure used to identify a piece of content in a location-independent way. No matter where the content is stored, it keeps the same ID. <citation idref="fig.warning-danger-id"/> shows the warning file with the ID <code>#warn_danger</code> added.</p>
<figure id="fig.warning-danger-id">
<title>Danger warning with an ID added</title>

<codeblock language="sam">
warning:(#warn_danger) 
    title: Danger
    
    Be very very careful. This could kill you.
</codeblock>
</figure>
<p>You can then insert the warning into your procedure by referring to that ID (see <citation idref="fig.warning-danger-ref"/>).</p>
<figure id="fig.warning-danger-ref">
<title>Procedure that refers to a warning using an ID</title>

<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(#warn_danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
</figure>
<p>The decision about which warning to include has been shifted from the writer to the algorithm in <citation idref="fig.warning-danger-pseudo"/>.</p>
<figure id="fig.warning-danger-pseudo">
<title>Pseudocode to locate a warning using its ID</title>

<codeblock language="pseudo">
match insert with ID
    $insert_content = find ID in $content_set
    output $insert_content
</codeblock>
</figure>
<p>This is a constant pattern in structured writing. When it comes to choosing and locating resources, you want to move that responsibility from the writer to the algorithm, which means moving the identity of the resource out of the content and into the algorithm. This makes it easier to update locations, but it also gives you far more options for storing and managing your content, since algorithms can interact with a variety of systems in sophisticated ways, rather than just storing a static address. It also means you can make wholesale changes in how your content is stored without having to edit the content itself. This is a major win in terms of partitioning complexity so it can be distributed and handled more efficiently.</p>
<p>This method requires that the algorithm have a way to resolve the ID and find the content to include. In many cases, a <phrase><annotation type="tool">content management system</annotation></phrase> can resolve the ID. In other cases, you can do something as simple as having the algorithm search through a set of files to find the ID or building a catalog that points to the files that contain content with IDs.</p>
<p>To do variable-into-variable reuse in a system that uses IDs, you maintain a separate set of files that contain the variable content for each market. Each set uses the same IDs but different content. You simply point the <phrase><annotation type="concept">algorithm</annotation></phrase> at the set for the market you are generating output for. So if your foreign market requires a different warning, you can create a file that contains the message shown in <citation idref="fig.warning-danger-id-2"/>.</p>
<figure id="fig.warning-danger-id-2">
<title>Alternate warning message for a different market</title>

<codeblock language="sam">
warning:(#warn_danger) 
    title: Look out!
    
    Pay close attention. You could really hurt yourself.            
</codeblock>
</figure>
<p>By telling the algorithm that builds the foreign market docs to search this file for IDs, rather than the file with the domestic market warning, you automatically get the foreign warning rather than the domestic one.</p>
</section>
<section>
<title>Using keys</title>

<index>
<record>
<type>concept</type>
<term>keys</term>
</record>
</index>
<p>Another way to do this is with another <phrase><annotation type="concept">management-domain</annotation></phrase> structure called a <phrase><annotation type="italic">key</annotation></phrase>. A key is similar to an ID, but it is not directly tied to a resource. Instead, the same key can point to different resources at different times. Since a key does not represent any one concrete resource, you don’t assign the key to a resource. Instead, you use an intermediate lookup table to resolve keys to particular resources for a particular purpose.</p>
<p>Suppose you have the warning in a file called <code>files/shared/admonitions/domestic/danger</code> with the content shown in <citation idref="fig.variable2variable-key-1"/> (no ID):</p>
<figure id="fig.variable2variable-key-1">
<title>Warning content in a key-based system</title>

<codeblock language="sam">
warning: 
    title: Danger

    Be very very careful. This could kill you.            
</codeblock>
</figure>
<pagination-tweak>
<min-space>1.5in</min-space>
</pagination-tweak>
<p><citation idref="fig.variable2variable-key-2"/> shows a procedure that includes the warning using the key <code>%warn_danger</code>.</p>
<figure id="fig.variable2variable-key-2">
<title>Procedure that includes a warning using key-based linking</title>

<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(%warn_danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
</figure>
<p>(These examples use <code>#</code> to denote IDs and <code>%</code> to denote keys. This is the notation that <phrase><annotation type="language">SAM</annotation></phrase> uses for IDs and keys, but it is purely arbitrary and has nothing to do with how they work. Different systems denote IDs and keys in different ways.)</p>
<p>To connect the key to the warning file, you create a key lookup table (see <citation idref="fig.variable2variable-key-3"/>).</p>
<figure id="fig.variable2variable-key-3">
<title>Key lookup table</title>

<codeblock language="sam">
keys:
    key:
        name: warn_danger
        resource: files/shared/admonitions/domestic/danger            
</codeblock>
</figure>
<p>When the algorithm in <citation idref="fig.variable2variable-key-4"/> processes the procedure, it sees the key reference <code>%warn_danger</code> and looks it up in the key lookup table. The key lookup table tells the algorithm that the key resolves to the resource <code>files/shared/admonitions/domestic/danger</code>. The algorithm then loads that file and inserts the contents into the output.</p>
<figure id="fig.variable2variable-key-4">
<title>Pseudocode for the key lookup algorithm</title>

<codeblock language="pseudo">
match insert with key
    $resource = find key in lookup-table
    output $resource            
</codeblock>
</figure>
<p>To output your content for the foreign market, you prepare a new key lookup table (see <citation idref="fig.variable2variable-key-5"/>) and tell the algorithm to use this table instead.</p>
<figure id="fig.variable2variable-key-5">
<title>Key lookup table for a new market</title>

<codeblock language="sam">
keys:
    key:
        name: warn_danger
        resource: files/shared/admonitions/foreign/danger            
</codeblock>
</figure>
<p>Using keys is not necessarily better than using IDs. What it comes down to is that you need some kind of bridge between the citation of an identifier in the source file and the location of a resource with that identifier in the content store. This bridge can be created by a key lookup table, by remapping file URLs, or by modifying a query to a content repository.</p>
<p>One advantage of keys is that, because you don’t attach the key directly to the content, you can use a key to identify resources that don’t have IDs, including resources you don’t control.</p>
<p>One downside of keys is that, by themselves, they can only point to a whole resource. This can force you to keep your reusable units in separate files. To avoid this, you can combine keys with IDs. <citation idref="fig.variable2variable-key-6"/> combines both danger warnings into one file and gives each an ID.</p>
<figure id="fig.variable2variable-key-6">
<title>Keys and IDs combined</title>

<codeblock language="sam">
warnings:
    warning:(#warn_danger_domestic) 
        title: Danger
    
        Be very very careful. This could kill you.

    warning:(#warn_danger_foreign) 
        title: Look out!
        
        Pay close attention. You could really hurt yourself.
</codeblock>
</figure>
<p>Now you can rewrite your key lookup tables to use IDs to pull the right warning out of the common file. Then you can use a key lookup table like <citation idref="fig.variable2variable-key-7"/> for the domestic build and <citation idref="fig.variable2variable-key-8"/> for the foreign build.</p>
<figure id="fig.variable2variable-key-7">
<title>Key lookup table with ID for domestic market</title>

<codeblock language="sam">
keys:
    key:
        name: warn_danger
        resource: files/shared/warnings#warn_danger_domestic
</codeblock>
</figure>
<figure id="fig.variable2variable-key-8">
<title>Key lookup table with ID for foreign market</title>

<codeblock language="sam">
keys:
    key:
        name: warn_danger
        resource: files/shared/warnings#warn_danger_foreign
</codeblock>
</figure>
<p>This method partitions the warnings into separate files and also partitions the location of those files from the writer. Using keys as a bridge between two partitions can be a convenient way to manage content relationships without having to update source files every time the relationships change.</p>
<p>The downside is that keys introduce an abstract element into the writer’s world, and abstractions are a form of complexity that can be difficult to deal with. Instead of deciding which warning to use, writers have to decide which key or ID to use. However, that decision is not necessarily easier to make, and it requires more system knowledge and a more abstract way of thinking than the original decision that was factored out. Keys and IDs abstract out the actual act of inclusion, but that is the least complex part of ensuring that the standard warning is used.</p>
</section>
</section>
<section>
<title>Common with conditions</title>

<index>
<record>
<type>concept</type>
<term>conditions</term>
</record>
</index>
<p>In some implementations of the variable-into-common approach, the variant pieces are not factored out into a separate file. Rather, each of the possible alternatives is included in the file conditionally (see <citation idref="fig.commonconditions-diagram"/>).</p>
<figure id="fig.commonconditions-diagram">
<title>Common-with-conditions diagram</title>

<insert item="../graphics/commonconditions.xml" type="image"/>
</figure>
<p>For instance, in content for a car manual you might have conditional text for the number of people the car seats.</p>
<codeblock language="sam">
The vehicle seats {four}(?compact){five}(?midsize){seven}(?van).
</codeblock>
<p>Here the main text is the fixed piece and the variable pieces are the words “four,” “five,” and “seven.” Which of these will be included in the output depends on which condition is applied during the build. If the condition <code>midsize</code> is applied, then the output text will be “five” and the other alternatives will be suppressed. <citation idref="fig.commonconditions-pseudo"/> shows this algorithm.</p>
<figure id="fig.commonconditions-pseudo">
<title>Pseudocode for the common-with-conditions algorithm</title>

<codeblock language="pseudo">
match phrase with condition
    if condition in $build_conditions
        continue
    else
        ignore        
</codeblock>
</figure>
<p>The upside of the conditional approach is that it keeps all the variants in one file, so your algorithm does not have to know where to go to find the external content. But there are downsides to this approach:</p>
<ul>
<li>
<p>It gets cumbersome to read the source if you apply many different conditions.</p>
</li>
<li>
<p>When the subject matter changes, you have to find all the places where conditions occur and update them.</p>
</li>
<li>
<p>If you refer to the same data point (the number of seats) in many different documents, that information is still being duplicated all over the content, which makes it hard to maintain, verify, or change if, for example, the compact seats five in the next model year.</p>
</li>
</ul>
<p>Common with conditions is not limited to cases where there are alternate values, however. In some cases, content may simply be inserted or omitted for certain outputs (see <citation idref="fig.commonconditions-sam"/>).</p>
<figure id="fig.commonconditions-sam">
<title>Common with conditions used for optional content</title>

<codeblock language="sam">
The main features of the car are:            

ol:
    li: Wheels
    li: Steering wheel
    li:(?deluxe) Leather seats
    li: Mud flaps        
</codeblock>
</figure>
<p>In this case, the list item “Leather seats” is only published if you specify the condition <code>deluxe</code> in the build. It would be omitted for all other builds. In cases like this, it is hard to avoid using conditionals as a reuse mechanism.</p>
<p>This approach to reuse is often called <phrase>filtering</phrase> or <phrase>profiling</phrase>. Some systems have more elaborate ways of specifying filtering or profiling. The net effect is the same as the simple condition tokens shown in this section, but such systems may allow for more sophisticated conditions.</p>
<p>Because common with conditions is essentially a form of variable into common where the variable content is contained inside the common source, it can technically be replaced by a variable-into-common approach in all cases. In practice, conditions are typically used in the following cases:</p>
<ul>
<li>
<p>The number of variations is small and thought to be fixed or to change infrequently.</p>
</li>
<li>
<p>The variable pieces are eccentric or contextually dependent.</p>
</li>
<li>
<p>The writer or organization wishes to avoid managing multiple files.</p>
</li>
<li>
<p>The current tools don’t support variable into common.</p>
</li>
</ul>
<p>How successful a common-with-conditions approach will be also depends on what you choose for your conditional expressions. Generally, subject-domain conditions will be more stable and manageable than document-domain conditions. For instance, conditions that relate to different vehicles (subject domain) are based in the real world and are, therefore, objectively true as long as the subject matter remains the same. Conditions that relate to different publications or different media, on the other hand, are not objectively true and can’t be verified independently. The only way to verify them is to build the different documents or media and see if you get the content you expected. This makes maintaining such conditions cumbersome and error prone – an indication that complexity is not being distributed in an optimal way.</p>
</section>
<section>
<title>Factor out the common</title>

<p>In <citation nameref="chapter.management-domain"/>, I noted that the subject-domain alternative to using an insertion instruction for the warning text was to specify which procedures were dangerous, thus factoring out the constraint that the warning must appear (see <citation idref="fig.factor-out-common-sam"/>).</p>
<figure id="fig.factor-out-common-sam">
<title>Procedure that factors out explicit inclusions</title>

<codeblock language="sam">
procedure: Blow stuff up
    is-it-dangerous: yes
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
</figure>
<p>In this case, writers do not have to identify the material to be included, either directly by file name or indirectly through an <phrase><annotation type="structure">ID</annotation></phrase> or a key. Instead, it is up to the algorithm to include it (see <citation idref="fig.factor-out-common-pseudo"/>).</p>
<figure id="fig.factor-out-common-pseudo">
<title>Pseudocode for the factor-out-the-common algorithm</title>

<codeblock language="pseudo">
match procedure/is-it-dangerous 
    if is-it-dangerous = 'yes'
        output files/shared/warnings#warn_danger_domestic
</codeblock>
</figure>
<p>To produce the foreign market version of the documentation, you simply edit the rule, as shown in <citation idref="fig.factor-out-common-pseudo-2"/>.</p>
<figure id="fig.factor-out-common-pseudo-2">
<title>Pseudocode for an alternative warning using the factor-out-the-common algorithm</title>

<codeblock language="pseudo">
match procedure/is-it-dangerous 
    if is-it-dangerous = 'yes'
        output files/shared/warnings#warn_danger_foreign
</codeblock>
</figure>
<p>Or, to further partition complexity in the code, you can use keys, as shown in <citation idref="fig.factor-out-common-pseudo-3"/>.</p>
<figure id="fig.factor-out-common-pseudo-3">
<title>Pseudocode for the factor-out-the-common algorithm using keys</title>

<codeblock language="pseudo">
match procedure/is-it-dangerous 
    if is-it-dangerous = 'yes'
        $resource = find key '%warn_danger' in lookup-table
        output $resource      
</codeblock>
</figure>
<p>The beauty of this approach is that the content is entirely neutral as to what kind of reuse is going on or how dangerous procedures are treated. Because the content contains only objective information about the procedure itself, you can implement any publish or reuse algorithm you like – in any way you like and at any time. Because the content does not specify any form of reuse or any reuse mechanism, you have made it more reusable and partitioned the complexity of reuse much more neatly and reliably.</p>
<p>This approach also makes the content much easier to write, since it does not require writers to know how the reuse mechanism works, how to identify reusable content, or even that reuse is occurring at all. All they have to do is answer a simple question about the content that they should know the answer to: is the procedure dangerous or not.</p>
<p>This approach partitions the entire reuse mechanism away from writers. This is a big win because the biggest problem with most reuse techniques is the amount of complexity they add for writers, which directly compromises their finite and valuable attention.</p>
<p>This is important from the point of view of both complexity and cost. Whenever writers are asked to consciously reuse content, they have to look for that content every time the potential for reuse occurs. This cost is incurred whether or not they find reusable content, whereas any savings from reuse are realized only when reusable content is found.</p>
<p>The factor-out-the-common approach relieves writers of all responsibility for the reusable content. Locating reusable content is the job of an algorithm. If the content does not exist, the algorithm will report that it is missing, and it will be somebody’s job to create it, after which the algorithm will locate it automatically every time it is needed. This is far more efficient than having writers look for reusable content over and over and over.</p>
<p>The downside of this approach is that it is not as general. The <code>is-it-dangerous</code> metadata applies only to dangerous procedures. It does not address the inclusion of reusable content in other places. You would need to factor out other interesting reuse cases in a similar way to create a complete subject-domain solution. Again, we see that complexity always has to go somewhere. But as we have also seen, if writers cannot fully handle the complexity thrust on them, that complexity goes unhandled, with consequences for both process and rhetoric.</p>
</section>
<section>
<title>Factor out the variable</title>

<p>You can also factor out the variable content. In the case of the different models of a car, rather than conditionalizing the list of features in the document, you can maintain the list in a database. The organization probably already has a database of features for each vehicle, so you don’t need to create anything new. Instead, you simply query the existing database. After all, reusing what already exists is what reuse is all about.</p>
<pagination-tweak>
<min-space>2in</min-space>
</pagination-tweak>
<p>For example, instead of including the feature list, as shown in <citation idref="fig.factor-out-variable-sam"/>, you can factor out the list entirely, as shown in <citation idref="fig.factor-out-variable-db"/>.</p>
<figure id="fig.factor-out-variable-sam">
<title>Conditionalized feature list</title>

<codeblock language="sam">
The main features of the car are:
            
ol:
    li: Wheels
    li: Steering wheel
    li:(?deluxe) Leather seats
    li: Mud flaps        
</codeblock>
</figure>
<figure id="fig.factor-out-variable-db">
<title>Factored-out feature list</title>

<codeblock language="sam">
The main features of the car are:
            
&gt;&gt;&gt;(%main_features)
</codeblock>
</figure>
<p>Now, your algorithm looks like <citation idref="fig.factor-out-variable-pseudo"/>.</p>
<figure id="fig.factor-out-variable-pseudo">
<title>Pseudocode for the factor-out-the-variable approach</title>

<codeblock language="pseudo">
match insert with key
    $resource = lookup key in lookup-table
    output $resource        
</codeblock>
</figure>
<p>You then have a key lookup table where the resource is identified by a query on the database (<citation idref="fig.factor-out-variable-query"/>).</p>
<figure id="fig.factor-out-variable-query">
<title>Key lookup table for the factor-out-the-variable approach</title>

<codeblock language="sam">
keys:
    key:
        name: %main-features
        resource: from vehicles select features where model = $model        
</codeblock>
</figure>
<p>This query retrieves a different set of features from the database depending on how the variable <code>$model</code> is defined for the build. Launch the build with <code>$model = 'compact'</code> and you get the feature set for the compact model. Launch the build with <code>$model = 'van'</code> and you get the feature set for the van model.</p>
<p>Naturally, this leaves out a lot of detail about how this query gets executed and how the results get structured into a <phrase><annotation type="concept">document-domain</annotation></phrase> list structure. But those are implementation details.</p>
</section>
<section>
<title>Assemble from pieces</title>

<p>In the assemble-from-pieces approach, there is no common vs. variable distinction and no single source document into which you insert reused content or apply conditions. Instead, you assemble a set of content units to form a finished document (see <citation idref="fig.assemble-diagram"/>).</p>
<figure id="fig.assemble-diagram">
<title>Assemble-from-pieces diagram</title>

<insert item="../graphics/assemble.xml" type="image"/>
</figure>
<p>For example, if you have a range of products with common features, you might assemble the documentation for those products using a common introduction followed by a piece representing each feature of each model. This piece could be a flat list, or it could be a tree structure. For instance, you might assemble a chapter of a manual with an introductory piece and then several sections below it in the tree, as shown in <citation idref="fig.assemble-tree"/>.</p>
<figure id="fig.assemble-tree">
<title>Assemble-from-pieces tree structure</title>

<insert item="../graphics/tree.xml" type="image"/>
</figure>
<p>The assembly approach requires a structure to describe how the units are assembled. This structure is often called <phrase>map</phrase>. (It is called a map in <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>, for instance.) Some applications refer to it as a table of contents. <citation idref="fig.assemble-map"/> is an example of a map.</p>
<figure id="fig.assemble-map">
<title>Assemble-from-pieces map</title>

<codeblock language="sam">
map: Widget Wrangler Deluxe User Manual
   unit: units/ww/deluxe/intro
       unit: units/ww/shared/basic_features
       unit: units/ww/deluxe/deluxe_features
   unit: units/ww/shared/install/intro
       unit: units/ww/shared/requirements
       unit: units/ww/deluxe/requirements
       unit: units/ww/shared/install
       unit: units/ww/deluxe/install_options
</codeblock>
</figure>
<p>Rather than using a map, you can allow the units themselves to pull in other units, which may in turn pull in other units. So the Widget Wrangler Deluxe install introduction unit might look like the example in <citation idref="fig.assemble-unit"/>.</p>
<figure id="fig.assemble-unit">
<title>Alternate structure for the assemble-from-pieces approach</title>

<codeblock>
unit: Installing the Widget Wrangler Deluxe
            
    You should be very careful when installing the 
    Widget Wrangler Deluxe. Follow these steps carefully:

    &gt;&gt;&gt;(unit units/ww/shared/requirements)
    &gt;&gt;&gt;(unit units/ww/deluxe/requirements)
    &gt;&gt;&gt;(unit units/ww/shared/install)
    &gt;&gt;&gt;(unit units/ww/deluxe/install_options)        
</codeblock>
</figure>
<p>This method avoids the need for a map, but it can make the units less reusable. In <citation idref="fig.assemble-unit"/>, you would need a separate introduction unit for the regular Widget Wrangler, since the introduction file imports all the requirements and procedural units. By assembling units with the map, you can use a shared install introduction, which increases the amount of reuse you can do.</p>
</section>
<section>
<title>Combining multiple techniques</title>

<p>There is one problem with using a common install introduction for both the regular and the deluxe Widget Wrangler. The introduction mentions the name of the product. To solve this problem without requiring two different units, you can use the variable-into-common or common-with-conditions reuse techniques. <citation idref="fig.combine-unit"/> shows an example using variable into common:</p>
<figure id="fig.combine-unit">
<title>Combination of the assemble-from-pieces and variable-into-common approaches</title>

<codeblock>
unit: Installing the &gt;($product_name)
            
    You should be very careful when installing 
    the &gt;($product_name). Follow these steps carefully:

    &gt;&gt;&gt;(unit unit/ww/shared/requirements)
    &gt;&gt;&gt;(unit unit/ww/deluxe/requirements)
    &gt;&gt;&gt;(unit unit/ww/shared/install)
    &gt;&gt;&gt;(unit unit/ww/deluxe/install_options)        
</codeblock>
</figure>
<p>There are a number of ways to mix and match the basic reuse patterns to achieve an overall reuse strategy. Most systems designed to support reuse allow you to use all of these approaches and combine them as needed. However, don’t lose sight of the amount of complexity you introduce into your content and your writers’ workload when you rely on a complex set of reuse techniques.</p>
</section>
<section>
<title>Content reuse is not a panacea</title>

<p>Content reuse can seem like an easy win, and in some cases it can return substantial benefits, but there are pitfalls to be aware of. You need to plan carefully to make sure that you avoid the traps that await the unwary.</p>
<p>Many reuse techniques introduce a lot of complexity into the writer’s job and into the content itself. These techniques may address major sources of content complexity, but they come with a high cost in terms of new complexity introduced. Even if a reuse tool looks easy to use, it can introduce large amounts of complexity.</p>
<section>
<title>Rhetoric traps</title>

<p>Designing content to be reused can harm its rhetoric, either by distracting writers with complexity or by motivating them to prefer reusability over rhetorical quality. There are three main rhetoric traps with content reuse:</p>
<ul>
<li>
<p>Making content too generic</p>
</li>
<li>
<p>Losing the narrative flow</p>
</li>
<li>
<p>Failing to address the audience appropriately</p>
</li>
</ul>
<p>Many works on content reuse casually recommend making content more generic or more abstract as a means to making it more reusable, without saying anything about the potential downside. This is very dangerous and can do serious harm to the rhetorical quality of your content. Specific, concrete statements are easier to understand, and they communicate better than generic or abstract statements. Replacing specific and concrete statements with generic or abstract statements will reduce the effectiveness of your content significantly. This is a classic case of one process directing complexity away from itself without regard for the effect on the whole.</p>
<p>Unfortunately, as noted in <citation nameref="chapter.writing"/>, human beings suffer from <phrase><annotation type="concept">the curse of knowledge</annotation></phrase>. The curse of knowledge is a cognitive bias that makes it very hard for people who understand an idea to appreciate the difficulties that idea presents to people who do not understand it. The curse of knowledge makes a generic or abstract statement of an idea appear to the writer to be as clear as a concrete and specific statement – and perhaps more succinct and precise. This pulls writers away from the kind of specific and concrete statements that make ideas easier to comprehend. The desire to make content reusable reinforces this temptation.</p>
<p>Replacing the specific and concrete with the generic and abstract always reduces content quality and effectiveness. You may decide that the economic benefits of content reuse outweigh the economic costs of less effective content, but you should at least be aware that there are real economic consequences to this choice.</p>
<p>Another potential quality problem comes with the loss of narrative flow. Not all content has or needs a lengthy narrative flow, but if you start breaking your content into reusable units and putting those units back together in different ways, the narrative flow can easily be lost. In some cases you can avoid this problem by making your topics more self-contained, using an <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> information design. But don’t assume that you have an effective Every Page is Page One design just because you have broken your content into reusable units. If that content was written in a way that assumed a narrative flow, it won’t work when reused in a way that breaks that flow.</p>
<p>Finally, reuse can encourage you to come up with one way of telling our story that you present to all your audiences. But not all audiences are alike, and the way you tell your story to one audience may not work for another audience. Good rhetoric tells a good story to a particular audience. Two different tellings of the same story do not constitute redundant content if they address different audiences.</p>
</section>
<section>
<title>Cost traps</title>

<p>It is easy to see content reuse as a method to achieve big cost savings. Reusing content means you do not have to write the same content over and over again. It is easy to add up the cost of all that redundant writing and regard that number as pure cost savings from a content reuse strategy.</p>
<p>But all of the reuse techniques create multiple artifacts – including content and algorithms – that need to be managed. You need a mechanism to make sure that your content obeys the constraints required to make the pieces of content fit together reliably. You need a mechanism to make sure that your reuse processes produce the documents you need. The cost of such management can be non-trivial, and the consequences if the management breaks down can be significant.</p>
<p>While reuse is supposed to reduce the cost of modifying content when the subject matter changes, there are hidden cost traps here as well. It is often not until the subject matter changes that you find out if the content you have treated as common is really common. If not, you have to sort out what is common and what isn’t, which can involve complex edits that have to be tested and verified.</p>
<p>If you get everything right, you can realize major savings when it comes time to modify your content, but if you get it wrong, your costs can multiply. Not only that, you may find that the money you spent factoring duplicate content out in anticipation of a change that did not happen is wasted as well. Reacting to changes that actually happen is sometimes cheaper than preparing for multiple changes that never happen.</p>
<p>If your content collection and its web of reuse relationships is not audited and validated regularly, it can become chaotic over time and lose cohesion. This can make adding new content or changing existing content increasingly difficult and expensive.</p>
<p>Depending on the techniques you use, content reuse strategies can complicate the lives of writers, which may reduce the pool of writers you can use or reduce their productivity.</p>
<p>With many reuse techniques, writers have to look for reusable content frequently. Not only does this take time and add complexity, writers have to pay that cost every time they look for content to reuse, whether they find it or not. Indeed, if writers must look for reusable content before they write anything, much of their time may be taken up with unsuccessful content queries. Reducing the expense of content queries, therefore, has to be a major component of any general reuse strategy. I look  at this in more detail in <citation nameref="chapter.duplication"/>.</p>
<p>Localized and constrained forms of reuse can avoid this cost trap. For instance, if your reuse is focused on producing manuals for different versions of a product, you can avoid having writers make frequent broad-based content queries to find reusable content. You merely need to ensure that writers are aware of the reuse strategies used for their projects.</p>
<p>Some content reuse techniques are easy to use in non-structured ways, and early in a project, it may seem like a non-structured approach to reuse speeds things up by allowing writers to reuse content wherever they find it. Over time, however, this approach can lead to a rat’s nest of dependencies and relationships that makes it hard to update the content with any confidence.</p>
<p>Once the cohesion and discipline of a content set starts to break down, the decline can accelerate. As it becomes harder to find content to reuse, more duplication occurs, which further complicates the search for reusable content, creating a vicious cycle. As links and other content relationships break down, people tend to form ad hoc links and relationships to get a job finished, further tangling the existing rat’s nest. Under the gun, it is almost always easier to get the next document out by ignoring the discipline of the content set structure, but the effects of this are corrosive. Without consistent discipline, even in the face of deadlines, a reuse system can fail over time.</p>
<p>All of these issues can be managed successfully with the right techniques and the right tools, but they all introduce costs as well, both up-front costs and ongoing costs. Those costs have to be calculated and subtracted from the projected cost savings before you can determine if a content reuse strategy is going to save money.</p>
<p>One final trap: there may not be as much potential reuse as you thought. Some organizations have plunged into reuse strategies in hopes of a big payoff only to find that they had far less reusable content than they first thought. The cost of systems and the complexity added to the process by complex reuse techniques require a high level of reuse to pay off. If you can’t achieve that level of reuse, your system will end up costing you more than it saves.</p>
</section>
</section>
<section>
<title>Alternatives to reuse</title>

<p>Here are three alternatives to content reuse:</p>
<ll>
<li>
<label>Duplicate but label</label>

<p>Allow information to be expressed in more than one place but clearly label the information so you can easily find it when you need to do an update. If this sounds like an inferior solution, consider that reuse techniques cannot possibly eliminate all repeated information without adding more complexity than they eliminate. Therefore, no matter how much reuse you do, when you have a major change in subject matter, you will still have to search your content for places that need to be updated.</p>
</li>
<li>
<label>Reduce duplication</label>

<p>Content reuse is always content duplication. Reuse is predicated on the idea that you actually want to duplicate information in multiple publications. This idea is out of date. In the paper world, you had to give each customer a book that contained all the information needed, even if the same information occurred in many different books. But in an online environment, you don’t need to duplicate information to make it available to every user who needs it. Maintaining the information once and linking to it whenever it is needed is often a much less complex solution. To do this efficiently may require some of the techniques described in <citation nameref="chapter.linking"/>.</p>
</li>
<li>
<label>Combine and differentiate</label>

<p>Another approach to reducing duplication in your content is to combine information on multiple products into a single publication and differentiate them in the text. There are limits to this, obviously, and some organization got into content reuse specifically so that they could remove the complexity of handling multiple versions in a single manual. Still, there are times when it is an appropriate solution.</p>
</li>
</ll>
</section>
</chapter>
