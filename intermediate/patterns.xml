<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.patterns">
<title>Patterns</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept">affordances</annotation></phrase> <phrase><annotation type="concept">AI</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">apps</annotation></phrase> <phrase><annotation type="concept" specifically="block-and-map architecture">block and map architecture</annotation></phrase> <phrase><annotation type="concept">block-and-map architecture</annotation></phrase> <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up architecture</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content engineering</annotation></phrase> <phrase><annotation type="concept">content hygiene</annotation></phrase> <phrase><annotation type="concept">content plan</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">curse of knowledge</annotation></phrase> <phrase><annotation type="concept">desktop publishing system</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">Duplication</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">filtering</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept" specifically="information architecture">information architectures</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information scent</annotation></phrase> <phrase><annotation type="concept">information snacking</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept" specifically="information snacking">information-snacking</annotation></phrase> <phrase><annotation type="concept">information-typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management domains</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">Management domains</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept" specifically="management domain">management-domain</annotation></phrase> <phrase><annotation type="concept" specifically="markup language">markup languages</annotation></phrase> <phrase><annotation type="concept">markup language</annotation></phrase> <phrase><annotation type="concept">markup</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media-domain</annotation></phrase> <phrase><annotation type="concept" specifically="media domain">media domains</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">namespace</annotation></phrase> <phrase><annotation type="concept">natural language processing</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">out-of-band communication</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">profiling</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical quality</annotation></phrase> <phrase><annotation type="concept">rhetorical structure</annotation></phrase> <phrase><annotation type="concept" specifically="rhetoric">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">schema language</annotation></phrase> <phrase><annotation type="concept" specifically="schema">Schemas</annotation></phrase> <phrase><annotation type="concept" specifically="schema">schemas</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">social networks</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">stop list</annotation></phrase> <phrase><annotation type="concept">structural block</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style guide</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">Subject</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology management</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">vector graphics</annotation></phrase> <phrase><annotation type="concept">web publishing</annotation></phrase> <phrase><annotation type="concept">Wikipedia</annotation></phrase> <phrase><annotation type="concept">workflow</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase> <phrase><annotation type="concept">glyphs</annotation></phrase> <phrase><annotation type="concept" specifically="hierarchical information architecture">hierarchical information architectures</annotation></phrase></p>
<p>Markup Languages</p>
<p><phrase><annotation type="markup-language">ASCIIDOC</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">CommonMark</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="markup-language">GitHub flavored Markdown</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">HTML5</annotation></annotation></phrase> <phrase><annotation type="markup-language">JavaDoc</annotation></phrase> <phrase><annotation type="markup-language">LaTeX</annotation></phrase> <phrase><annotation type="markup-language">Lightweight DITA</annotation></phrase> <phrase><annotation type="markup-language">Markdown</annotation></phrase> <phrase><annotation type="markup-language">mathml</annotation></phrase> <phrase><annotation type="markup-language">reStructuredText</annotation></phrase> <phrase><annotation type="markup-language">SAM</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">SGML</annotation></annotation></phrase> <phrase><annotation type="markup-language">TeX</annotation></phrase> <phrase><annotation type="markup-language">vCard</annotation></phrase> <phrase><annotation type="markup-language">Wiki markup</annotation></phrase> <phrase><annotation type="markup-language">XLIFF</annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="markup-language"><annotation type="standard">XHTML</annotation></annotation></phrase></p>
<p>Schema languages</p>
<p><phrase><annotation type="schema-language">XSD</annotation></phrase> <phrase><annotation type="schema-language" specifically="XSD">XML schema</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="programming-language">cascading style sheets</annotation></phrase> <phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase> <phrase><annotation type="language-language">XSL-FO</annotation></phrase> <phrase><annotation type="programming-language">XSLT</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">Assemble from Pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="assemble from pieces">assemble from pieces</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audits</annotation></phrase> <phrase><annotation type="algorithm" specifically="auditing algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm" specifically="avoiding duplication">avoids duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm" specifically="collaboration">collaborate</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance-checking algorithm</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="algorithm">content generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content generation</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content management algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">content-generation algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content generation algorithm">Generating content</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">eliminating duplication</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithms</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extraction algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting algorithms</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content form formatting">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm" specifically="separating content from formatting">separation of content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool" specifically="API documentation tool">API documentation tools</annotation></phrase> <phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="component content management system">CCMS</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">component content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing application</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing programs</annotation></phrase> <phrase><annotation type="tool" specifically="desktop publishing system">desktop publishing</annotation></phrase> <phrase><annotation type="tool">desktop publishing system</annotation></phrase> <phrase><annotation type="tool">DITA CMS</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool" specifically="formatting language">formatting languages</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting software</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">GitHub</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Jekyll</annotation></phrase> <phrase><annotation type="tool">Liquid</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool" specifically="search engine">Search engines</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">SPFE Open Tool Kit</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool" specifically="static site generator">static site generators</annotation></phrase> <phrase><annotation type="tool">structured editor</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">validator</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> <phrase><annotation type="tool">WordPerfect</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool" specifically="XML editor">XML editors</annotation></phrase> <phrase><annotation type="tool">XML editor</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">wikis</annotation></phrase> <phrase><annotation type="tool" specifically="wiki">Wikis</annotation></phrase> <phrase><annotation type="tool" specifically="word processor">Word processors</annotation></phrase> <phrase><annotation type="tool">word processor</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role" specifically="content engineer">content engineers</annotation></phrase> <phrase><annotation type="role">content strategist</annotation></phrase> <phrase><annotation type="role" specifically="content strategist">content strategists</annotation></phrase> <phrase><annotation type="role">document designer</annotation></phrase> <phrase><annotation type="role" specifically="document designer">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role" specifically="information architect">information architects</annotation></phrase> <phrase><annotation type="role">prepress operator</annotation></phrase> <phrase><annotation type="role">publication designer</annotation></phrase> <phrase><annotation type="role" specifically="publication designer">publication designers</annotation></phrase> <phrase><annotation type="role" specifically="subject matter expert">subject matter experts</annotation></phrase> <phrase><annotation type="role" specifically="terminologist">terminologists</annotation></phrase> <phrase><annotation type="role">terminologist</annotation></phrase> <phrase><annotation type="role">typesetter</annotation></phrase> <phrase><annotation type="role">webmaster</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>People <phrase><annotation type="person">Donald Knuth</annotation></phrase> <phrase><annotation type="person">Gutenberg</annotation></phrase> <phrase><annotation type="person">Henry Ford</annotation></phrase> <phrase><annotation type="person">John Gruber</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">fragment</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">map</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure" specifically="rhetorical block">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">tables of contents</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure" specifically="table">tables</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure" specifically="topic">topics</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">books</annotation></phrase> <phrase><annotation type="media">CD-ROM</annotation></phrase> <phrase><annotation type="media">ebooks</annotation></phrase> <phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Interactive Electronic Technical Manuals</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase></p>
</annotations>
<index>
<record>
<type>concept</type>
<term>patterns</term>
</record>
</index>
<p>I noted that lightweight markup languages such as <phrase><annotation type="markup-language">Markdown</annotation></phrase> rely on patterns in the text rather than explicit markup characters to delineate basic structures. XML, on the other hand, makes a strict distinction between what is markup and what is text. Markup is always recognized explicitly by markup sequences that cannot occur as normal text in any part of the document.</p>
<p>All the same, even XML markup is defined by patterns. The <phrase><annotation type="standard">XML specification</annotation></phrase> defines XML using a series of patterns written in a notation called <phrase><annotation type="language">EBNF</annotation></phrase>. The difference between XML syntax and Markdown syntax is that in XML, patterns are defined absolutely, so a markup start character is a markup start character no matter where it occurs, whereas in Markdown, the patterns are defined in context, so a <code>*</code> character starts a list item only at the beginning of a line, not the end.</p>
<p>Since markup is all about patterns, you are not confined only to the patterns defined by the markup language itself. There are lots of patterns that occur naturally in content, and you can recognize those patterns and act on them with algorithms even if they are not formally marked up in your markup language.</p>
<p>A common example of this is the pattern of a URL. In most Web-based editors, if you enter a URL as plain text (with no markup identifying it as a URL), the editor recognizes the pattern and turns the URL into a clickable link in the HTML output.</p>
<p>Recognizing patterns, rather than forcing writers to mark them up explicitly, can increase functional lucidity significantly. Consider something as simple as a date. A date is a complex piece of data consisting of at least three elements, the year, month, and day. (It gets more complex if you include the day of the week or the time.) If you need those individual components of a date for processing purposes, you might be tempted to require dates to be marked up like this:</p>
<codeblock language="sam">
date: {2016}(year)-{08}(month)-{25}(day)
</codeblock>
<p>or</p>
<codeblock language="sam">
date:
    year: 2016
    month: 08
    day: 25
</codeblock>
<p>This is fully explicit markup. It places every piece of the data in its own explicit structure. However, it lacks <phrase><annotation type="concept">functional lucidity</annotation></phrase>.</p>
<p>A date in the format <code>2016-08-25</code> is already a piece of structured markup, which is defined by <phrase><annotation type="standard">ISO 8601</annotation></phrase>, an international standard. The only problem with marking up a date using this format is that in another context <code>2016-08-25</code> could be a mathematical expression that resolves to <code>1983</code>. But you can eliminate this potential confusion if you isolate the context so that a processor can recognize when you use an <phrase><annotation type="standard">ISO 8601</annotation></phrase> date. In other words, all you need to do is create an annotation, as shown here:</p>
<codeblock language="sam">
{1941-12-07}(date) is a day that will live in infamy. 
</codeblock>
<p>If you want to enter the date in another format, you can annotate it with the <phrase><annotation type="standard">ISO 8601</annotation></phrase> format to make the meaning clear to algorithms:</p>
<codeblock language="sam">
{December 7, 1941}(date "1941-12-07") is a day 
that will live in infamy. 
</codeblock>
<p>Of course, a sufficiently clever algorithm could recognize <code>December 7, 1941</code> as a date as well, because it is a predictable pattern. One of the defining features of patterns is that you can recognize the semantic equivalence between two patterns that express the same information. You can increase the <phrase><annotation type="concept">functional lucidity</annotation></phrase> of your markup by recognizing a variety of semantically equivalent patterns, rather than imposing a uniform syntax on writers.</p>
<section>
<title>Design implications</title>

<p>XML recognizes the value of patterns. The XML data types standard<citation>https://www.w3.org/TR/xmlschema-2/</citation> defines a number of common patterns, and the XML schema language (<phrase><annotation type="schema-language">XSD</annotation></phrase>)<citation>https://www.w3.org/standards/xml/schema</citation> allows you to define patterns for use in your own markup. It calls these patterns “simple types” (as opposed to “complex types,” which are composed of multiple nested elements). Thus, in <phrase><annotation type="schema-language">XSD</annotation></phrase>, you can specify that the contents of a date field must conform to the simple type <code>xs:date</code>, which is a pattern based on <phrase><annotation type="standard">ISO 8601</annotation></phrase>. If the schema defines the data type for the <code>date</code> element as <code>xs:date</code>, you can do following:</p>
<codeblock language="xml">
&lt;date&gt;1941-12-07&lt;/date&gt; is a day that will live in infamy. 
</codeblock>
<p>It is important to understand what this does. If the type of element <code>date</code> in your XML markup language is defined as <code>xs:date</code>, then an XSD <phrase><annotation type="tool">schema validator</annotation></phrase> will accept <code>1941-12-07</code> as a valid date but reject <code>&lt;date&gt;last Thursday&lt;/date&gt;</code> as invalid. It does not break the date down into year, month, and day components. If you need that, you have to get your algorithm to do that job. But your algorithm can reliably break down the date because the markup constrains the interpretation, establishing that it is indeed an <phrase><annotation type="standard">ISO 1806</annotation></phrase> date. Most programming languages have library functions that know how to manipulate <phrase><annotation type="standard">ISO 8601</annotation></phrase> dates, so you probably don’t have to do any work yourself to get the year, month, and day components of a date.</p>
<p>For other patterns, most programming languages have a library called “regular expressions,” which you can use to rip a pattern apart and get at the pieces. XSD goes a step further and lets you define new patterns using regular expressions. <phrase><annotation type="tool">Regular expressions</annotation></phrase> let your algorithms decode patterns in your content, as long as those patterns are sufficiently constrained by their context. This frees writers from having to explicitly break down many types of information into separate fields.</p>
<p>For example, in most of our recipe examples, we have explicitly broken down the items in an ingredient list into ingredient, quantity, and unit of measure like this:</p>
<codeblock language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 12, each
    water, 2, qt
</codeblock>
<p>That format is not terribly onerous to write, but there is still a small functional lucidity penalty. A writer might more naturally write:</p>
<codeblock language="sam">
ingredients::
    eggs 12
    water 2qt
</codeblock>
<p>Ingredient name, quantity, and unit of measure are still distinct. Any human reader can see them instantly. The trick is to get an algorithm to read them the same way. This trick can be accomplished fairly easily using a regular expression:<citation idref="fn.regex"/></p>
<codeblock language="re">
(?P&lt;ingredient&gt;.+?)(?P&lt;quantity&gt;\d+)(?P&lt;unit&gt;qt|tsp|tbsp)?
</codeblock>
<footnote id="fn.regex">
<p>This regular expression is deliberately simple and does not include a full list of all the possible names for units of measures. You would need a more precise expression for production quality code, but it would be distractingly verbose for our present purpose.</p>
</footnote>
<p>To show you how this works, here is a set of ingredient values:</p>
<codeblock language="text">
eggs 12
water 4qt
salt 1tsp
butter 2tbsp
pork chops 4
</codeblock>
<p>Here is the result of applying the regular expression above to those values (this is a report generated by regex101.com, a fantastic site for designing and testing regular expressions):</p>
<codeblock language="text">
Match 1
Full match    0-7    `eggs 12`
Group `ingredient`    0-5    `eggs `
Group `quantity`    5-7    `12`

Match 2
Full match    8-17    `water 4qt`
Group `ingredient`    8-14    `water `
Group `quantity`    14-15    `4`
Group `unit`    15-17    `qt`

Match 3
Full match    18-27    `salt 1tsp`
Group `ingredient`    18-23    `salt `
Group `quantity`    23-24    `1`
Group `unit`    24-27    `tsp`

Match 4
Full match    28-40    `butter 2tbsp`
Group `ingredient`    28-35    `butter `
Group `quantity`    35-36    `2`
Group `unit`    36-40    `tbsp`

Match 5
Full match    41-53    `pork chops 4`
Group `ingredient`    41-52    `pork chops `
Group `quantity`    52-53    `4`
</codeblock>
<p>As you can see, the regular expression has broken each ingredient down into ingredient, quantity, and unit fields, just like our explicit markup did. The conventional way of writing ingredients, in other words, is just as structured as our formal way. It just takes a line of code to pull them out of the string. Once again we are partitioning and transferring a bit of complexity from the writer to the <phrase><annotation type="role">information architect</annotation></phrase> or <phrase><annotation type="role">content engineer</annotation></phrase>.</p>
<p>Essentially, any expression that you commonly use in text and that follows a well-defined pattern is already structured text, and you don’t need to structure it again. All you need to do is to use structure to place it into context so that an algorithm can recognize it reliably. For example, the regular expression for breaking down the components of an ingredient listing only works when applied to text that you are sure is an ingredient listing. Thus, you use normal structured text to delineate the ingredients list and each list item. This provides the necessary context for an algorithm to use the ingredient list pattern to pull out the ingredient, quantity, and unit fields without forcing the writer to make them explicit in the text.</p>
<p>Avoiding unnecessary markup of already recognizable patterns both simplifies your markup design and increase the <phrase><annotation type="concept">functional lucidity</annotation></phrase> of your markup languages.</p>
<p>If you were creating this recipe structure in <phrase><annotation type="markup-language"><annotation type="standard">XML</annotation></annotation></phrase> and using <phrase><annotation type="schema-language" specifically="XSD">XML Schema</annotation></phrase> (XSD) as your schema language, you could create a data type for the ingredient field that would verify that the text matched the expected pattern (see <citation idref="fig.xsd-ingredients"/>).</p>
<figure id="fig.xsd-ingredients">
<title>XSD schema type definition for ingredients</title>

<codeblock language="xsd">
&lt;xsd:element name="ingredient"&gt;
    &lt;xsd:simpleType&gt;
        &lt;xsd:restriction base="xsd:string"&gt;
            &lt;xsd:pattern value="(.+?)(\d+)(qt|tsp|tbsp)?"/&gt;
        &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
&lt;/xsd:element&gt;  
</codeblock>
</figure>
<p>This type definition ensures that an error will be raised if the writer enters ingredients in the wrong form or uses the wrong names for units. For instance, these ingredient list items would trigger an error:</p>
<codeblock language="xml">
&lt;ingredients&gt;
    &lt;ingredient&gt;12 eggs&lt;/ingredient&gt; 
    &lt;ingredient&gt;water 2 cups&lt;/ingredient&gt;
    &lt;ingredient&gt;butter 4 lumps&lt;/ingredient&gt;
&lt;/ingredients&gt;
</codeblock>
<p>The first <code>ingredient</code> fails because the quantity (12) appears before the ingredient, not after. The next two fail because cups and lumps are not on the list of strings recognized by the pattern, which probably should be extended to allow cups, but not lumps. In <citation idref="fig.xsd-ingredients"/>, the names of the fields that were present in the original regular expression are omitted because XML schema is not going to break the values apart and put them in separate fields for us. As far as XML schema is concerned, this is just the definition of a single element. It would be up to a processing application to break the pieces apart into make separate fields.</p>
<p>By the way, though I have used the ingredients listing as an example here, I probably would not use this pattern in a production system. While the <code>eggs, 12, each</code> structure is a tiny bit unnatural, its explicitness makes it less error prone. It is less likely that writers will get the order of information wrong and have to pause to deal with an error message. Asking writers to break the information apart explicitly is probably the lesser of two evils. When using patterns to improve functional lucidity, you need to balance naturalness against explicitness.</p>
</section>
</chapter>
