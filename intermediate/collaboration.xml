<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.collaboration">
<title>Collaboration</title>

<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>algorithms</type>
<term>collaboration</term>
</record>
</index>
<p>Creating an effective <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> for a large content set requires collaboration. If your work has to be integrated with the work of others, you have to make decisions that affect or are affected by the work of others. This means you need information about their work, and you need the skills required to integrate your work with theirs. In other words, your work becomes more complex when you collaborate with others.</p>
<p>As Tom Johnson writes:</p>
<blockquote>
<citation value="http://idratherbewriting.com/2016/12/14/higher-level-technical-writing/"/>
<p>So often we place the bar for contribution at whether someone can write. In reality, it’s not just whether someone can construct clear, grammatically correct sentences. It’s whether the person can integrate the information into a larger documentation set.</p>
</blockquote>
<p>And, of course, the larger the documentation set becomes, the more complex the task of integration becomes, to the point where it can quickly come to exclude the participation of anyone except full-time writers who have specific training. How does each collaborator know what others are doing? How do they know which parts of the wider work they are responsible for? How do they integrate their work with the work of others? How do you manage the overhead created when collaborators have to be aware of other people’s work as well as their own? How do you maintain process efficiency and rhetorical quality when writers can’t work without knowing what everyone else is doing all the time?</p>
<p>The fundamental constraint on collaboration is the amount of time that collaborators have to spend on collaborative activities – orienting themselves to the work of others and integrating their work with the work of others – as opposed to creating new work. Unless you can ease this burden you quickly reach the point where adding more collaborators actually slows the project down because every new person you add increases the total collaboration overhead by more than the amount of work time that person can add to the project. Once this state is reached, either the volume and pace of work plateaus (or declines if even more people are added to the project) or some of the required coordination is abandoned, with the inevitable impacts on process and rhetoric.</p>
<p>Before the web, organizations handled the overhead of collaboration largely by assigning different books, pamphlets, and other publications to different writers and issuing some basic style guidance for language, physical appearance, and layout. All the other aspects of collaborative complexity – such as making sure that everyone was saying the same thing at the same time in the same way, that people were not creating the same content over and over again, that at least one person was saying everything that needed to be said, and that the best rhetorical models were being followed – were ignored, and the results were dumped on the customer in the form of information that was inconsistent, incomplete, incorrect, contradictory, hard to understand, and hard to find.</p>
<p>With the advent of the web, the same content, produced using the same non-communicative approach to collaboration, got dumped onto the company website. It wasn’t any better or worse than it was before, but because it was now all <phrase><annotation type="concept">searchable</annotation></phrase> in one place, the <phrase><annotation type="algorithm">quality</annotation></phrase> problems became much more obvious.  In response to this mess, the discipline of <phrase><annotation type="concept">content strategy</annotation></phrase> was born.</p>
<p>One of the challenges of collaboration between different roles and departments in an organization has always been that writers used different tools or, if they used the same tools, those tools didn’t support collaboration or content integration. One approach to addressing this problem has been to adopt a universal platform. In most cases, this universal platform has only been for web content, though there are some that attempt to be a universal platform for every piece of content that the organization creates.</p>
<p>Some of these universal platforms are designed for simplicity, aiming to create a platform that anyone can use with minimal training. Examples include wikis and certain web CMS platforms. These platforms cannot support capabilities such as more sophisticated publishing, content integration, content reuse, consistent rhetoric, or any kind of systematic content management. Other platforms attempt to provide a full range of content management, reuse, integration, and publishing capabilities, but they generally prove too difficult for many contributors. Finding a happy medium can be difficult.</p>
<section>
<title>Partitioning collaboration</title>

<p>The central problem of collaboration is how much collaborators have to know about each other’s work and what they have to do to integrate their work with content from other collaborators. The way you reduce the collaborative overhead is to reduce what each collaborator has to know and do to ensure that content works together.</p>
<p>This same need to reduce overhead occurs in the programming world. There, the solution to this problem is the Application Programming Interface (API). An API is a standardized, structured, published method for calling code written by someone else. With an API in place, programmers have to know far less in order to write code that works with other people’s code. They just call the API.</p>
<p>An API acts as a set of constraints. It tells programmers exactly what they have to do to get the result they want. If they meet the constraints, they should be confident that the code will produce the promised results.</p>
<p>Structured writing does something similar for the collaboration problem in content. It is not exactly the same, because content does not call other content – at most it links to it. But structured writing languages provide constraints that writers must follow. If those constraints are well designed, they can tell writers all they need to know to ensure that their content will integrate with other contributors’ content in the information architecture.</p>
<p>For example, if you have many writers contributing to a cookbook and they use a <phrase><annotation type="concept">subject-domain</annotation></phrase> structured writing format such as the one in this book, each writer does not have to know how the other writers format their recipes or whether they include serving counts or nutritional information. The subject-domain recipe format becomes a kind of content creation API that allows writers to write with confidence and without having to know what everyone else is doing. If they use some of the techniques discussed in <citation nameref="chapter.duplication"/>, they also don’t have to worry about accidentally duplicating an existing recipe.</p>
<p>More than this, however, recipe writers want readers to have the ability to access information about cooking implements and techniques mentioned in the text. Providing these abilities is the very stuff of information architecture and what sets it apart from mere cataloging.</p>
<p><phrase><annotation type="concept">Subject-domain</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> of tasks and tools (as described in <citation nameref="chapter.linking"/>) allows writers to pass on to readers the information required to deal with these matters. These annotations enable <phrase><annotation type="role">information architect</annotation></phrase>s to use the <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> techniques described in <citation nameref="chapter.linking"/> to construct and maintain the architecture and the <phrase><annotation type="algorithm">audit</annotation></phrase> techniques described in <citation nameref="chapter.audit"/> to monitor coverage and discover new content requirements. Thus, writers don’t have to communicate with their collaborators by any means outside of the content itself, greatly reducing the collaborative overhead of the process and giving them more time to write and to focus on accuracy and rhetoric.</p>
</section>
<section>
<title>Dealing with diverse collaborators</title>

<p>Part of the complexity of collaboration is the difference in skills, knowledge, and background between contributors. Some of your contributors may be full-time professional writers, while others may be engineers, marketers, field personnel, or support people for whom communication is an important, but not central, part of their jobs. Asking all these people to use the same tools and structures imposes far more difficulties on one group than another.</p>
<p>It makes perfect sense in these situations to design a collaborative system that distributes authoring complexity from one group of contributors to another; from your occasional contributors to your full-time writers, for example, or, better still, to your <phrase><annotation type="role">information architects</annotation></phrase> and <phrase><annotation type="role">content engineers</annotation></phrase>. People can handle far more complexity in their core task than they can in any of their peripheral tasks. Asking occasional contributors to fill in a form that captures all the elements needed to create an effective document according to a tested rhetorical pattern is far more effective than presenting them with a blank wiki page and much less complex than asking them to create a <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> or <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> document from scratch.</p>
<p>A structured writing approach in which different contributors use different structured writing languages, each best suited to their contributions, can be very effective. Of course, any use of structured writing distributes some degree of complexity towards writers, since they now must know and follow the structure. On the other hand, structured writing can also distribute a lot of complexity away from the writer. While a blank page may seem like the simplest possible interface, it gives no task guidance at all. It is an interface without <phrase>affordances</phrase> that forces every contributor not only to write but also to design the information, decide what needs to be said, and determine how to say it.</p>
<p>General <phrase><annotation type="concept">document-domain</annotation></phrase> structured writing languages don’t help; they offer no rhetorical guidance at all. Yet, they still demand that writers conform to structures dictated by the needs of the publishing process – needs that are meaningless to anyone other than a full-time professional writer.</p>
<p>Structured writing can give writers a rhetorically specific authoring interface, thereby distributing the design complexity to an <phrase><annotation type="role">information architect</annotation></phrase> who designs the structured writing language. What is vital here, however, is that the structured writing language not distribute any other complexity to the writer. Any language that requires writers to master <phrase><annotation type="algorithm">publishing</annotation></phrase> or <phrase><annotation type="process">content management</annotation></phrase> concepts, for instance, is not going to work well for this purpose. What works is a simple <phrase><annotation type="concept">subject-domain</annotation></phrase> language that addresses writers in terms they already understand and asks for annotations using concepts and ideas that they already know.</p>
</section>
<section>
<title>Wikis</title>

<p>One of the more common reasons for introducing <phrase><annotation type="process">content management</annotation></phrase> and/or structured writing to an organization is to improve collaboration. However, these techniques are certainly not the only way to facilitate collaboration. In fact, the more common approach is to create simple and largely unstructured tools such as message boards and <phrase>wikis</phrase>. One of the largest collaborative projects in the world – <phrase>Wikipedia</phrase> – runs on a wiki using a fairly simple <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> that is often hidden behind a simple <phrase><annotation type="concept">WYSIWYG</annotation></phrase> editor.</p>
<p>This is powerful model for collaboration because it is inexpensive, readily available, and requires minimal technical skills. But it is also a model that distributes almost all of the rhetorical and management complexity to people rather than algorithms. There is simply not enough structure in this model to allow you to transfer very much complexity to an algorithm. Nor is there anyone making sure that all of the complexity gets handled. The system relies on the uncoordinated work of volunteers for <phrase><annotation type="algorithm">auditing</annotation></phrase> and <phrase><annotation type="process">content management</annotation></phrase> as much as it does for content creation.</p>
<p>Why, then, turn to a more complex structured writing system for collaboration? In a word: <phrase>integration</phrase>. The kind of collaboration supported by message boards and wikis chiefly means that everybody can see what everyone else is doing. Any connections between the pieces created by different people are loose and non-critical, mostly taking the form of ad hoc <phrase><annotation type="media">hypertext</annotation></phrase> links. And such connections are managed by large-scale community efforts. <phrase>Wikipedia</phrase> is full of links between articles largely because anyone can edit an article and add a link to an article on a related subject.</p>
<p>But not all collaboration can rely on such loose and uncoordinated activity. Often you need to bring the pieces created by collaborators together to form an integrated and cohesive whole. You can do that by hand, of course, but that can be cumbersome and time consuming. It may be hard for any one coordinator to keep up with all the content being created, especially if new content is continually being written without any freeze period to allow integration to take place.</p>
<p>Equally important, the collaborators on a message board or a larger <phrase><annotation type="tool">wiki</annotation></phrase> such as <phrase>Wikipedia</phrase> are largely ignorant of each other and each other’s activity. Duplication of effort and even outright contradiction may be frequent. If you have huge numbers of volunteers constantly looking for duplication and contradictions, as Wikipedia does, you can live with this (though there will always be parts of the system that are in error at any given time). However, an organization that pays its writers and editors may not be able to afford this labor-intensive approach. It may need a more efficient way to coordinate the activity of its collaborators to avoid duplication and error. This means using structured writing to transfer a lot of that complexity and effort to algorithms.</p>
</section>
<section>
<title>Management-domain structured writing</title>

<p>Languages, such as <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>, that rely on the management domain, move a lot of the complexity of <phrase><annotation type="process">content management</annotation></phrase> and <phrase><annotation type="algorithm">collaboration</annotation></phrase> into the source files in the form of <phrase><annotation type="concept">management-domain</annotation></phrase> structures. That complexity is transferred to any writer who works directly in <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>. In a collaborative environment, this management-domain burden is transferred to the collaborators, which means that it takes more time, discipline, skill, and knowledge to be an effective collaborator.</p>
<p>This is not to say that adopting this model is not a step in the right direction. This approach may impose a management system that is complex and demanding to use, but it often replaces a system in which management – and the tools and capacity to manage – was non-existent. Difficult and complex management techniques may be better than no management at all.</p>
<p>A well-designed <phrase><annotation type="concept">management-domain</annotation></phrase> system backed by well-designed tools may reduce the collaboration overhead compared to ad hoc methods, but it still leaves a lot of the collaborative overhead on the writer’s plate. Therefore, the same limits on the effective scale of collaboration apply, although they have been pushed out a little. Alternative approaches have a greater potential to reduce overhead at all scales.</p>
</section>
<section>
<title>Bridging silos</title>

<p>There is a lot of talk in <phrase><annotation type="process">content management</annotation></phrase> circles about breaking down <phrase><annotation type="concept">content silos</annotation></phrase>. By <phrase><annotation type="italic">silo</annotation></phrase>, I mean a closed system in which neither the tools nor the participants communicate to others – or even make available for discovery – what they writing. It is difficult, of course, to create an integrated and effective <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> when different content groups operate in complete isolation from one another.</p>
<p>It is certainly possible to overstate the case here. Not every piece of content produced by an organization needs to be fully and seamlessly integrated with every other piece, and asking any current silo to open itself up to the wider organization likely means adding significant complexity in the form of additional knowledge and skills required to integrate content and systems with the rest of the organization. Not every silo must be torn down, but if silos are compromising your <phrase><annotation type="concept">content strategy</annotation></phrase> and <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase>, then you need to open up their content and processes to integrate better with the wider organization.</p>
<pagination-tweak>
<min-space>3in</min-space>
</pagination-tweak>
<p>The naive way to do this it to have everyone use a single system and a single markup language. There are two ways to do this:</p>
<ul>
<li>
<p>Adopt a simple <phrase><annotation type="concept">document-domain</annotation></phrase> language, such as <phrase><annotation type="language">Markdown</annotation></phrase>, that everyone can easily learn. The disadvantage is that such languages do not offer enough structures to meet everyone’s needs or to support process and rhetoric.</p>
</li>
<li>
<p>Adopt a large, complex document-domain language, such as <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> or <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase>, that offers structures to meet most needs. The disadvantage is that such languages have poor <phrase><annotation type="concept">functional lucidity</annotation></phrase>, especially for part-time contributors.</p>
</li>
</ul>
<p>Each approach focuses on one problem and pays no attention to where the complexity that is directed away from that problem gets dumped.</p>
<p>The most pernicious myth about collaboration is that everyone must use the same tools and must understand each other’s work. In fact, this is the worst way to collaborate, because it creates a huge amount of overhead that can make it difficult get anything done. Efficient collaboration is achieved by limiting how much collaborators have to know about each other’s work and each other’s tools. This allows each group or individual to work efficiently while still creating a product that can be integrated successfully with the work of others.</p>
<p>This approach to collaboration is seen throughout the worlds of engineering and computer programming. The secret ingredient that allows workers to collaborate with minimal knowledge of each other’s work is the interface. A structured writing language is an interface to content creation that works by partitioning and redirecting the complexity of the content system.</p>
<p>To look at it another way, structured writing is a <phrase><annotation type="italic">tool</annotation></phrase> for partitioning and redirecting complexity in a content system. The examples we have examined so far have looked at ways in which content decisions can be partitioned away from writers towards <phrase><annotation type="role">document designers</annotation></phrase>, <phrase><annotation type="role">content strategists</annotation></phrase>, <phrase><annotation type="role">information architects</annotation></phrase>, and <phrase><annotation type="role">content engineers</annotation></phrase>. But structured writing can also be used to partition decisions differently for different types of contributors, so that the interfaces they are asked to use are a good match for the kinds of decisions they are qualified to make and shield them from those they are not qualified to make.</p>
<pagination-tweak>
<min-space>3in</min-space>
</pagination-tweak>
<p>Part of a well partitioned system is limiting what people in different partitions have to know about each other’s work. This has three benefits:</p>
<ul>
<li>
<p>It means there is less collaboration and communication overhead between partitions, making for a more efficient and reliable process. (The less information flow your processes require, the less vulnerable you are to breakdowns in the information flow.)</p>
</li>
<li>
<p>It means people working in the partition can focus on their own work with the minimum of distractions, allowing them to do more work of higher quality.</p>
</li>
<li>
<p>It reduces the complexity of working in the partition, which reduces the number of decisions that people working in the partitions have to make, which reduces the knowledge and skills they need to work successfully, which means you can recruit a wider range of people to work in the partition, including those with greater skills and knowledge in the core business of the partition and occasional contributors from other disciplines and other departments.</p>
</li>
</ul>
<p>Silo is just another name for partition. If silos are a problem in your organization, this means that your system is partitioned incorrectly. The worst possible response to this is to simply break down the walls of all the silos, since this exposes every contributor to the full complexity of the content creation process with massive negative impacts on process and rhetoric. The correct approach is to re-partition your process to make sure that every part of the complexity of your content creation process is handled by a person or process with the knowledge, skills, and resources to handle it.</p>
</section>
</chapter>
