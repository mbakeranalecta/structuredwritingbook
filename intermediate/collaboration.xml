<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.collaboration">
<title>Collaboration</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">adaptive content</annotation></phrase> <phrase><annotation type="concept" specifically="algorithm">algorithms</annotation></phrase> <phrase><annotation type="concept">algorithm</annotation></phrase> <phrase><annotation type="concept">annotations</annotation></phrase> <phrase><annotation type="concept">annotation</annotation></phrase> <phrase><annotation type="concept">bottom-up information architecture</annotation></phrase> <phrase><annotation type="concept">categories</annotation></phrase> <phrase><annotation type="concept">categorization</annotation></phrase> <phrase><annotation type="concept">classification</annotation></phrase> <phrase><annotation type="concept">consistency</annotation></phrase> <phrase><annotation type="concept">constraints</annotation></phrase> <phrase><annotation type="concept">content silos</annotation></phrase> <phrase><annotation type="concept">content strategy</annotation></phrase> <phrase><annotation type="concept">coverage</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">document type</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">electronic media</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">extensibility</annotation></phrase> <phrase><annotation type="concept">faceted navigation</annotation></phrase> <phrase><annotation type="concept">feeds</annotation></phrase> <phrase><annotation type="concept">findability</annotation></phrase> <phrase><annotation type="concept">frameworks</annotation></phrase> <phrase><annotation type="concept">functional lucidity</annotation></phrase> <phrase><annotation type="concept">functionally lucid</annotation></phrase> <phrase><annotation type="concept">future proofing</annotation></phrase> <phrase><annotation type="concept">future proof</annotation></phrase> <phrase><annotation type="concept">guidance</annotation></phrase> <phrase><annotation type="concept">hierarchical structure</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept">information design</annotation></phrase> <phrase><annotation type="concept">information foraging</annotation></phrase> <phrase><annotation type="concept">information mapping</annotation></phrase> <phrase><annotation type="concept">information typing</annotation></phrase> <phrase><annotation type="concept">interactive media</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase> <phrase><annotation type="concept">navigation</annotation></phrase> <phrase><annotation type="concept">normalization</annotation></phrase> <phrase><annotation type="concept">personalized content</annotation></phrase> <phrase><annotation type="concept">progressive disclosure</annotation></phrase> <phrase><annotation type="concept">referential integrity</annotation></phrase> <phrase><annotation type="concept">rendering problems</annotation></phrase> <phrase><annotation type="concept">reuse of patterns</annotation></phrase> <phrase><annotation type="concept">rhetorical</annotation></phrase> <phrase><annotation type="concept">rhetoric</annotation></phrase> <phrase><annotation type="concept">searchable</annotation></phrase> <phrase><annotation type="concept">search</annotation></phrase> <phrase><annotation type="concept">specialization</annotation></phrase> <phrase><annotation type="concept">structured content type</annotation></phrase> <phrase><annotation type="concept">structured writing domains</annotation></phrase> <phrase><annotation type="concept">style</annotation></phrase> <phrase><annotation type="concept">subject affinities</annotation></phrase> <phrase><annotation type="concept">subject affinity</annotation></phrase> <phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">taxonomy</annotation></phrase> <phrase><annotation type="concept">terminology</annotation></phrase> <phrase><annotation type="concept">top-down information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">WYSIWYG</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">ASCIIDOC</annotation></phrase> <phrase><annotation type="language">cascading style sheets</annotation></phrase> <phrase><annotation type="language" specifically="cascading style sheets">CSS</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> <phrase><annotation type="language"><annotation type="standard">HTML</annotation></annotation></phrase> <phrase><annotation type="language">JavaDoc</annotation></phrase> <phrase><annotation type="language">LaTeX</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">mathml</annotation></phrase> <phrase><annotation type="language">reStructuredText</annotation></phrase> <phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">SGML</annotation></phrase> <phrase><annotation type="language">TeX</annotation></phrase> <phrase><annotation type="language">XLIFF</annotation></phrase> <phrase><annotation type="language">XML schema</annotation></phrase> <phrase><annotation type="language"><annotation type="standard">XML</annotation></annotation></phrase> <phrase><annotation type="language">XSD</annotation></phrase> <phrase><annotation type="language">XSL-FO</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">active content</annotation></phrase> <phrase><annotation type="algorithm">audit algorithm</annotation></phrase> <phrase><annotation type="algorithm">auditable</annotation></phrase> <phrase><annotation type="algorithm">auditing</annotation></phrase> <phrase><annotation type="algorithm">audit</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">avoiding duplication</annotation></phrase> <phrase><annotation type="algorithm">change management</annotation></phrase> <phrase><annotation type="algorithm">change</annotation></phrase> <phrase><annotation type="algorithm">collaboration</annotation></phrase> <phrase><annotation type="algorithm">compliance</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition algorithm">composition</annotation></phrase> <phrase><annotation type="process">conformance</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conformant</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforming</annotation></phrase> <phrase><annotation type="process" specifically="conformance">conforms</annotation></phrase> <phrase><annotation type="process">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm" specifically="content reuse algorithm">content-reuse</annotation></phrase> <phrase><annotation type="algorithm">continuous translation</annotation></phrase> <phrase><annotation type="algorithm">deferred synthesis</annotation></phrase> <phrase><annotation type="algorithm">differential presentation</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential synthesis</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="encoding algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="exchange algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="extract algorithm">extract</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="formatting algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">information architecture algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="linking algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">merge algorithm</annotation></phrase> <phrase><annotation type="algorithm" specifically="merge algorithm">merge</annotation></phrase> <phrase><annotation type="algorithm">modeling algorithm</annotation></phrase> <phrase><annotation type="algorithm">pagination</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithms</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publication</annotation></phrase> <phrase><annotation type="algorithm">publish  algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">relevant</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">repeatability</annotation></phrase> <phrase><annotation type="algorithm">repeatable</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separate content from formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content form formatting</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single-source</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">timeliness</annotation></phrase> <phrase><annotation type="algorithm">timely</annotation></phrase> <phrase><annotation type="algorithm">translation</annotation></phrase> <phrase><annotation type="algorithm">validate</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">validation</annotation></phrase> <phrase><annotation type="algorithm">validity</annotation></phrase> <phrase><annotation type="algorithm">writing</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">browser</annotation></phrase> <phrase><annotation type="tool" specifically="content management system">CMS</annotation></phrase> <phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">content management systems</annotation></phrase> <phrase><annotation type="tool">Doxygen</annotation></phrase> <phrase><annotation type="tool">ebook readers</annotation></phrase> <phrase><annotation type="tool">FrameMaker</annotation></phrase> <phrase><annotation type="tool">FrameScript</annotation></phrase> <phrase><annotation type="tool">help systems</annotation></phrase> <phrase><annotation type="tool">Microsoft Word</annotation></phrase> <phrase><annotation type="tool">SPFE</annotation></phrase> <phrase><annotation type="tool">Sphinx</annotation></phrase> <phrase><annotation type="tool">XML database</annotation></phrase> <phrase><annotation type="tool">XML databases</annotation></phrase> <phrase><annotation type="tool">markup</annotation></phrase> <phrase><annotation type="tool">markup language</annotation></phrase> <phrase><annotation type="tool">markup languages</annotation></phrase> <phrase><annotation type="tool">Word</annotation></phrase> <phrase><annotation type="tool">publishing pipeline</annotation></phrase> <phrase><annotation type="tool">repository</annotation></phrase> <phrase><annotation type="tool">page description language</annotation></phrase> <phrase><annotation type="tool">page descriptions languages</annotation></phrase> <phrase><annotation type="tool">schema</annotation></phrase> <phrase><annotation type="tool">schema languages</annotation></phrase> <phrase><annotation type="tool">search engine</annotation></phrase> <phrase><annotation type="tool">tool chain</annotation></phrase> <phrase><annotation type="tool">tool chains</annotation></phrase> <phrase><annotation type="tool">typesetting languages</annotation></phrase> <phrase><annotation type="tool">version control system</annotation></phrase> <phrase><annotation type="tool">workflow</annotation></phrase> <phrase><annotation type="tool">widgets</annotation></phrase> <phrase><annotation type="tool">wiki</annotation></phrase> <phrase><annotation type="tool">rights management</annotation></phrase> <phrase><annotation type="tool">queries</annotation></phrase> <phrase><annotation type="tool">query</annotation></phrase> <phrase><annotation type="tool">formatting language</annotation></phrase> <phrase><annotation type="tool">formatting languages</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">content engineer</annotation></phrase> <phrase><annotation type="role">content engineers</annotation></phrase> <phrase><annotation type="role">content strategists</annotation></phrase> <phrase><annotation type="role">document designers</annotation></phrase> <phrase><annotation type="role">information architect</annotation></phrase> <phrase><annotation type="role">information architects</annotation></phrase> <phrase><annotation type="role">publication designers</annotation></phrase> <phrase><annotation type="role">subject matter experts</annotation></phrase></p>
<p>Companies</p>
<p><phrase><annotation type="company">Amazon</annotation></phrase> <phrase><annotation type="company">Narrative Science</annotation></phrase></p>
<p>Structures <phrase><annotation type="structure">cross references</annotation></phrase> <phrase><annotation type="structure">id</annotation></phrase> <phrase><annotation type="structure">ids</annotation></phrase> <phrase><annotation type="structure">index</annotation></phrase> <phrase><annotation type="structure">key</annotation></phrase> <phrase><annotation type="structure">keys</annotation></phrase> <phrase><annotation type="structure">list</annotation></phrase> <phrase><annotation type="structure">microformats</annotation></phrase> <phrase><annotation type="structure">subject annotation</annotation></phrase> <phrase><annotation type="structure">subject annotations</annotation></phrase> <phrase><annotation type="structure">table</annotation></phrase> <phrase><annotation type="structure">table of contents</annotation></phrase> <phrase><annotation type="structure">tables</annotation></phrase> <phrase><annotation type="structure">tables of contents</annotation></phrase> <phrase><annotation type="structure">cals table model</annotation></phrase> <phrase><annotation type="structure">links</annotation></phrase> <phrase><annotation type="structure">rhetorical block</annotation></phrase> <phrase><annotation type="structure">rhetorical blocks</annotation></phrase> <phrase><annotation type="structure">semantic block</annotation></phrase> <phrase><annotation type="structure">semantic blocks</annotation></phrase> <phrase><annotation type="structure">topic</annotation></phrase> <phrase><annotation type="structure">topics</annotation></phrase> <phrase><annotation type="structure" specifically="table of contents">TOC</annotation></phrase> <phrase><annotation type="structure">rhetorical pattern</annotation></phrase> <phrase><annotation type="structure">rhetorical structure</annotation></phrase></p>
<p>Standards (see also entries under languages, some of which are standards) <phrase><annotation type="standard">iso 1806</annotation></phrase> <phrase><annotation type="standard">s1000d</annotation></phrase></p>
<p>Programming languages</p>
<p><phrase><annotation type="programming-language">java</annotation></phrase> <phrase><annotation type="programming-language">javascript</annotation></phrase></p>
<p>Media</p>
<p><phrase><annotation type="media">paper</annotation></phrase> <phrase><annotation type="media">pdf</annotation></phrase> <phrase><annotation type="media">internet</annotation></phrase> <phrase><annotation type="media">hypertext</annotation></phrase> <phrase><annotation type="media">Web</annotation></phrase> <phrase><annotation type="media">web pages</annotation></phrase> <phrase><annotation type="media">tablet</annotation></phrase> <phrase><annotation type="media">online media</annotation></phrase> <phrase><annotation type="media">books</annotation></phrase></p>
</annotations>
<index>
<record>
<type>algorithms</type>
<term>collaboration</term>
</record>
</index>
<p>Creating an effective <phrase><annotation type="algorithm" specifically="information architecture algorithm">information architecture</annotation></phrase> for a large content set requires collaboration. If your work has to be integrated with the work of other,  you have to make decisions that affect or are affected by the work of others. This mean you need information about their work and you need the skills required to integrate your work with theirs. In other words, your work becomes more complex when you must collaborate with others.</p>
<p>As Tom Johnson writes:</p>
<blockquote>
<citation type = "citation" value = "http://idratherbewriting.com/2016/12/14/higher-level-technical-writing/"/>
<p>So often we place the bar for contribution at whether someone can write. In reality, it’s not just whether someone can construct clear, grammatically correct sentences. It’s whether the person can integrate the information into a larger documentation set.</p>
</blockquote>
<p>And, of course, the larger the documentation set becomes, the more complex the task of integration becomes, to the point where it can quickly come to exclude the participation of anyone except full time writing staff that have been specifically trained in how to do it. How does each collaborator know what others are doing? How do they know which parts of the wider work they are responsible for? How do they integrate their work with the work of others? How do you manage the overhead created when collaborators have to be aware of other people’s work as well as their own? As always, any complexity that is not handled in the organization gets dumped on the reader in the form of quality and <phrase><annotation type="concept">findability</annotation></phrase> problems.</p>
<p>The fundamental constraint on collaboration is the amount of time that collaborators have to spend on collaborative activities – orienting themselves to the work of others, integrating their work with the work of others – as opposed to creating new work. Unless you do something to ease this burden you quickly reach the point where adding more collaborators actually slows the project down because every new person you add to the project increases the total collaboration overhead by more than the amount of work time they add to the project. Once this state is reached, either the volume and pace of work plateaus (or declines if yet more people are added to the project) or some of the required coordination is abandoned, leaving complexity to fall through to the reader as poor quality content.</p>
<p>Before the Web, organizations handled the overhead of collaboration largely by assigning different books, pamphlets, and other publications to different writers and issuing them with some basic style guidance for language, physical appearance, and layout. All the other aspects of collaborative complexity, like making sure that everyone was saying the same thing at the same time in the same way, or that people were not creating the same content over and over again, or that at least one person was saying everything that needed to be said, or that the best rhetorical models are being followed, were ignored and the results were dumped on the customer in the form of inconsistent information that was incomplete, incorrect, contradictory, hard to understand and hard to find.</p>
<p>With the advent of the Web, all the same content, produced by the same non-collaborative approach to collaboration, got dumped onto the company website. It wasn’t necessarily any better or worse than it was before, but because it was now all <phrase><annotation type="concept">searchable</annotation></phrase> in one place, the <phrase><annotation type="algorithm">quality</annotation></phrase> problems became much more obvious.  In response to this mess, the discipline of <phrase><annotation type="concept">content strategy</annotation></phrase> was born.</p>
<p>One of the challenges of collaboration between different roles and departments in an organization has always been that they used different tools, or that if they used the same tools, those tools had no facilities for collaboration or integration of the content they produced. One approach to addressing this problem has been the adoption of a universal platform. In most cases, this universal platform has only been for web content, thought there are some that attempt to be a universal platform for every piece of content the organization creates.</p>
<p>Some of these universal platforms are designed for simplicity, aiming to create a platform that everyone can use with minimal training. Examples include wikis, certain Web CMS platforms. These have suffered from a lack of capability for more sophisticated publishing, for integration and content reuse, and for any kind of systematic content management. Others attempt to provide a full range of content management, reuse, integration, and publishing capability, but these generally prove too difficult for many contributors. Finding a happy medium can be difficult.</p>
<section>
<title>Partitioning collaboration</title>
<p>The central problem of collaboration is the amount of things that each collaborator has to know about other’s work and the the things they have to do to make their content works with the content of collaborators. The way you reduce the collaborative overhead is simply to reduce what each collaborator has to know and the things they have to do to ensure that content works together.</p>
<p>This same problem occurs in the programming world – the need to reduce the amount that programmers need to know and to do in order to have their code work with the code written by others. In the programming world, the solution to this problem is the Application Programming Interface (API). An API is a standardized, structured, published method for calling code written by someone else. With an API in place, programmers have to know far less in order to write code that works with other people’s code. They just call the API.</p>
<p>An API acts as a set of constraints. Its tells the programmer exactly what they have to do to get the result they want. If they meet the constraints, they should be confident that the code will work as expected.</p>
<p>Structured writing does something similar for the collaboration problem in content. It is not exactly the same, because content does not call other content – at most it links to it. But a structured writing languages provides a set of constraints that the writer must follow. If those constraints are well designed, they can tell the writer all they need to know to ensure that their content will integrate with other contributors content in the information architecture.</p>
<p>For example many writers contributing to a cookbook do not have to know how the other writers are formatting their recipes or whether they are including serving counts or nutritional information if each is following a subject domain structured writing format such as the one we have studied in this book. The subject domain recipe format becomes a kind of content creation API, allowing writers to write with confidence without having to know what everyone else is doing. If some of the techniques discussed in <citation type = "nameref" value = "chapter.duplication"/> are used, they also don’t have to worry about accidentally duplicating an existing recipe.</p>
<p>More than this, though, there are questions that any recipe writer might have about the ability of their readers to access information on implements or cooking techniques mentioned in the text. Providing these abilities if the very stuff of information architecture, what sets it apart from mere cataloging. With subject-domain annotation of tasks and tools (as described in <citation type = "nameref" value = "chapter.linking"/>), writers can be sure that they are passing on the information required to deal with these matters at the IA level. With these annotations in place, the information architect can use the linking techniques described in <citation type = "nameref" value = "chapter.linking"/> to construct and maintain the architecture, and the audit techniques described in <citation type = "nameref" value = "chapter.audit"/> to monitor coverage and discover new content requirements.) Thus writers don’t have to communicate with their collaborators by any means outside of the content itself, greatly reducing the collaborative overhead of the process and giving them more time to write and to focus on accuracy and rhetoric.</p>
</section>
<section>
<title>Dealing with diverse collaborators</title>
<p>Part of the complexity of collaboration is the difference in skills, knowledge, and background between contributors. Some of your contributors may be full time professional writers while others are engineers or marketers, field personnel or support people for whom communication is an important, but not central, part of their jobs. Asking all these folks to use the same tools and structure is clearly imposing far more difficulties on one group than another.</p>
<p>It makes perfect sense in these situations to design a collaborative system that distributes authoring complexity from one group of contributors to another; from your occasional contributors to your full time writers, for example, or, better still, to your <phrase><annotation type="role">information architects</annotation></phrase> and <phrase><annotation type="role">content engineers</annotation></phrase>. People can handle far more complexity in their core task than then can in any of their peripheral tasks. Asking an occasional contributor to fill in a form that captures all the elements needed to create an effective document according to a tested rhetorical pattern is far more effective than presenting them with a blank wiki page, and much less complex for them than creating a DITA or DocBook document from scratch.</p>
<p>A structured writing approach in which different contributors use different structured writing languages, each best suited to their contributions, can be very effective. Of course, any use of structured writing distributes some degree of complexity towards the writer, since they are now obliged to know and follow the structure. On the other hand, this can also distribute a lot of complexity away from the writer. While the blank page may seem like the simplest possible interface, it actually give no task guidance at all. It is an interface without any <phrase>affordances</phrase>. It leaves it to every contributor not only to write, but to design the information they are creating, to decide what needs to be said and how to say it.</p>
<p>Document domain structured writing languages are no more help – they offer no rhetorical guidance at all – while still demanding that the writer conform to structures dictated by the needs of the publishing process, most of which are meaningless to everyone other than the full time professional writer.</p>
<p>Structured writing can provide a rhetorically-specific authoring interface to the writer, thereby distributing the design complexity to the <phrase><annotation type="role">information architect</annotation></phrase> who designs the structured writing language. What is vital here, though, is that the structured writing language not distribute any other complexity to the writer. Any language that requires them to master <phrase><annotation type="algorithm">publishing</annotation></phrase> or <phrase><annotation type="process">content management</annotation></phrase> concepts, for instance, is not going to work well for this purpose. What works is a simple <phrase><annotation type="concept">subject-domain</annotation></phrase> language the addresses the writer in terms they already understand and ask for annotations using concepts and ideas that the writer already knows.</p>
</section>
<section>
<title>Wikis</title>
<p>One of the more common reasons for introducing <phrase><annotation type="process">content management</annotation></phrase> and/or structured writing to an organization is to improve collaboration. It is certainly not the only way to facilitate collaboration. In fact, the more common approach is to create simple and largely unstructured tools such as message boards and wikis. One of the most widely collaborative projects in the world – Wikipedia – runs on a wiki using a fairly simple document domain markup language which is often hidden behind a simple WYSIWYG editor.</p>
<p>This is powerful model for collaboration because it is inexpensive, readily available, and requires minimal technical skills. But it is also a model that distributes almost all of the rhetorical and management complexity to people rather than algorithms. There is simply not enough structure in this model to allow you to transfer very much complexity to an algorithm. Nor is there anyone making sure that all of the complexity is getting handled. The system relies as much for <phrase><annotation type="algorithm">auditing</annotation></phrase> and <phrase><annotation type="process">content management</annotation></phrase> on the uncoordinated work of volunteers as it does for content creation.</p>
<p>Why then might one turn to a more complex structured writing system for collaboration. In a word: integration. The kind of collaboration that is supported by message boards and wikis is one in which collaboration chiefly means everybody being able to see what everyone else is doing. Any connections between the pieces created by different people are loose and non-critical, mostly taking the form of ad hoc <phrase><annotation type="media">hypertext</annotation></phrase> links. And such connections as there are are manged by large scale community efforts. Wikipedia is full of links between articles largely because anyone can go in an edit an article to add a link to an article on a related subject.</p>
<p>But not all collaboration can rely on such loose and uncoordinated activity. In many cases you need to bring the pieces created by collaborators together to form an integrated and cohesive whole. You can do that by hand, of course, but that can be cumbersome and time consuming. It may be hard for any one coordinator to keep up with all the content that is being created, especially if new content is continually being written, without any freeze period to allow the integration to take place.</p>
<p>Equally important, the collaborators on a message board or a larger wiki like Wikipedia are largely ignorant of each other and each other’s activity. Duplication of effort and even outright contradiction may be frequent. If you have huge numbers of volunteers constantly reading the site and finding duplication and contradictions, as Wikipedia does, you can live with this (though there will always be parts of the system that are in error at any given time). But an organization that is paying its writers and editors may not be able to afford this labor-intensive approach. It may need a more efficient way to coordinate the activity of its collaborators to avoid duplication and error. This means using structured writing to transfer a lot of that complexity and effort to algorithms.</p>
</section>
<section>
<title>Management domain structured writing</title>
<p><phrase><annotation type="concept">Management-domain</annotation></phrase>-oriented languages, such as <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>, move a lot of the complexity of <phrase><annotation type="process">content management</annotation></phrase>, and <phrase><annotation type="algorithm">collaboration</annotation></phrase>, into the source files in the form of <phrase><annotation type="concept">management domain</annotation></phrase> structures. If the writer is working directly in <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase>, therefore, that complexity is transferred to the writer. In a collaborative situation, this means that that part of the burden is being transferred onto the collaborators, which means that it takes more time, discipline, skill, and knowledge to be an effective collaborator.</p>
<p>This is not to say that the adaptation of this model is not a step in the right direction. It may impose a management system that is complex and demanding to use, but it often replaces a system in which management, and the tools and capacity to manage, were none existent. Difficult and complex management techniques may be  better than no management at all.</p>
<p>A well-designed <phrase><annotation type="concept">management-domain</annotation></phrase> system backed by well-designed tools may reduce the collaboration overhead compared to doing it add hoc, but it is still leaving a lot of the collaborative overhead on the writer’s plate and therefore the same basic limit on the effective scale of collaboration still apply, even if they have been pushed out a little. Alternative approaches can reduce the overhead further at all scales.</p>
</section>
<section>
<title>Bridging silos</title>
<p>There is a lot of talk in <phrase><annotation type="process">content management</annotation></phrase> circles about breaking down <phrase><annotation type="concept">content silos</annotation></phrase>. The meaning of “silo” here is an closed system in which neither the tools not the participants communicate about what they writing or make it available for discovery by the rest of the organization. It is difficult, of course, to create and integrated and effective information architecture when different content groups are operating in complete isolation from one another.</p>
<p>It is certainly possible to overstate the case here. Not every piece of content produced by an organization needs to be fully and seamlessly integrated with every other piece, and asking any current “silo” to open itself up to the wider organization likely means adding significant complexity to its process in the form of additional knowledge and skills required to integrate with the content and systems of the rest of the organization. It is far from a give that every silo must be torn down. But if silos are compromising your content strategy and information architecture, then something must be done to open up their content and processes to integrate better with the wider organization.</p>
<p>The naive way to do this it to have everyone use a single system and a single markup language. But as we have seen, this means either adopting a simple <phrase><annotation type="concept">document domain</annotation></phrase> language that everyone can learn, like <phrase><annotation type="language">Markdown</annotation></phrase>, which does not have enough structures to meet everyone’s needs, or adopting a large complex document domain language like <phrase><annotation type="language"><annotation type="standard">DITA</annotation></annotation></phrase> or <phrase><annotation type="language"><annotation type="standard">DocBook</annotation></annotation></phrase> that meets a lot of needs but has poor <phrase><annotation type="concept">functional lucidity</annotation></phrase>, especially for part-time contributors. It is a classic case of focusing on one problem and paying no attention to where the complexity that is directed away from that problem get dumped.</p>
<p>The most pernicious myth about collaboration is that it requires everyone to use the same tools and to understand each other’s work. In fact, this is the worst way to collaborate, because it creates a huge amount of overhead which can swamp the ability to actually get anything done. Efficient collaboration is actually achieved by limiting the amount that collaborators have to know about each other’s work and each other’s tools. This allows each group or individual to work efficiently while still creating a product that can be integrated successfully with the work of other.</p>
<p>This approach to collaboration is seen throughout the worlds of engineering and computer programming. The secret ingredient that allows workers to collaborate with minimal knowledge of each other’s work is the interface. A structured writing language is an interface to content creation. It works by partitioning and redirection the complexity of the content system.</p>
<p>To look at it another way, structured writing is a tool for partitioning and redirecting complexity in a content system. The examples we have examined so far in this book have looked at ways in which content decisions can be partitioned away from writers towards <phrase><annotation type="role">document designers</annotation></phrase>, <phrase><annotation type="role">content strategists</annotation></phrase>, <phrase><annotation type="role">information architects</annotation></phrase>, and <phrase><annotation type="role">content engineers</annotation></phrase>. But structured writing can also be used to partition decisions differently for different types of contributors, so that the interfaces they are asked to use are a good match for the kinds of decisions they are qualified to make, and shield them from those they are not qualified to make.</p>
</section>
</chapter>
