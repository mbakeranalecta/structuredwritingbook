<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.conversion">
<db:title>Conversion</db:title>
<db:para>There is one final algorithm we should look at, not because it is part of the structured writing process, but because it is a big part of how many organizations make the move to structured writing: the conversion algorithm. The conversion algorithm is how you get content from an unstructured system to a structured system.</db:para>
<db:para>There are lots of products that advertise that you can easily and cleanly convert all you existing content to a new structured writing system like DITA. Such claims should be taken with a large grain of salt.</db:para>
<db:para>Structured writing is about constraints. A piece of structured content, therefore, is one that follows a set of constraints and records the constraints it follows.</db:para>
<db:para>Of course, it is possible that a piece of content may follow a set of constraints without recording the fact that it does so explicitly. As we shall see in <db:xref linkend="chapter.patterns"/> it is also possible for a structure to be discernible in the pattern of the text used to express the content. For instance, a date expressed in the format December 13, 2016 follows a pattern that is easy to describe and to detect mechanically in text. You can fairly easily write an algorithms that detects dates in this format in a text and replaces them with and explicitly marked-up date format such as <db:code>&lt;date&gt;&lt;month&gt;12&lt;/month&gt;&lt;day&gt;13&lt;/day&gt;&lt;year&gt;2016&lt;/year&gt;&lt;/date&gt;</db:code>. Other ways of detecting implicit structure could be formatting of the source text. For instance, you might be able to detect that the use of a heading style such as H2 was the start of a section, even if there is no explicit section structure in the source text.</db:para>
<db:para>If you can detect these implicit structures reliably, you can transform them into explicit structures. Thus it is possible to write an algorithm to convert a non-structured document into a structured document by recognizing implicit structure and turning it into explicit structure. However, for this to be successful, certain conditions must be met:</db:para>
<db:orderedlist>
<db:listitem>
<db:para>The source document must already obey all the relevant constraints of the format you are converting it to. You can’t convert a document to an explicitly structure if it does not already follow that structure implicitly.</db:para>
</db:listitem>
<db:listitem>
<db:para>The structures in the source document that you want to make explicit must be detectable as patterns in the text of formatting of the source document. In some cases that governing constraint may have been followed but there may not be any way to detect that fact automatically from the text. In many cases, subject domain annotations clarify the subject of an otherwise ambiguous word, and no algorithms short of a sophisticated AI is going to be able to detect which of the meanings of the word was intended.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Of course, a conversion does not have to be complete to be useful. It is common practice to have an algorithm convert those structures it can detect and then to have human authors do the rest of the work. This may include not only finishing the markup of a piece, but also editing it to make it meet its governing constraints.</db:para>
<db:para>But don’t let anyone deceive you about the quality for such conversions. There are three issues to be aware of in particular:</db:para>
<db:orderedlist>
<db:listitem>
<db:para>If there is a structure in the source that the conversion algorithm cannot detect, it will treat it as a generic structure. The resulting file will validate according to the schema of the target language, but the markup will be incorrect with respect to the structures and the text they contain. The fact that the file validates can hide these errors from you.</db:para>
</db:listitem>
<db:listitem>
<db:para>There may be cases where the conversion algorithm detects a structure but cannot place it in a valid place in the current document (because the source does not follow the applicable constraints). In these cases, the conversion process should produce an error so that you are made aware of the aberrant structure. However, if you conversion vendor boasts of their conversion success rate, they may be tempted to ignore the error and mark the structure up as something generic, thus hiding the problem.</db:para>
</db:listitem>
<db:listitem>
<db:para>If there is any structures that are optional in your target language (most annotations are options by their nature) then the conversion does not have to detect them to create a valid output file. Catching all those that could be detected is extra work for the person writing the conversions algorithm. Be careful that you are getting as many of these detected as possible.</db:para>
</db:listitem>
<db:listitem>
<db:para>Many conversion services are merely offering generic format to format conversions such as Word to DocBook or Flare to DITA. These are necessarily lowest common denominator conversions that almost certainly add no real value to the text. They may get you through a change of tools, but they are unlikely to help you effect a change of process.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The limits of such conversions should be fairly obvious based on our review of the structure writing domains and the structured writing algorithms. Much of the practice of structured writing is about factoring out invariants in text. While an algorithm can sometimes detect implicit structure and turn it into explicit structure, it is much harder to write and algorithm to reliably factor out any but the most trivial invariants (the bullets on list items, for instance). You certainly should not expect that a conversion algorithm can move content successfully from the media domain to the subject domain.</db:para>
<db:para>Any given markup language requires certain constraints to be followed. Content cannot validly fit into that markup language if it does not follow those constraints. So, there is no mechanical process – no algorithm – that convert content that does not follow the constraints of a markup language and make it follow them.</db:para>
<db:para>At best, such a conversion is going to produce a file that validates against the schema for that language, but that validation is going to be a lie. And, of course, conformance that is a lie is on no use to any structured writing algorithm. The only way to bring content that does not conform to the target constraints into conformance is to rewrite it. Anyone who tells you different is selling snake oil.</db:para>
<db:para>Finally, we should note that the move to structured writing is often prompted by a change of outputs. As more of an organization’s content moves from paper to the Web, there is a entirely appropriate desire to move to a different tool chain for producing content. But in this case is is vital to remember that the difference between paper and the Web is not merely one of format. If it were, dumping PDF’s of your books on a Web server would be the only change you would need to make. But the move from paper to the Web involves a fundamental change of information architecture, one that goes deep into the content itself and how it is designed and written. In many cases, structured writing can be a huge help in executing a suitable information architecture for the web, including such important consideration as automating or managing linking. But you cannot automatically convert content from one information architecture to another. Preparing content for a bottom-up information architecture where content is located primarily by search and navigated primarily by links, requires that content be written in a very different way. Automated content conversion simply cannot achieve this for you.</db:para>
<db:para>There are therefore just two significant use cases for automated conversion tools:</db:para>
<db:orderedlist>
<db:listitem>
<db:para>Where you are transferring content from one format to another at more or less the same place on the structured writing spectrum, and the structures in the source format are more or less the same as those in the destination format (though they may be less explicitly recorded).</db:para>
</db:listitem>
<db:listitem>
<db:para>As a first step in what you know will be a largely human-executed conversion project. The chief value of such a conversion is often to get the content into the tool set that you are going to use for structured writing going forward, as a first step to actually applying structure to it.</db:para>
</db:listitem>
</db:orderedlist>
</db:chapter>
