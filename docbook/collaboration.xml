<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.collaboration"><db:title>Collaboration</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp2112309908"><db:primary>collaboration</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2112309908x"><db:primary>algorithms</db:primary><db:secondary>collaboration</db:secondary></db:indexterm>




<db:para>Creating an effective <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture for a large content set requires collaboration. If your work has to be integrated with the work of others, you have to make decisions that affect or are affected by the work of others. This means you need information about their work, and you need the skills required to integrate your work with theirs. In other words, your work becomes more complex when you collaborate with others.</db:para>
<db:para>As Tom Johnson writes:</db:para>
<db:blockquote>
<db:attribution>http://idratherbewriting.com/2016/12/14/higher-level-technical-writing/</db:attribution>
<db:para>So often we place the bar for contribution at whether someone can write. In reality, it’s not just whether someone can construct clear, grammatically correct sentences. It’s whether the person can integrate the information into a larger documentation set.</db:para>
</db:blockquote>
<db:para>And, of course, the larger the documentation set becomes, the more complex the task of integration becomes, to the point where it can quickly come to exclude the participation of anyone except full-time writers who have specific training. How does each collaborator know what others are doing? How do they know which parts of the wider work they are responsible for? How do they integrate their work with the work of others? How do you manage the overhead created when collaborators have to be aware of other people’s work as well as their own? How do you maintain process efficiency and rhetorical quality when writers can’t work without knowing what everyone else is doing all the time?</db:para>
<db:para>The fundamental constraint on collaboration is the amount of time that collaborators have to spend on collaborative activities – orienting themselves to the work of others and integrating their work with the work of others – as opposed to creating new work. Unless you can ease this burden you quickly reach the point where adding more collaborators actually slows the project down because every new person you add increases the total collaboration overhead by more than the amount of work time that person can add to the project. Once this state is reached, either the volume and pace of work plateaus (or declines if even more people are added to the project) or some of the required coordination is abandoned, with the inevitable impacts on process and rhetoric.</db:para>
<db:para>Before the web, organizations handled the overhead of collaboration largely by assigning different books, pamphlets, and other publications to different writers and issuing some basic style guidance for language, physical appearance, and layout. All the other aspects of collaborative complexity – such as making sure that everyone was saying the same thing at the same time in the same way, that people were not creating the same content over and over again, that at least one person was saying everything that needed to be said, and that the best rhetorical models were being followed – were ignored, and the results were dumped on the customer in the form of information that was inconsistent, incomplete, incorrect, contradictory, hard to understand, and hard to find.</db:para>
<db:para>With the advent of the web, the same content, produced using the same non-communicative approach to collaboration, got dumped onto the company website. It wasn’t any better or worse than it was before, but because it was now all <db:indexterm><db:primary>searchable</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>searchable</db:secondary></db:indexterm>searchable in one place, the <db:indexterm><db:primary>quality</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>quality</db:secondary></db:indexterm>quality problems became much more obvious.  In response to this mess, the discipline of <db:indexterm><db:primary>content strategy</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>content strategy</db:secondary></db:indexterm>content strategy was born.</db:para>
<db:para>One of the challenges of collaboration between different roles and departments in an organization has always been that writers used different tools or, if they used the same tools, those tools didn’t support collaboration or content integration. One approach to addressing this problem has been to adopt a universal platform. In most cases, this universal platform has only been for web content, though there are some that attempt to be a universal platform for every piece of content that the organization creates.</db:para>
<db:para>Some of these universal platforms are designed for simplicity, aiming to create a platform that anyone can use with minimal training. Examples include wikis and certain web CMS platforms. These platforms cannot support capabilities such as more sophisticated publishing, content integration, content reuse, consistent rhetoric, or any kind of systematic content management. Other platforms attempt to provide a full range of content management, reuse, integration, and publishing capabilities, but they generally prove too difficult for many contributors. Finding a happy medium can be difficult.</db:para>
<db:section><db:title>Partitioning collaboration</db:title>


<db:para>The central problem of collaboration is how much collaborators have to know about each other’s work and what they have to do to integrate their work with content from other collaborators. The way you reduce the collaborative overhead is to reduce what each collaborator has to know and do to ensure that content works together.</db:para>
<db:para>This same need to reduce overhead occurs in the programming world. There, the solution to this problem is the Application Programming Interface (API). An API is a standardized, structured, published method for calling code written by someone else. With an API in place, programmers have to know far less in order to write code that works with other people’s code. They just call the API.</db:para>
<db:para>An API acts as a set of constraints. It tells programmers exactly what they have to do to get the result they want. If they meet the constraints, they should be confident that the code will produce the promised results.</db:para>
<db:para>Structured writing does something similar for the collaboration problem in content. It is not exactly the same, because content does not call other content – at most it links to it. But structured writing languages provide constraints that writers must follow. If those constraints are well designed, they can tell writers all they need to know to ensure that their content will integrate with other contributors’ content in the information architecture.</db:para>
<db:para>For example, if you have many writers contributing to a cookbook and they use a <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structured writing format such as the one in this book, each writer does not have to know how the other writers format their recipes or whether they include serving counts or nutritional information. The subject-domain recipe format becomes a kind of content creation API that allows writers to write with confidence and without having to know what everyone else is doing. If they use some of the techniques discussed in <db:xref linkend="chapter.duplication"/>, they also don’t have to worry about accidentally duplicating an existing recipe.</db:para>
<db:para>More than this, however, recipe writers want readers to have the ability to access information about cooking implements and techniques mentioned in the text. Providing these abilities is the very stuff of information architecture and what sets it apart from mere cataloging.</db:para>
<db:para><db:indexterm><db:primary>Subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>Subject-domain</db:secondary></db:indexterm>Subject-domain <db:indexterm><db:primary>annotation</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>annotation</db:secondary></db:indexterm>annotation of tasks and tools (as described in <db:xref linkend="chapter.linking"/>) allows writers to pass on to readers the information required to deal with these matters. These annotations enable <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architects to use the <db:indexterm><db:primary>linking algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>linking algorithm</db:secondary></db:indexterm>linking techniques described in <db:xref linkend="chapter.linking"/> to construct and maintain the architecture and the <db:indexterm><db:primary>audit</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>audit</db:secondary></db:indexterm>audit techniques described in <db:xref linkend="chapter.audit"/> to monitor coverage and discover new content requirements. Thus, writers don’t have to communicate with their collaborators by any means outside of the content itself, greatly reducing the collaborative overhead of the process and giving them more time to write and to focus on accuracy and rhetoric.</db:para>
</db:section>
<db:section><db:title>Dealing with diverse collaborators</db:title>


<db:para>Part of the complexity of collaboration is the difference in skills, knowledge, and background between contributors. Some of your contributors may be full-time professional writers, while others may be engineers, marketers, field personnel, or support people for whom communication is an important, but not central, part of their jobs. Asking all these people to use the same tools and structures imposes far more difficulties on one group than another.</db:para>
<db:para>It makes perfect sense in these situations to design a collaborative system that distributes authoring complexity from one group of contributors to another; from your occasional contributors to your full-time writers, for example, or, better still, to your <db:indexterm><db:primary>information architects</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architects</db:secondary></db:indexterm>information architects and <db:indexterm><db:primary>content engineers</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineers</db:secondary></db:indexterm>content engineers. People can handle far more complexity in their core task than they can in any of their peripheral tasks. Asking occasional contributors to fill in a form that captures all the elements needed to create an effective document according to a tested rhetorical pattern is far more effective than presenting them with a blank wiki page and much less complex than asking them to create a <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA or <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook document from scratch.</db:para>
<db:para>A structured writing approach in which different contributors use different structured writing languages, each best suited to their contributions, can be very effective. Of course, any use of structured writing distributes some degree of complexity towards writers, since they now must know and follow the structure. On the other hand, structured writing can also distribute a lot of complexity away from the writer. While a blank page may seem like the simplest possible interface, it gives no task guidance at all. It is an interface without affordances that forces every contributor not only to write but also to design the information, decide what needs to be said, and determine how to say it.</db:para>
<db:para>General <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain structured writing languages don’t help; they offer no rhetorical guidance at all. Yet, they still demand that writers conform to structures dictated by the needs of the publishing process – needs that are meaningless to anyone other than a full-time professional writer.</db:para>
<db:para>Structured writing can give writers a rhetorically specific authoring interface, thereby distributing the design complexity to an <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architect who designs the structured writing language. What is vital here, however, is that the structured writing language not distribute any other complexity to the writer. Any language that requires writers to master <db:indexterm><db:primary>publishing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>publishing</db:secondary></db:indexterm>publishing or <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management concepts, for instance, is not going to work well for this purpose. What works is a simple <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain language that addresses writers in terms they already understand and asks for annotations using concepts and ideas that they already know.</db:para>
</db:section>
<db:section><db:title>Wikis</db:title>


<db:para>One of the more common reasons for introducing <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management and/or structured writing to an organization is to improve collaboration. However, these techniques are certainly not the only way to facilitate collaboration. In fact, the more common approach is to create simple and largely unstructured tools such as message boards and wikis. One of the largest collaborative projects in the world – Wikipedia – runs on a wiki using a fairly simple <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain <db:indexterm><db:primary>markup language</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>markup language</db:secondary></db:indexterm>markup language that is often hidden behind a simple <db:indexterm><db:primary>WYSIWYG</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>WYSIWYG</db:secondary></db:indexterm>WYSIWYG editor.</db:para>
<db:para>This is powerful model for collaboration because it is inexpensive, readily available, and requires minimal technical skills. But it is also a model that distributes almost all of the rhetorical and management complexity to people rather than algorithms. There is simply not enough structure in this model to allow you to transfer very much complexity to an algorithm. Nor is there anyone making sure that all of the complexity gets handled. The system relies on the uncoordinated work of volunteers for <db:indexterm><db:primary>auditing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>auditing</db:secondary></db:indexterm>auditing and <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management as much as it does for content creation.</db:para>
<db:para>Why, then, turn to a more complex structured writing system for collaboration? In a word: integration. The kind of collaboration supported by message boards and wikis chiefly means that everybody can see what everyone else is doing. Any connections between the pieces created by different people are loose and non-critical, mostly taking the form of ad hoc <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext links. And such connections are managed by large-scale community efforts. Wikipedia is full of links between articles largely because anyone can edit an article and add a link to an article on a related subject.</db:para>
<db:para>But not all collaboration can rely on such loose and uncoordinated activity. Often you need to bring the pieces created by collaborators together to form an integrated and cohesive whole. You can do that by hand, of course, but that can be cumbersome and time consuming. It may be hard for any one coordinator to keep up with all the content being created, especially if new content is continually being written without any freeze period to allow integration to take place.</db:para>
<db:para>Equally important, the collaborators on a message board or a larger <db:indexterm><db:primary>wiki</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>wiki</db:secondary></db:indexterm>wiki such as Wikipedia are largely ignorant of each other and each other’s activity. Duplication of effort and even outright contradiction may be frequent. If you have huge numbers of volunteers constantly looking for duplication and contradictions, as Wikipedia does, you can live with this (though there will always be parts of the system that are in error at any given time). However, an organization that pays its writers and editors may not be able to afford this labor-intensive approach. It may need a more efficient way to coordinate the activity of its collaborators to avoid duplication and error. This means using structured writing to transfer a lot of that complexity and effort to algorithms.</db:para>
</db:section>
<db:section><db:title>Management-domain structured writing</db:title>


<db:para>Languages, such as <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA, that rely on the management domain, move a lot of the complexity of <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management and <db:indexterm><db:primary>collaboration</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>collaboration</db:secondary></db:indexterm>collaboration into the source files in the form of <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain structures. That complexity is transferred to any writer who works directly in <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA. In a collaborative environment, this management-domain burden is transferred to the collaborators, which means that it takes more time, discipline, skill, and knowledge to be an effective collaborator.</db:para>
<db:para>This is not to say that adopting this model is not a step in the right direction. This approach may impose a management system that is complex and demanding to use, but it often replaces a system in which management – and the tools and capacity to manage – was non-existent. Difficult and complex management techniques may be better than no management at all.</db:para>
<db:para>A well-designed <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain system backed by well-designed tools may reduce the collaboration overhead compared to ad hoc methods, but it still leaves a lot of the collaborative overhead on the writer’s plate. Therefore, the same limits on the effective scale of collaboration apply, although they have been pushed out a little. Alternative approaches have a greater potential to reduce overhead at all scales.</db:para>
</db:section>
<db:section><db:title>Bridging silos</db:title>


<db:para>There is a lot of talk in <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management circles about breaking down <db:indexterm><db:primary>content silos</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>content silos</db:secondary></db:indexterm>content silos. By <db:emphasis>silo</db:emphasis>, I mean a closed system in which neither the tools nor the participants communicate to others – or even make available for discovery – what they writing. It is difficult, of course, to create an integrated and effective <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture when different content groups operate in complete isolation from one another.</db:para>
<db:para>It is certainly possible to overstate the case here. Not every piece of content produced by an organization needs to be fully and seamlessly integrated with every other piece, and asking any current silo to open itself up to the wider organization likely means adding significant complexity in the form of additional knowledge and skills required to integrate content and systems with the rest of the organization. Not every silo must be torn down, but if silos are compromising your <db:indexterm><db:primary>content strategy</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>content strategy</db:secondary></db:indexterm>content strategy and <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture, then you need to open up their content and processes to integrate better with the wider organization.</db:para>

<?dbfo-need height="3in"?>

<db:para>The naive way to do this it to have everyone use a single system and a single markup language. There are two ways to do this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Adopt a simple <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain language, such as <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown, that everyone can easily learn. The disadvantage is that such languages do not offer enough structures to meet everyone’s needs or to support process and rhetoric.</db:para>
</db:listitem>
<db:listitem>
<db:para>Adopt a large, complex document-domain language, such as <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA or <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook, that offers structures to meet most needs. The disadvantage is that such languages have poor <db:indexterm><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>functional lucidity, especially for part-time contributors.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Each approach focuses on one problem and pays no attention to where the complexity that is directed away from that problem gets dumped.</db:para>
<db:para>The most pernicious myth about collaboration is that everyone must use the same tools and must understand each other’s work. In fact, this is the worst way to collaborate, because it creates a huge amount of overhead that can make it difficult get anything done. Efficient collaboration is achieved by limiting how much collaborators have to know about each other’s work and each other’s tools. This allows each group or individual to work efficiently while still creating a product that can be integrated successfully with the work of others.</db:para>
<db:para>This approach to collaboration is seen throughout the worlds of engineering and computer programming. The secret ingredient that allows workers to collaborate with minimal knowledge of each other’s work is the interface. A structured writing language is an interface to content creation that works by partitioning and redirecting the complexity of the content system.</db:para>
<db:para>To look at it another way, structured writing is a <db:emphasis>tool</db:emphasis> for partitioning and redirecting complexity in a content system. The examples we have examined so far have looked at ways in which content decisions can be partitioned away from writers towards <db:indexterm><db:primary>document designers</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>document designers</db:secondary></db:indexterm>document designers, <db:indexterm><db:primary>content strategists</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content strategists</db:secondary></db:indexterm>content strategists, <db:indexterm><db:primary>information architects</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architects</db:secondary></db:indexterm>information architects, and <db:indexterm><db:primary>content engineers</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineers</db:secondary></db:indexterm>content engineers. But structured writing can also be used to partition decisions differently for different types of contributors, so that the interfaces they are asked to use are a good match for the kinds of decisions they are qualified to make and shield them from those they are not qualified to make.</db:para>

<?dbfo-need height="3in"?>

<db:para>Part of a well partitioned system is limiting what people in different partitions have to know about each other’s work. This has three benefits:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It means there is less collaboration and communication overhead between partitions, making for a more efficient and reliable process. (The less information flow your processes require, the less vulnerable you are to breakdowns in the information flow.)</db:para>
</db:listitem>
<db:listitem>
<db:para>It means people working in the partition can focus on their own work with the minimum of distractions, allowing them to do more work of higher quality.</db:para>
</db:listitem>
<db:listitem>
<db:para>It reduces the complexity of working in the partition, which reduces the number of decisions that people working in the partitions have to make, which reduces the knowledge and skills they need to work successfully, which means you can recruit a wider range of people to work in the partition, including those with greater skills and knowledge in the core business of the partition and occasional contributors from other disciplines and other departments.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Silo is just another name for partition. If silos are a problem in your organization, this means that your system is partitioned incorrectly. The worst possible response to this is to simply break down the walls of all the silos, since this exposes every contributor to the full complexity of the content creation process with massive negative impacts on process and rhetoric. The correct approach is to re-partition your process to make sure that every part of the complexity of your content creation process is handled by a person or process with the knowledge, skills, and resources to handle it.</db:para>
<db:indexterm class="endofrange" startref="idp2112309908"/><db:indexterm class="endofrange" startref="idp2112309908x"/></db:section>
</db:chapter>
