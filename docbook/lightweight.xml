<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.lightweight"><db:title>Lightweight Languages</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp614413284"><db:primary>lightweight markup languages</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp614413284x"><db:primary>language</db:primary><db:secondary>lightweight markup languages</db:secondary></db:indexterm>




<db:para>I commented in <db:xref linkend="chapter.markup"/> that XML does a poor job of partitioning authoring concerns from parsing concerns. XML is a fully general abstract markup language, and its syntax and its logical model are designed to support the creation of any markup language for any purpose whatsoever. This need to support any possible kind of structure makes XML a heavy, verbose language.</db:para>
<db:para>XML’s predecessor, SGML, attempted to be fully general and allow you to define specific markup languages that had a light syntax that was easy to author. Unfortunately, the mechanism for creating such languages is complex and difficult to understand. It also made parsing SGML very complicated. SGML is still used in a few niches, but it has never achieved the kind of widespread use that XML has.</db:para>
<db:para>Still, XML remains a problem for writers, and a number of languages have been created to try to address the problems created by XML’s verbosity. Collectively these are called <db:emphasis>lightweight</db:emphasis> markup languages. Lightweight markup languages are designed to use a lightweight syntax, that is, one that imposes a minimal burden on the readability of the raw text of the document.</db:para>
<db:para>Lightweight markup languages are far less general in their application than XML. In effect, they partition by omission, leaving out capabilities their users don’t need in order to make the syntax and structures simpler and easier to understand. This is fine as long as you don’t need the capabilities they omit. The key to correct partitioning here is to choose the language that has the best balance between the capabilities you need and the simplicity of authoring you want.</db:para>
<db:para>The primary appeal of lightweight markup languages rests on two related properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>They have a high degree of <db:indexterm><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>functional lucidity at the syntactic level (easy to write) and often at the semantic level (what it means) as well. You can usually read the raw markup of a lightweight language more or less as if it were a conventional text document.</db:para>
</db:listitem>
<db:listitem>
<db:para>They can be written effectively using a plain text editor (as opposed to an elaborate structured editor with a graphical editing view). This means that the editing requirements are also lightweight.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Most lightweight markup languages come with a simple processing application that creates output directly in one or more output formats. This means that they have a lightweight tool chain that is easy and inexpensive to implement.</db:para>
<db:para>There are a number of lightweight markup languages. Some of the more prominent include Markdown, Wiki markup, reStructuredText, ASCIIDoc, and LaTeX.</db:para>
<db:section>
<db:title>Markdown</db:title>


<db:para>The most prominent of the lightweight languages, and arguably the lightest weight, is Markdown. Invented in 2004 by John Gruber as a way to quickly write simple web pages using syntax similar to that of an text-format email, Markdown has spread to all kind of systems and has multiple variants that have been adapted for different purposes. I have used several examples of Markdown in this book. Here is one of them:</db:para>
<db:programlisting language="markdown">
Wayne's best yet
================

After tiresome performances in _Rio Grande_ 
and _Sands of Iwo Jima_, the Duke is brilliant 
in _Rio Bravo_.
</db:programlisting>
<db:para>“Adapted for different purposes” mostly means that people have created versions that add to the syntax and semantics of Gruber’s first version. For instance, the code sharing site GitHub has adopted “Git Hub flavored Markdown” as the standard format for user-supplied information on the site, such as project descriptions and issues, and has added syntax specific to tracking issue numbers and code commits for projects. This allows Github to automatically generate links between commits and the issues that relate to them. For example:</db:para>
<db:programlisting language="github_markdown">
Issue #135 was fixed in commit 
8e8c6a0b4c9c41bd72fab5fd53e3d967e9688110.
</db:programlisting>
<db:para>Markdown is a simple <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain language. While its semantics are essentially a subset of HTML, it is more squarely in the document domain than HTML because it lacks any ability to specify formatting or even to create tables (though various Markdown flavors have added support for tables).</db:para>

<?dbfo-need height="1.5in"?>

<db:para>One of the recurring patterns of markup language development – and technology development generally – is that when a format becomes popular because of its simplicity, people start to add “just one more thing” to it, and it becomes either more complex (and thus less attractive) or more fragmented (and thus harder to build a tool chain for). Markdown is definitely fragmenting at the moment (though a standardization effort, CommonMark, is also under way). There is even a project to add semantic annotation to Markdown as part of the Lightweight DITA project.</db:para>
<db:para>None of this is a reason not to use Markdown where its structures and syntax make it an appropriate source. Markdown provides useful constraints on the basic formatting of a web page both by factoring out direct formatting features and by providing a limited set of <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain features. These constraints help prevent contributors to a site from indulging in extravagant, non-standard formatting or overly elaborate text structures. It successfully partitions basic Web formatting, though not much else.</db:para>
<db:para>Markdown is also used in conjunction with static site generators, such as Jekyll, which use Markdown for basic text structures in concert with templating languages such as Liquid.<db:footnote>
<db:para>Liquid is essentially a set of management-domain structures, yielding a result that is comparable to a document-/management-domain hybrid in its capabilities, though not in its style.</db:para>
</db:footnote> Tom Johnson provides a side-by-side comparison of <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA and Jekyll in a series of posts on his blog (<db:link xlink:href="http://idratherbewriting.com/2015/03/23/new-series-jekyll-versus-dita/">http://idratherbewriting.com/2015/03/23/new-series-jekyll-versus-dita/</db:link>).</db:para>

<db:para>Markdown does not provide any <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures or constraints. This may be a welcome feature when comparing Markdown with more complex <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain languages, many of which include subject-domain structures that can be confusing or that writers may abuse to achieve formatting effects.</db:para>
<db:para>Because the inspiration for its syntax, text-format emails, has faded to obscurity, it is not clear that everyone automatically knows how to write Markdown, which was the original design intent. However, a lot of it remains obvious and intuitive, meaning that, within its limits, Markdown has good functional lucidity. It works well if you don’t need any of the features it partitions by omission.</db:para>
</db:section>
<db:section>
<db:title>Wiki markup</db:title>


<db:para>Another popular lightweight format is Wiki markup, introduced by <db:indexterm><db:primary>Ward Cunningham</db:primary></db:indexterm><db:indexterm><db:primary>person</db:primary><db:secondary>Ward Cunningham</db:secondary></db:indexterm>Ward Cunningham in 1995 as the writing format for <db:indexterm><db:primary>WikiWikiWeb</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>WikiWikiWeb</db:secondary></db:indexterm>WikiWikiWeb, the first <db:indexterm><db:primary>wiki</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>wiki</db:secondary></db:indexterm>wiki.<db:footnote><db:para>https://en.wikipedia.org/wiki/WikiWikiWeb</db:para></db:footnote> Wiki markup is similar to Markdown in many respects (most lightweight languages share the same basic syntax conventions, based on the imitation of formatted document features in plain text documents).</db:para>
<db:para>What makes Wiki markup distinct is how it is tied into the operation of a wiki. One notable feature is how it handles <db:indexterm><db:primary>linking algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>linking algorithm</db:secondary></db:indexterm>linking. In the original WikiWikiWeb markup, any word with internal capitals was considered a <db:emphasis>WikiWord</db:emphasis> and instantly became a link to a page with that WikiWord as the title. Such a page was created automatically if it did not already exist. This was a simple implementation of a <db:indexterm><db:primary>linking algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>linking algorithm</db:secondary></db:indexterm>linking algorithm based on annotation rather than the naming of resources.</db:para>
<db:para>Different wikis support different markup. <db:xref linkend="fig.mediawiki"/> shows a small example of <db:indexterm><db:primary>MediaWiki</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>MediaWiki</db:secondary></db:indexterm>MediaWiki markup. (<db:indexterm><db:primary>MediaWiki</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>MediaWiki</db:secondary></db:indexterm>MediaWiki is the system that runs Wikipedia).</db:para>
<db:figure xml:id="fig.mediawiki"><db:title>Sample of MediaWiki markup<db:footnote><db:para>https://en.wikipedia.org/wiki/Wiki#Editing</db:para></db:footnote></db:title><db:programlisting language="mediawiki">
"Take some more [[tea]]," the March Hare said 
to Alice, very earnestly.
    
"I've had '''nothing''' yet," Alice replied in 
an offended tone, "so I can't take more."
    
"You mean you can't take ''less''?" said the Hatter. 
"It's very easy to take ''more'' than nothing."
</db:programlisting></db:figure>
<db:para>A wiki is a type of simple <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>content management system that allows people to create and edit pages directly from a web browser. A wiki, essentially, is a CMS that partitions and distributes the problem of web content management out to individual contributors, allowing anyone to edit and improve a site. Wikipedia is by far the largest and most well-known wiki. Wiki’s are a significant example of a <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture. Anyone can add a page, and that page is integrated into the overall collection by WikiWord-style linking and by including itself in categories (conventionally, by naming them on the page).</db:para>
<db:para>Cunningham described WikiWikiWeb as “The simplest online database that could possibly work.”<db:footnote><db:para>http://www.wiki.org/wiki.cgi?WhatIsWiki</db:para></db:footnote> Like Markdown, its success has led to additional features, fragmentation, and growing complexity. Some commercial wikis are now complex content management systems. Indeed, it is somewhat difficult today to define the boundaries between wikis, blogging platforms, and conventional CMSs.</db:para>
<db:para>If wikis have a defining characteristic today it is probably the bottom-up architecture rather than the original novelty of in-browser editing, which is now found across many different kinds of CMS. Cunningham designed wikis to be collaborative platforms – places where people could collaborate with people they might not even know to create something new with no central direction or control. The idea was not only architecturally bottom-up but also editorially bottom-up. However, today, most wikis include features that allow you to exercise a degree of central control. <db:indexterm><db:primary>Question-and-answer sites</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>Question-and-answer sites</db:secondary></db:indexterm>Question-and-answer sites, such as Stack Exchange with its distributed and democratic control systems, may be closer today to Cunningham’s idea of a democratic creation space.</db:para>
<db:para>What wikis illustrate for structured writing is that simple markup innovations such as the WikiWord can have a revolutionary effect on how content is created and organized. Most wikis today use words between double square brackets for WikiWords, rather than internal capitals, but the principle is the same. You can link to a thing merely by naming it.</db:para>
<db:para>WikiWords are also a case of <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain annotation. Marking a phrase as a WikiWord says, “this is a significant subject.” It does not provide type information – as the subject annotation examples shown in this book do – but merely denoting a phrase as significant says that it names some subject of importance that deserves a page of its own.</db:para>
<db:para>This illustrates a critical point about bottom-up information architectures: structured writing, even in very simple form, can create texts that are capable of self-organization and that can be assembled into meaningful collections without the imposition of any external structure. However, the wiki process leaves much of the complexity of content creation and management unhandled. The slack has to be taken up by human effort, which works well for Wikipedia, with its army of volunteer contributors and editors, but is harder to reproduce on a corporate scale.</db:para>
</db:section>
<db:section>
<db:title>reStructuredText</db:title>


<db:para><db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>reStructuredText</db:secondary></db:indexterm>reStructuredText is a lightweight hybrid markup language most often associated with the <db:indexterm><db:primary>Sphinx</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Sphinx</db:secondary></db:indexterm>Sphinx documentation framework, which was developed for documenting the Python programming language. We looked at reStructuredText briefly as an example of a hybrid markup language in <db:xref linkend="chapter.markup"/>.</db:para>
<db:para>Similar to Markdown, reStructuredText uses a plain-text formatting approach to basic text structures. This part of the markup looks natural because it uses characters and patterns that you might use to format a document if you only have a plain-text editor (see <db:xref linkend="fig.restructuredtext-1"/>).</db:para>
<db:figure xml:id="fig.restructuredtext-1"><db:title>reStructuredText example</db:title><db:programlisting language="reStructuredText">
Hard Boiled Eggs
================
A hard boiled egg is simple and nutritious. 
Prep time, 15 minutes. Serves 6.

Ingredients
-----------
    ======  ========
    Item    Quantity
    ======  ========
    eggs    12
    water   2qt
    ======  ========

Preparation
-----------
    1. Place eggs in pan and cover with water.
    2. Bring water to a boil.
    3. Remove from heat and cover for 12 minutes.
    4. Place eggs in cold water to stop cooking.
    5. Peel and serve.
</db:programlisting></db:figure>
<db:para>However, reStructuredText also has a feature called <db:emphasis>directives</db:emphasis>, which you can use to create markup with more complex semantics. <db:xref linkend="fig.restructuredtext-2"/> shows a directive for inserting an image.</db:para>
<db:figure xml:id="fig.restructuredtext-2"><db:title>reStructuredText directive for inserting an image</db:title><db:programlisting language="reStructuredText">
.. image:: images/harcboiledegg.png
   :height: 100
   :width: 200
   :scale: 50
   :alt: A hard boiled egg.
</db:programlisting></db:figure>
<db:para>In <db:xref linkend="fig.restructuredtext-2"/>, <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>reStructuredText</db:secondary></db:indexterm>reStructuredText takes the same approach as XML, using characters in a way that they are almost never used in a normal document. This approach simplifies parsing, because there is seldom any question about whether a particular pattern is intended to be markup or text, but it also makes reStructuredText less natural to read and to write. <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>reStructuredText</db:secondary></db:indexterm>reStructuredText is therefore something of a syntactic hybrid, as well as being a hybrid in the sense that it has both fixed and extensible parts.</db:para>
<db:para>If you are looking for a lightweight <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain markup language of moderate complexity and a degree of extensibility, or if you are interested in <db:indexterm><db:primary>Sphinx</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Sphinx</db:secondary></db:indexterm>Sphinx as an authoring and publishing system, <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>reStructuredText</db:secondary></db:indexterm>reStructuredText is an option to consider.</db:para>
</db:section>
<db:section>
<db:title>ASCIIDoc</db:title>


<db:para><db:indexterm><db:primary>ASCIIDoc</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>ASCIIDoc</db:secondary></db:indexterm>ASCIIDoc is a lightweight markup language based on the structure of <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook. It is intended for the same sort of document types for which you might choose DocBook, but it allows you to use a lightweight syntax. In appearance it is similar to <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown, as shown in <db:xref linkend="fig.asciidoc"/>.</db:para>
<db:figure xml:id="fig.asciidoc"><db:title>ASCIIDoc example<db:footnote><db:para>https://en.wikipedia.org/wiki/AsciiDoc</db:para></db:footnote></db:title><db:programlisting language="ASCIIDoc">
= My Article
J. Smith

http://wikipedia.org[Wikipedia] is an
on-line encyclopaedia, available in
English and many other languages.

== Software

You can install 'package-name' using
the +gem+ command:

 gem install package-name

== Hardware

Metals commonly used include:

* copper
* tin
* lead
</db:programlisting></db:figure>
<db:para>However, while <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown was designed for simple Web pages, ASCIIDoc was designed for complex publishing projects with support for a much wider array of document-domain structures, including tables, definition lists, and tables of contents.</db:para>
<db:para>If you are looking for a lightweight document-domain markup language of medium complexity that is compatible with <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook (meaning you are interested in creating books rather than web pages), ASCIIDoc is an option to consider.</db:para>
</db:section>
<db:section>
<db:title>LaTeX</db:title>

<db:para>LaTeX is a <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain markup language used extensively in academia and scientific publishing. It is based on the syntax of <db:indexterm><db:primary>TeX</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>TeX</db:secondary></db:indexterm>TeX, a typesetting system developed by Donald Knuth in 1978.<db:footnote><db:para>https://en.wikipedia.org/wiki/LaTeX</db:para></db:footnote> <db:xref linkend="fig.latex"/> is an example of LaTeX.</db:para>
<db:figure xml:id="fig.latex"><db:title>LaTeX example</db:title><db:programlisting language="LaTex">
\documentclass[12pt]{article}
\usepackage{amsmath}
\title{\LaTeX}
\date{}
\begin{document}
  \maketitle
  \LaTeX{} is a document preparation system for
  the \TeX{} typesetting program. It offers
  programmable desktop publishing features and
  extensive facilities for automating most
  aspects of typesetting and desktop publishing,
  including numbering and  cross-referencing,
  tables and figures, page layout,
  bibliographies, and much more. \LaTeX{} was
  originally written in 1984 by Leslie Lamport
  and has become the  dominant method for using
  \TeX; few people write in plain \TeX{} anymore.
  The current version is \LaTeXe.

  % This is a comment, not shown in final output.
  % The following shows typesetting  power of LaTeX:
  \begin{align}
    E_0 &amp;= mc^2                              \\
    E &amp;= \frac{mc^2}{\sqrt{1-\frac{v^2}{c^2}}}
  \end{align}
\end{document}
</db:programlisting></db:figure>
<db:para><db:xref linkend="fig.latex-out"/> shows how that markup is rendered.</db:para>
<db:figure xml:id="fig.latex-out"><db:title>Output from LaTeX<db:footnote><db:para>The original uploader was Bakkedal at English Wikipedia - Own work, CC BY-SA 2.5, https://commons.wikimedia.org/w/index.php?curid=30044147</db:para></db:footnote></db:title><db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/Latex_example.pdf" contentwidth="4in" align="left"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/Latex_example.png"/></db:imageobject><db:textobject><db:para>Example of LaTeX output.</db:para></db:textobject></db:mediaobject></db:figure>
<db:para>The equation markup shows why LaTeX is popular for academic and scientific publishing. While not exactly transparent, the markup is compact and <db:indexterm><db:primary>functionally lucid</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functionally lucid</db:secondary></db:indexterm>functionally lucid for anyone with a little experience with it.</db:para>
<db:para>Wikipedia offers a comparison of various math markup formats which shows how big a difference syntax can make to the lucidity of a markup language.</db:para>
<db:para>For the equation:</db:para>
<db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/Quadratic_formula.svg" contentwidth="1.5in" align="left"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/Quadratic_formula.png"/></db:imageobject><db:textobject><db:para>A Quadratic formula rendered from LaTeX.</db:para></db:textobject></db:mediaobject>
<db:para>The LaTeX markup is:</db:para>
<db:programlisting language="sam">
x=\frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
</db:programlisting>
<db:para>Whereas the XML-based <db:indexterm><db:primary>MathML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>MathML</db:secondary></db:indexterm>MathML version looks like <db:xref linkend="fig.mathml"/></db:para>
<db:figure xml:id="fig.mathml"><db:title>MathML markup</db:title><db:programlisting language="xml">
&lt;math mode="display" xmlns="http://www.w3.org/1998/Math/MathML"&gt;
 &lt;semantics&gt;
  &lt;mrow&gt;
    &lt;mi&gt;x&lt;/mi&gt;
    &lt;mo&gt;=&lt;/mo&gt;
    &lt;mfrac&gt;
      &lt;mrow&gt;
        &lt;mo form="prefix"&gt;&amp;#x2212;&lt;!-- − --&gt;&lt;/mo&gt;
        &lt;mi&gt;b&lt;/mi&gt;
        &lt;mo&gt;&amp;#x00B1;&lt;!-- &amp;PlusMinus; --&gt;&lt;/mo&gt;
        &lt;msqrt&gt;
          &lt;msup&gt;
            &lt;mi&gt;b&lt;/mi&gt;
            &lt;mn&gt;2&lt;/mn&gt;
          &lt;/msup&gt;
          &lt;mo&gt;&amp;#x2212;&lt;!-- − --&gt;&lt;/mo&gt;
          &lt;mn&gt;4&lt;/mn&gt;
          &lt;mo&gt;&amp;#x2062;&lt;!-- &amp;InvisibleTimes; --&gt;&lt;/mo&gt;
          &lt;mi&gt;a&lt;/mi&gt;
          &lt;mo&gt;&amp;#x2062;&lt;!-- &amp;InvisibleTimes; --&gt;&lt;/mo&gt;
          &lt;mi&gt;c&lt;/mi&gt;
        &lt;/msqrt&gt;
      &lt;/mrow&gt;
      &lt;mrow&gt;
        &lt;mn&gt;2&lt;/mn&gt;
        &lt;mo&gt;&amp;#x2062;&lt;!-- &amp;InvisibleTimes; --&gt;&lt;/mo&gt;
        &lt;mi&gt;a&lt;/mi&gt;
      &lt;/mrow&gt;
    &lt;/mfrac&gt;
  &lt;/mrow&gt;
 &lt;/semantics&gt;
&lt;/math&gt;
</db:programlisting></db:figure>
<db:para>Clearly MathML was not designed with the idea that anyone would ever try to write it raw. It is intended to be the output of a graphical equation editor.<db:footnote>
<db:para>Interestingly, MathML comes in two different flavors. Presentation MathML is a media-domain language that describes how an equation is presented. Content MathML is a subject-domain language that describes what it means.</db:para>
</db:footnote> While you could use a graphical equation editor to create LaTeX math markup, it is certainly possible to write and read raw LaTeX.</db:para>

<db:para>LaTeX is not as lightweight as <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown. Its markup is almost entirely explicit – except for paragraphs, which are delineated by blank lines just as in Markdown. But its syntax is certainly lighter when compared to XML-based languages, and it has much greater <db:indexterm><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>functional lucidity. The hallmark of a lightweight design is sufficient functional lucidity that you can write in raw markup rather than needing a graphical editor. But LaTeX’s structures are barely out of the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, which limits its usefulness for structured writing.</db:para>
</db:section>
<db:section>
<db:title>Subject-domain Languages</db:title>

<db:para>So far we have looked at languages that are primarily <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain in design. The <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain is an obvious choice for a public language since the use of common document types such as books and articles is widespread. But there are public <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain languages as well. One example, which we looked at in <db:xref linkend="chapter.merge"/>, is JavaDoc (see <db:xref linkend="fig.javadoc-redux"/>).</db:para>
<db:figure xml:id="fig.javadoc-redux"><db:title>JavaDoc example</db:title><db:programlisting language="Java">
/**
 * Validates a chess move.
 *
 * Use {@link #doMove(int theFromFile, int theFromRank, 
 * int theToFile, int theToRank)} to move a piece.
 *
 * @param theFromFile file from which a piece is being moved
 * @param theFromRank rank from which a piece is being moved
 * @param theToFile   file to which a piece is being moved
 * @param theToRank   rank to which a piece is being moved
 * @return            true if the move is valid, otherwise false
 */
boolean isValidMove(int theFromFile, int theFromRank, 
int theToFile, int theToRank) {
    // ...body
}
</db:programlisting></db:figure>
<db:para>Not only does JavaDoc have <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain tags for parameters and return values, it effectively incorporates the Java code itself (all computer programs are a kind of structured text). Thus, the JavaDoc processor pulls information from the function header itself to incorporate into the output.</db:para>
<db:para>There are a number of similar languages for documenting different programming languages. One example is <db:indexterm><db:primary>Doxygen</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Doxygen</db:secondary></db:indexterm>Doxygen, which is used for multiple languages. Wikipedia maintains an extensive list at: <db:link xlink:href="https://en.wikipedia.org/wiki/Comparison_of_documentation_generators">https://en.wikipedia.org/wiki/Comparison_of_documentation_generators</db:link>.</db:para>
<db:para>It is difficult to find public <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain lightweight markup languages outside the realm of programming language and API documentation. This is probably because only programmers are likely to write their own parser to create a markup language. Most other people are going to choose an extensible language as a base, which today usually means <db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>XML</db:secondary></db:indexterm><db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>XML</db:secondary></db:indexterm>XML. Part of my motivation for creating <db:indexterm><db:primary>SAM</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>SAM</db:secondary></db:indexterm>SAM is to provide a way to create <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain languages with lightweight syntax.</db:para>
<db:indexterm class="endofrange" startref="idp614413284"/><db:indexterm class="endofrange" startref="idp614413284x"/></db:section>
</db:chapter>
