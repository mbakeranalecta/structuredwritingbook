<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.constraints"><db:title>Constraint Languages</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp2112223252"><db:primary>constraints</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2112223252x"><db:primary>concept</db:primary><db:secondary>constraints</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp2112227732"><db:primary>constraint languages</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2112227732x"><db:primary>concept</db:primary><db:secondary>constraint languages</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp2112230676"><db:primary>schema language</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2112230676x"><db:primary>concept</db:primary><db:secondary>schema language</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp2110783524"><db:primary>XML Schema</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2110783524x"><db:primary>language</db:primary><db:secondary>XML Schema</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp2110788260"><db:primary>Schematron</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2110788260x"><db:primary>language</db:primary><db:secondary>Schematron</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp2110783652"><db:primary>Relax NG</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp2110783652x"><db:primary>language</db:primary><db:secondary>Relax NG</db:secondary></db:indexterm>




<db:para>Structured writing is about applying constraints to content and recording the constraints that the content follows, both to constrain what writers write and to constrain how algorithms interpret the content. This requires some way to express constraints in a formal and machine readable way. Schema languages partition this problem and redirect it to a common validation algorithm expressed by a standard piece of software that everyone can use. Schema languages are, quite simply, languages for expressing constraints.</db:para>
<db:para>For <db:indexterm><db:primary>concrete markup languages</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>concrete markup languages</db:secondary></db:indexterm>concrete markup languages, such as <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown, the constraints are established in the code of the processor. A Markdown file is validated when the processor parses that file. (In practice, though, Markdown does no meaningful validation. Anything it does not recognize as markup, it simply outputs as text.)</db:para>
<db:para>For <db:indexterm><db:primary>abstract markup languages</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>abstract markup languages</db:secondary></db:indexterm>abstract markup languages, such as <db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>XML</db:secondary></db:indexterm><db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>XML</db:secondary></db:indexterm>XML, you define structures yourself. Basic XML syntax is validated by the parser, but the definition of constraints is the business of a schema language. The validation of those constraints is the business of a piece of software called a validator.</db:para>
<db:para>A schema language is a structured language for defining structured languages. The schema for a markup language says what structures are allowed and in what order and relationship. A given document either conforms to those constraints or it does not.</db:para>
<db:para><db:xref linkend="fig.relaxng"/> contains a schema fragment in a schema language called <db:indexterm><db:primary>RelaxNG</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>RelaxNG</db:secondary></db:indexterm>RelaxNG, which is one of several schema languages available for defining <db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>XML</db:secondary></db:indexterm>XML-based markup languages.</db:para>
<db:figure xml:id="fig.relaxng"><db:title>RelaxNG schema language</db:title><db:programlisting language="RNG">
&lt;element name="book" xmlns="http://relaxng.org/ns/structure/1.0"&gt;
   &lt;oneOrMore&gt;
      &lt;element name="page"&gt;
         &lt;text/&gt;
      &lt;/element&gt;
   &lt;/oneOrMore&gt;
&lt;/element&gt;
</db:programlisting></db:figure>

<?dbfo-need height="2in"?>

<db:para><db:xref linkend="fig.relaxng"/> defines two elements and three constraints. The first element is called <db:code>book</db:code> and the second is called <db:code>page</db:code>. The constraints are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:code>page</db:code> element must occur inside the <db:code>book</db:code> element. (Because the <db:code>page</db:code> element is defined inside the <db:code>book</db:code> element structure.)</db:para>
</db:listitem>
<db:listitem>
<db:para>There must be at least one <db:code>page</db:code> element inside the <db:code>book</db:code> element, and there can be more. (Because the <db:code>page</db:code> element is defined inside an RelaxNG <db:code>oneOrMore</db:code> element.)</db:para>
</db:listitem>
<db:listitem>
<db:para>Text can occur inside the <db:code>page</db:code> element, but not directly inside the <db:code>book</db:code> element. (Because the RelaxNG <db:code>text</db:code> element occurs inside the definition of the <db:code>page</db:code> element, but not as a direct child of the <db:code>book</db:code> element definition.)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Thus, if an author writes the passage in <db:xref linkend="fig.moby-dick"/>, a validator will report an error because the words “Moby Dick” are directly inside the book element and text is not allowed in that position.</db:para>
<db:figure xml:id="fig.moby-dick"><db:title>Passage from Moby Dick, marked up in XML</db:title><db:programlisting language="xml">
&lt;book&gt;Moby Dick
    &lt;page&gt;Call me Ishmael. Some years ago- never mind how long 
    precisely- having little or no money in my purse, and nothing 
    particular to interest me on shore, I thought I would sail 
    about a little and see the watery part of the world.&lt;/page&gt;
&lt;/book&gt;
</db:programlisting></db:figure>
<db:para>There are several different schema languages for <db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>XML</db:secondary></db:indexterm>XML, each of which is capable of expressing and enforcing different sets of constraints. It is not unusual to combine different schema languages to more completely constrain a markup language. In particular, many schemas, including the DocBook schema, use a schema language called <db:indexterm><db:primary>Schematron</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Schematron</db:secondary></db:indexterm>Schematron in concert with another schema language such as <db:indexterm><db:primary>RelaxNG</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>RelaxNG</db:secondary></db:indexterm>RelaxNG or <db:indexterm><db:primary>XSD</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>XSD</db:secondary></db:indexterm>XSD.</db:para>
<db:para>While most schema languages work by modeling the structure of a document, as in the <db:indexterm><db:primary>RelaxNG</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>RelaxNG</db:secondary></db:indexterm>RelaxNG example (<db:xref linkend="fig.relaxng"/>), <db:indexterm><db:primary>Schematron</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Schematron</db:secondary></db:indexterm>Schematron works by making assertions about the structure in a language called <db:indexterm><db:primary>XPath</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>XPath</db:secondary></db:indexterm>XPath. A <db:indexterm><db:primary>Schematron</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Schematron</db:secondary></db:indexterm>Schematron schema would make a lousy guide for authoring, but it uses assertions to enforce constraints that no other schema language can.</db:para>
<db:para><db:xref linkend="fig.schematron"/> is a simple <db:indexterm><db:primary>Schematron</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Schematron</db:secondary></db:indexterm>Schematron example. It defines one of the constraints listed above, namely that a book element must contain at least one page element.</db:para>
<db:figure xml:id="fig.schematron"><db:title>Schematron rule that constrains <db:code>book</db:code> elements to contain at least 240 <db:code>page</db:code> elements</db:title><db:programlisting language="schematron">
&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron"  
 queryBinding="xslt2"&gt;
    &lt;pattern&gt;
        &lt;title&gt;Book constraint&lt;/title&gt;
        &lt;rule context="book"&gt;
            &lt;assert test="page[240]"&gt;A book must contain at 
            least 240 pages.&lt;/assert&gt;
        &lt;/rule&gt;
    &lt;/pattern&gt;
&lt;/schema&gt;
</db:programlisting></db:figure>
<db:para>The rule says that in the context of the element <db:code>book</db:code>, the assertion that there is an element <db:code>page</db:code> that is number 240 in the sequence of pages must be true. In other words, there must be at least 240 pages in a book. If not, the message in the <db:code>assert</db:code> element is displayed.</db:para>
<db:para>In the <db:indexterm><db:primary>RelaxNG</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>RelaxNG</db:secondary></db:indexterm>RelaxNG schema example (<db:xref linkend="fig.relaxng"/>), the schema is essentially a template that models the hierarchy of the document. The constraints are consequences of the structure of that hierarchy. For example, the <db:code>book</db:code> element cannot contain text because there is no place for text in that part of the hierarchy. Only documents that conform to the template are valid.</db:para>
<db:para>In the <db:indexterm><db:primary>Schematron</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Schematron</db:secondary></db:indexterm>Schematron example (<db:xref linkend="fig.schematron"/>), the schema is a series of constraint statements. The hierarchy of the document is a consequence of meeting all the constraints. Any document is valid as long as it conforms to all the stated constraints.</db:para>
<db:para>There are two ways to describe constraints:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Nothing is allowed unless a specific rule allows it.</db:para>
</db:listitem>
<db:listitem>
<db:para>Everything is allowed unless a specific rule forbids it.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Schematron is based on the latter doctrine. It says anything is valid as long as it passes a given set of tests. Other schema languages take the former approach. For example, if you validate an XML document against an empty XSD schema, the validator will say the document is invalid because it can’t find the definition of the root element. An XSD or RelaxNG schema describes constraints as a set of permissions. The writer is constrained to stay within the boundaries of what is permitted.</db:para>
<db:para>Starting with the doctrine that everything is allowed is not a good model for structured writing. To write algorithms that can handle a document, you have to know what elements and attributes are allowed and in what combinations. This is why Schematron is seldom used as a standalone schema language. It is more frequently used to express constraints that cannot be expressed in the main schema language.</db:para>
<db:para>The wider point here is that in the course of writing and publishing content you often need to express and enforce constraints. Some constraints – for example resolving <db:indexterm><db:primary>key</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>key</db:secondary></db:indexterm>key references – can be expressed only during the publishing process. You can match a key to a value or resource only after the <db:indexterm><db:primary>synthesis algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>synthesis algorithm</db:secondary></db:indexterm>synthesis algorithm is complete and all the elements of the published content set have been assembled and resolved.</db:para>
<db:para>Constraints, therefore, do not exist at just a single point in the writing and publishing process. You must consider them across the entire publishing process. In particular, when an error occurs in the publishing process, trace it back to where the constraint that could have prevented it was violated and ask how you could better implement or enforce that constraint.</db:para>
<db:para>Two of the most basic design principles of any system are to catch errors as early as possible and to design any error-prone process to make errors less likely. The earlier you catch an error, the less work you waste before the error is detected. And if you can remove the possibility of the error occurring at all, you can avoid all the costs of detecting and fixing the error as well as the greater costs of not catching the error before the content is in the hands of the reader.</db:para>
<db:para>Schema languages are excellent tools for expressing constraints in structured writing. However, in partitioning your content system you also need to determine where each constraint should be enforced. The content process is about getting ideas from the writer’s head to dots on a page or screen. Therefore, you need to enforce constraints and catch errors as close as you can to the beginning of the process: the ideas in the writer’s head. Rhetorical constraints can play a large role in improving not just quality but also process, because they impose constraints and catch errors nearer to ideas in the writer’s head, rather than trying to catch them as dots on the page.</db:para>
<db:para>This means moving your content closer to the subject domain. When you sit down to write a schema, you should not simply think about how to express constraints; you should also think about whether you can factor them out, possibly by moving the content to a different domain. Subject-domain structures tend to be simpler and stricter than document- and media-domain structures. This means that it is easier to write schemas for the subject domain than for the other domains. Schema languages are powerful tools, but they should be used in conjunction with a correct partitioning of the content system.</db:para>
<db:indexterm class="endofrange" startref="idp2112223252"/><db:indexterm class="endofrange" startref="idp2112227732"/><db:indexterm class="endofrange" startref="idp2112230676"/><db:indexterm class="endofrange" startref="idp2110783524"/><db:indexterm class="endofrange" startref="idp2110788260"/><db:indexterm class="endofrange" startref="idp2110783652"/><db:indexterm class="endofrange" startref="idp2112223252x"/><db:indexterm class="endofrange" startref="idp2112227732x"/><db:indexterm class="endofrange" startref="idp2112230676x"/><db:indexterm class="endofrange" startref="idp2110783524x"/><db:indexterm class="endofrange" startref="idp2110788260x"/><db:indexterm class="endofrange" startref="idp2110783652x"/></db:chapter>
