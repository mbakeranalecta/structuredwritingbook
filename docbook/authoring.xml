<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.writing">
<db:title>Writing</db:title>

<db:para>A comprehensive approach to managing the content creation and delivery process means partitioning and directing the complexity of that process to the right people and processes. While there are parts of that process that are separate from the tasks of the writer, most of the complexity of the content process flows through the writer. And because the writer’s attention is a limited and valuable resource that is indispensable for the creation of quality content, much of the effort in designing the content process should be focused on partitioning and directing complexity away from the writer.</db:para>
<db:para>However, because complexity cannot be destroyed, only redirected, it is vital that we don’t drop any of that complexity in the process of directing it away from the writer, because then it falls on the reader. This means that when we move a chunk of complexity out of the writer’s world, we always have to ask the writer to supply enough information to complete the transfer without loss. Thus when we use styles to partition and direct the complexity of document formatting to a designer and and algorithm, we have to ask the writer to apply those styles correctly to the content they create.</db:para>
<db:para>Structured writing can partition and redirect a huge amount of the complexity of content creation – including complexity that you are just not handling now, and which is therefore falling on your readers – but it all starts with writers creating the right structures as they write.</db:para>
<db:para>Structures are the interfaces between the partitions in which we contain the complexity of our processes. Just as software developers partition software complexity behind an API, so information architects and content engineers partition content complexity behind content structure expressed as structured writing markup.</db:para>
<db:para>These structures are a system of constraints. They tell writers what is and is not a valid way to structured their writing. Constraints are the substance of partitioning. They tell you both what you cannot do and what you must do both to maintain the integrity of the partition, and to pass the required information into the partition so that it can play its proper part in the overall content system, ensuring that no complexity goes unhandled.</db:para>
<db:para>Our structured writing system, therefore, can only be a good as the structured content our writers create. Getting the best possible structure from our writers is key to all of the algorithms and all of the benefits of structured writing. This is not something we can afford to leave to chance. We need to be systematic about it.</db:para>
<db:para>All forms of structured writing, even in the media domain require writers to do something other than simply write. Since writing is an intellectually challenging activity that requires full attention, adding structured writing requirements into the mix necessarily takes away some of the attention that should otherwise be given to content, which obviously has the potential to reduce the quality of the content. Clearly, therefore, we need to make sure that the intrusion of structured writing requirements onto the writing process is a minimal as possible and that it removes more complexity than in introduces.</db:para>
<db:para>Quality writing does not result from an writer simply spilling words onto a page or screen in stream of consciousness fashion. Writing is a design activity. It creates a structure of words that conveys complex ideas and information about the real world. It very much matters that the writer says the right things using the right words in the right order. If structured writing techniques can help with this literary design work, they can lessen the intellectual burden on the writer, and thus potentially improve the quality of the content. This is a major area in which structured writing can redirect complexity away from the writer, particularly when the writer is an occasional contributor.</db:para>
<db:para>Of course, structured writing can improve content quality in other ways. Most of the algorithms we will look at pertain to content quality in one way or another, such as improved linking or better management of terminology. Still, these algorithms work on the structures that the writers create. If those structures are incorrect or inconsistent, there is a limit to what downstream algorithms can do to improve quality. It really all begins with getting writers to reliably create the required structures as they write.</db:para>
<db:para>In media-domain systems like word processors and desktop publishing systems, the writer is asked to think about formatting structures while writing. One of the traditional arguments for structured writing is to relieve the writer of the burden of thinking about (and manipulating) formatting so they can focus on writing. This means moving to the document domain. But in the document domain, the writer has a new set of structures to think about: document domain structures. Is it easier on the writer to think about and manipulate document domain structures rather than media domain structures? In some cases, yes. For instance, writing a blog post or a web page in MarkDown may be less cumbersome for some writers than using a WYSIWYG HTML editor.</db:para>
<db:para>However, Markdown does not contain enough structure, or enough constraints on its structure, to enable many of the structured writing algorithms we will be looking at. If we want to support these algorithms, we will need something more structured, and this can easily mean something that requires more of the writer’s attention. If we are proposing to implement management-intensive algorithms, such as reuse, it can mean that writers need to learn and manipulate an entire management system and the management policies that the organization puts in place around it. Depending on how complex these policies are and how foreign they are to the writer’s experience, this can create a burden far greater than that of creating and manipulating formatting according to a style guide.</db:para>
<db:para>We could look at this and say, okay, yes, writing is now more difficult and more complex than it was before because of all this additional structure and all that writers need to learn to apply that structure, but we are getting additional advantages as well, such as reuse and content management, so it is worth it overall. The problem is, attention is a finite resource. Writing is a task that takes full attention, so any requirement added to the task takes attention away from writing. As writing get more difficult, writers do all of the component tasks less well. The more of the writer’s attention is required on structure, the less is available for writing, and the quality of the writing suffers. The writer is dealing with more complexity than they are equipped to handle and some of it inevitably falls through to the reader.</db:para>
<db:para>As the quality of the writing suffers, the writer becomes frustrated with the system, and becomes more interested in getting their ideas down than in obeying the onerous structural rules that are getting in their way. When that happens, the quality of the structure suffers as well. And if both the quality of the writing and the quality of the structures decline, all of your algorithms become less reliable, compromising all of benefits you hoped to obtain. Too much complexity dumped on any one person or process compromizes all downstream persons and processes.</db:para>
<db:para>To look at this another way, the more complex your system becomes, and the more algorithms you are attempting to support, the more important conformance to its constraints becomes. But conformance is fundamentally a human activity. It is that writer who must conform. Good conformance results from creating structures that are easy to conform to. It all begins with writing. Unfortunately, writing is often the last thing people think about in designing content management and structured writing systems. It is the place that complexity get dumped before it eventually gets dumped on readers.</db:para>
<db:para>One of the most familiar tropes of the content management industry is that problems with content management systems are not technology problems, they are human problems. The solution, this trope suggests, lies in better change management and more training. The presumption here is that the tools work fine if only you give them correct input. If the input is not correct, that is the fault of the humans who created the input. But this is an argument we would not accept for any other kind of system. For any other kind of system we would say, “this system is too hard to use”, not “the problem is everybody needs to be better trained and more accepting of change”. The real fault here is poor system design. If humans cannot conform to the structures that the system requires, the fault is in the system design. It is not partitioning and distributing complexity correctly. The structures should be redesigned to be easier to conform to. (We will look at this in more detail in <db:xref linkend="chapter.conformance"/>.)</db:para>
<db:para>How is designing structures for ease of writing consistent with designing them to match the specific constraints that we want to impose for the sake of quality and efficient processing? As we have seen, moving from the media domain to the document domain allows us to factor out or impose certain structural constraints, but often require the introduction of the management domain to impose content management constraints. These complexities detract from ease of writing. But we have also seen that by moving to the subject domain we can factor out many of the document domain and management domain structures. Designing structures for writing, therefore, often consists of factoring out complex publishing and content management structures using subject-domain structures that are lucid for writers.</db:para>
<db:para>One of the most important consequences of this, both for ease of writing and reliability of data, is that in the subject domain you are not asking the writer to think, and to structure content, in terms of algorithms. In this sense, the move to the subject domain not only factors out specific constraints from the writer, it factors out the need to think in algorithms at all, leaving the writer free to think in terms of subject matter. This freedom to focus on content is a property I call functional lucidity.</db:para>
<db:section>
<db:title>Functional lucidity</db:title>
<db:para>Functional lucidity means the way that you actually use language when you are writing, which is to say the way that you use language when you are in the throes of figuring out what you want to say and how you want to say it. If you are asked to add markup to your content as you write, if you are asked to shape your content according to the constraints that a structured writing language dictates, then the lucidity of that markup and the structures it defines are vital to your success. The names of the structures, the order in which they occur should spring into your mind as readily (if not more so) that the words and phrases and ideas you are trying to record.</db:para>
<db:para>If you have ever tried to learn a language, you know how painful it is even to write a paragraph in a language you are not fluent in. The effort of finding words and correct grammatical structures takes all of the attention that should be reserved for what you are trying to say. Writing in a markup language where the structures don’t make intuitive sense, where they don’t seem to fit the thoughts you are trying to express, is very much like this. Lucidity is essential to avoid having the markup absorb all of the attention that should be focused on the content.</db:para>
<db:para>Functional lucidity is not an absolute property, of course. What is lucid for one writer may be opaque to another. In particular, professional technical writers who have been used to writing in structured document domain templates in applications like FrameMaker may find a markup language like DocBook functionally lucid, whereas someone not used to thinking in these terms would find it difficult and distracting. On the other hand, those writers used to FrameMaker often find DITA’s structure difficult to get used to because they do not find its approach to topics lucid. To still others it seems very natural.</db:para>
<db:para>But while different writers may have different degrees of experience and familiarity with abstract document structures, all writers should have familiarity with the subject matter they are writing about. Thus a well-designed subject domain language tends to naturally have functional lucidity for everyone who is likely to use it.</db:para>
</db:section>
<db:section>
<db:title>Simplicity and Clarity</db:title>
<db:para>One of the biggest benefits of subject domain markup for writers is a much higher degree of functional lucidity compared with a typical document domain language.</db:para>
<db:para>While a general document domain language like DocBook needs to have a wide range of document structures, a recipe markup language such as we developed in <db:xref linkend="chapter.subject-domain"/>, has only a few simple structures. Better still, there are very few permutations of those structures.</db:para>
<db:para>Because subject domain structure describe the subject matter they contain, they are also much clearer to writers, who may not understand complex document structures (or, more often, the subtle distinctions between several similar document structures), but who do (we hope) understand their subject matter.</db:para>
<db:para>The combination of simplicity and clarity mean that in many cases you can get writers to create subject-domain structured content with little or no training. For instance, even if we add some additional fields to our recipe markup, you could still hand a sample like the one below to an writer and ask them to follow it as a template, without giving them any training or any special tools.</db:para>
<db:programlisting language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity
        eggs, 12
        water, 2qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</db:programlisting>
<db:para>Of course, the downside is that recipe markup is only good for one thing: recipes. Complexity is never destroyed, only moved somewhere else. So this approach moves complexity away from the writer to the person who has to design and maintain these structures and the algorithms that process them. (Information Architect and Content Engineer are both titles sometimes used for the person with this responsibility.)</db:para>
<db:para>This can seen scary because we are not used to partitioning complexity in this way. But then, we also recognize that the way we have partitioned complexity in the past has not been as successful as we would like – that it has, in fact, left much of the complexity of content creation unhandled, resulting in that complexity being dumped on our readers. If a new partitioning of the complexity of the content creation process is required, we have to accept that some of these new methods of partitioning will be unfamiliar. They are the place where previously unhandled complexity that used to get dumped on the reader is now being handled.</db:para>
</db:section>
</db:chapter>
