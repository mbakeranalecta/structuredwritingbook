<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.writing"><db:title>Writing</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idm1422750108"><db:primary>writing</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1422750108x"><db:primary>algorithm</db:primary><db:secondary>writing</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idm1422749980"><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1422749980x"><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>




<db:para>Most humans are bad writers. By that I don’t just mean that they use poor grammar or spelling or that they create run-on sentences or use the passive voice too much, though all those things may be true and annoying. I mean something more fundamental: they don’t say the right things in the right way for the right audience. They leave out stuff that needs to be said, they weigh their text down with stuff that does not need to be said, or they write in a way that is hard to understand.</db:para>
<db:para>We all suffer from a malady called <db:indexterm><db:primary>the Curse of Knowledge</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>the Curse of Knowledge</db:secondary></db:indexterm>the Curse of Knowledge,<db:footnote><db:para>https://en.wikipedia.org/wiki/Curse_of_knowledge</db:para></db:footnote> which makes it difficult for us to understand what it is like not to understand something we know. Harvard psychologist Steven Pinker regards the curse of knowledge as single best explanation for bad writing.<db:footnote><db:para>https://www.linkedin.com/pulse/single-reason-why-some-people-cant-write-according-glenn-leibowitz</db:para></db:footnote> Because we forget what it is like to not understand, we take shortcuts, we make assumptions, we say things in obscure ways, and we just plain leave stuff out.</db:para>
<db:para>This is not a result of mere carelessness. The efficiency of human communication rests on our ability to assume that the person we are communicating with shares a huge collection of experiences, ideas, and vocabulary in common with us.<db:footnote><db:para>http://everypageispageone.com/2015/08/04/the-economy-of-language-or-why-we-argue-about-words/</db:para></db:footnote> Laboriously stating the obvious is as much a rhetorical fault as omitting the necessary. Yet what is obvious to one reader may be obscure to another. The curse of knowledge is that as soon as something becomes obvious to us, we can no longer imagine it being obscure to someone else.</db:para>
<db:para>Thus, much human-to-human communication fails. The rhetoric is inadequate. The recipient of the communication simply does not understand it or does not receive needed information because the writer left it out.</db:para>
<db:section>
<db:title>We write better for machines than we do for humans</db:title>

<db:para>These days we create a lot of information to be read by machines. The machines are pretty stupid and extremely literal, which forces us to be very careful in how we create and structure information for machines to act on. The computer science community coined the phrase “garbage in, garbage out” very early, because the machines were, and to a large extent still are, too stupid to identify garbage input, and they did not have the capacity to seek clarification or consult other sources, as a human would. They just spit out garbage.</db:para>
<db:para>Therefore, we had to improve the quality and precision of the data going in. We worked out precise data structures and implemented elaborate audit mechanisms to make sure that data was complete and correct before we fed it to the machine.</db:para>
<db:para>We have never been as diligent in improving the quality of the content we feed human beings. Faced with poor content, human beings do not halt and catch fire; they either lose interest or do more research. Given our adaptability as researchers and our tenacity in pursuing things that really matter to us, we often manage to muddle through bad content, though at considerable economic cost. And writers are often so removed from their readers that they have no notion of what the poor reader is going through. If readers did halt and catch fire, we might put more effort and attention into content quality.</db:para>
<db:para>Even today, with many companies implementing enterprise content management and making the store of corporate knowledge available to all employees, most of the emphasis is on making content easier to find, not on making that content more worth finding. (This despite the fact that the best thing you can do to make content easy to find it to make it more worth finding.) People trying to build the semantic web spend a lot of time trying to make the data they prepare for machines correct, precise, and complete. We don’t do nearly as much for humans.</db:para>
<db:para>Part of the problem is that improving content quality runs up against the <db:indexterm><db:primary>curse of knowledge</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>curse of knowledge</db:secondary></db:indexterm>curse of knowledge. Both writers and the subject matter experts who review their content suffer from the curse, which makes it difficult to audit written content. Style guides and templates can help, but their requirements are difficult to remember and compliance is hard to audit, meaning there is little feedback for a writer who strays.</db:para>
<db:para>The curse of knowledge and the distance separating writers from readers are a major source of complexity. Structured writing provides a way to guide and audit content, specifically, the <db:emphasis>rhetoric</db:emphasis> of our content: what we say and how we say it to achieve a specific end.</db:para>
<db:para>Structured writing enables us to write in the subject domain (wholly or partially), which allows us to guide and audit rhetoric in ways not otherwise possible. It also allows us to factor out many constraints, simplifying the writing task and allowing writers to devote more attention to the quality of their content, whether that content is read by people or robots.</db:para>
</db:section>
<db:section>
<db:title>Structure, art, and science</db:title>

<db:para>Many writers reject the idea that imposing constraints can improve quality. They see writing as a uniquely human and individual act, an art, not a science and, therefore, immune to the encroachment of algorithms. But I suggest that structures and algorithms do not diminish the human and artistic aspects of writing. Rather, they supplement and enhance them.</db:para>
<db:para>We see this pattern in all the arts. Music has always depended on making and perfecting instruments as tools of the musician. Similarly the mathematics of musical theory gave us <db:indexterm><db:primary>well-tempered tuning</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>well-tempered tuning</db:secondary></db:indexterm>well-tempered tuning, on which modern Western music is based.</db:para>
<db:para>Computer programming is widely regarded as an art<db:footnote><db:para>http://ruben.verborgh.org/blog/2013/02/21/programming-is-an-art/</db:para></db:footnote> among practitioners, but the use of sound structures is an inseparable part of that art. Art lies not in the rejection of structure but in its mature and creative use. As noted computer scientist Donald Knuth observes in his essay, <db:indexterm><db:primary>Computer Programming as an Art</db:primary></db:indexterm><db:indexterm><db:primary>citetitle</db:primary><db:secondary>Computer Programming as an Art</db:secondary></db:indexterm><db:citetitle>Computer Programming as an Art</db:citetitle>, most fields are not either an art or a science, but a mixture of both.</db:para>
<db:blockquote>
<db:attribution>http://dl.acm.org/citation.cfm?id=361612</db:attribution>
<db:para>Apparently most authors who examine such a question come to this same conclusion, that their subject is both a science and an art, whatever their subject is. I found a book about elementary photography, written in 1893, which stated that “the development of the photographic image is both an art and a science.” In fact, when I first picked up a dictionary in order to study the words “art” and “science,” I happened to glance at the editor’s preface, which began by saying, “The making of a dictionary is both a science and an art.”</db:para>
</db:blockquote>
<db:para>As writers, we can use structures, patterns, and algorithms as aids to art, just like every other profession. Of course, few writers would claim that there is no structure involved in writing. We have long recognized the importance of grammatical structure and rhetorical structure in enhancing communication. The question is, can the type of structures that structured writing proposes improve our writing, and if so, in what areas? Traditional poetry is highly structured, but using an <db:indexterm><db:primary>XML schema</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>XML schema</db:secondary></db:indexterm>XML schema won’t help you write a better sonnet. On the other hand, following the accepted rhetorical pattern of a recipe will help you write a better cookbook, and using structured writing to create your recipes will help you improve the consistency of your recipes, produce them more efficiently, and exploit them as assets in new ways.</db:para>
<db:para>The question then becomes: how much of our work is like recipes and how much is like sonnets? That is, how much of business and technical communication would benefit from structured writing? The answer, I believe, is that a great deal of business and technical communication would benefit. You may not see any obvious structure in much of that communication, but that is not evidence that structure is inappropriate. Rather, it means that structure has not been developed and applied to the content.</db:para>
</db:section>
<db:section>
<db:title>Contra-structured content</db:title>

<db:para>Nonetheless, there is much resistance among writers to the use of structure writing techniques. Part of this is an inevitable attachment to long established patterns of work. Part is an understandable, but ultimately not sustainable, reluctance to comply with externally defined rhetorical patterns. Despite it distractions and its complexity, many are attached to the desktop publishing approach to content because it give them a sense of ownership of the entire work. Often, such reluctance is overcome when writers have an chance to work with a well designed and well managed structured writing system.</db:para>
<db:para>But we must also acknowledge that many writers have had a bad experience with structured writing. Often, the structured writing system was not chosen or designed by the writers to enhance their art; it was imposed externally for some other purpose, such as to facilitate the operation of a content management system or to make it easier to reuse content. Too frequently, such systems move complexity away from some other function and dump it on writers without sufficient thought being given to where that complexity should go. Such systems actively interfere with the writer’s task, hindering the production of quality content.</db:para>
<db:para>A badly designed structured writing system forces writers to use structures that are not designed to support their tasks. The result is not merely unstructured for these purposes, it is actually <db:emphasis>contra-structured</db:emphasis>. Such a system enforces structures that actively block writers from doing their best work.</db:para>
<db:para>I talk to writers all the time who show me page designs and layouts that make no sense, lamenting that the system gives them no alternatives. Content structure is not generic, and you cannot expect to simply install the flavor-of-the-month CMS or structured writing system and get a good outcome. The system you use must at least be compatible with, if not actively supportive of, the rhetoric you need to create.</db:para>
</db:section>
<db:section>
<db:title>Constraints versus usability</db:title>

<db:para>Most of the complexity of the content process flows through the writer. Before computers, the writer prepared a typescript that was handed off to other people to manipulate before the work was eventually set in type and printed. Today, we generally expect that the writer will be the last person to manipulate content. Everything after that will be handled by an algorithm. The writer must supply everything the publishing process needs. Making that task manageable for writers is key to successfully partitioning your content system.</db:para>
<db:para>But the complexity imposed by publishing and content management functions is not the only source of complexity that writers must deal with. They must also develop the best rhetorical strategy for a given subject matter, apply that strategy consistently, and work effectively with other writers to achieve the overall content strategy of the organization. These factors are major sources of complexity, and all that complexity flows through the writer as well.</db:para>
<db:para>If we are going to partition the content system to relieve writers of as many extended decisions as possible, we need to create structures that effectively direct those decisions away from them. But we can’t do this by creating a loose unconstrained environment for writers. If we don’t get a high level of conformance to specific content structures, our algorithms will not be reliable, the partitioning will break down, and the complexity will fall back on the writers or down to the readers. The structures we present to writers must combine strict conformance with ease of use.</db:para>
<db:para>In media-domain systems, such as word processors and desktop publishing systems, writers must make decisions about formatting while writing. One of the traditional arguments for structured writing is that it relieves writers of the burden of making and executing formatting decisions, so they can focus on writing. This means moving to the document domain. But in the document domain, writers have a new set of structures to think about. Is it easier for writers to think about and manipulate document-domain structures rather than media-domain structures? In some cases, yes. For instance, writing a blog post or a web page in <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown may be less cumbersome for some writers than using a <db:indexterm><db:primary>WYSIWYG</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>WYSIWYG</db:secondary></db:indexterm>WYSIWYG <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML editor.</db:para>
<db:para>However, <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown does not contain enough structure – or enough constraints on its structure – to enable many of the structured writing algorithms we will be looking at. If we want to support these algorithms, we need something more structured.</db:para>
<db:para>If we want to implement management-intensive algorithms such as <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse, writers may need to learn how to manipulate a content management system and the management policies that go with one. Depending on how complex these policies are and how foreign they are to the writer’s experience, this can create a far greater burden than formatting content according to a style guide.</db:para>
<db:para>We could look at this and say, yes, this additional structure has made writing more difficult and complex than it was before. However, we are gaining advantages as well, such as reuse and content management. The problem is, attention is a finite resource. Writing takes full attention, and added decision making takes attention away from writing and requires more knowledge and skill from the writer. As writing get more difficult, writers handle each component task less well. In addition, it becomes harder to find writers who have the necessary skills to work in a more complex environment. The more attention writers must spend on structure, the less they have available for writing, and the quality of their writing suffers.</db:para>
<db:para>As writing quality suffers, writers become frustrated with the system, and, in order to focus their attention on content, they start to ignore the onerous structural rules that are getting in their way. When that happens, the quality of the structure suffers as well. And if the quality of both the writing and the structure declines, your algorithms become less reliable, compromising all of benefits you hoped to obtain. Too much complexity dumped on any one person or process compromises all downstream persons and processes.</db:para>
<db:para>Conformance is fundamentally a human activity. It is writers who must conform, and they conform best when you create structures that are easy to conform to. It all begins with writing. Unfortunately, writing is often the last thing people think about when designing content management and structured writing systems. Yet, writing is where complexity gets dumped.</db:para>
<db:para>One of the most familiar tropes of the content management industry is that problems with content management systems are not technology problems, they are human problems. The solution, this trope suggests, lies in better change management and more training. The presumption here is that the tools work fine if you give them correct input. If the input is not correct, that is the fault of the humans who created the input.</db:para>
<db:para>We would not accept this argument for any other kind of system. For any other kind of system we would say, “this system is too hard to use,”, not “the problem is that everybody needs to be better trained and more accepting of change.” The real fault here is poor system design. If humans cannot conform to the structures the system requires, the fault is in the system design. If the system doesn’t partition and distribute complexity correctly, the structures need to be redesigned so humans can conform to them. (We look at this in more detail in <db:xref linkend="chapter.conformance"/>.)</db:para>
<db:para>How do we design structures that are easy to use but still provide the constraints we need for quality and efficiency? As we have seen, moving from the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain to the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain allows us to factor out or impose certain structural constraints, but to do so, we often must introduce the management domain to impose content management constraints. This added complexity detracts from ease of writing. However, we have also seen that moving to the subject domain allows us to factor out many of the document-domain and management-domain structures. Designing structures for writing, therefore, often consists of factoring out complex publishing and content management structures using <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures that are lucid for writers.</db:para>
<db:para>One of the most important consequences of this, both for ease of writing and reliability of data, is that in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain you don’t ask writers to think, decide, and structure content in terms of algorithms. In this sense, the move to the subject domain not only factors out specific constraints from writers, it factors out the need for writers to think in algorithms at all, leaving them free to think and decide in terms of subject matter. This freedom to focus on content is a property I call <db:emphasis>functional lucidity</db:emphasis>.</db:para>
</db:section>
<db:section>
<db:title>Functional lucidity</db:title>

<db:para>Functional lucidity refers to the total intellectual burden that a system imposes on writers: how clearly do they understand what the system requires and how fluidly and naturally can they create structures and content in that system. The functional lucidity of a markup language is not a matter of its size or its complexity. It is a matter of how natural and obvious it is for writers to use and how well the markup language aligns with a writer’s core decisions, the decisions that are essential to the task, as opposed to extended decisions, which are external to it.</db:para>
<db:para>If you have ever tried to learn a language, you know how painful it is to write even a paragraph in a language you are not fluent in. The effort of finding words and correct grammatical structures takes all of the attention that should be reserved for what you are trying to say. Writing in a markup language where the structures don’t make intuitive sense, where they don’t seem to fit the thoughts you are trying to express, where they require knowledge and skills external to your core task, is very much like this. Lucidity is essential to avoid having the markup absorb all of the attention that should be focused on the content.</db:para>
<db:para>There is a bit of a catch to functional lucidity, however. Many professional writers, particularly technical writers, are so used to making extended decisions that they find it disconcerting, at least at first, to use a system that removes those decisions from them. Thus, writers currently using a complicated <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain tool such as <db:indexterm><db:primary>FrameMaker</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>FrameMaker</db:secondary></db:indexterm>FrameMaker may feel more comfortable switching to an equally complicated <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain markup language like <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook, since it involves most of the same extended decisions they were making before. On the other hand, writers who are not used to making those decisions will find neither <db:indexterm><db:primary>FrameMaker</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>FrameMaker</db:secondary></db:indexterm>FrameMaker nor <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook to be functionally lucid.</db:para>
<db:para>Writers’ initial impressions of the functional lucidity of a tool or markup language are often based on how well the extended decisions required by the new tool align with those required by the old tool, rather than on how well the language aligns with their core decisions. Their old tools have created a rut in the mind that leads them to expect a new tool to present the same extended decisions as the old tool.</db:para>
<db:para>However, remember that the aim in adopting structured writing is to handle elements of complexity that we are not currently handling well. Thus, we need to assess the functional lucidity of any proposed system based on a long-term view of how the new system partitions complexity, not on a short-term view of how familiar the structures are to writers based on their current tools. A well-designed <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain language will be functionally lucid for writers who are familiar with the subject matter, even if they have to get used to no longer making the extended decisions required by their old tools. Writers will get over their attachment to the old tools if the new tools produce superior results.</db:para>
</db:section>
<db:section>
<db:title>Simplicity and Clarity</db:title>

<db:para>One of the biggest benefits of <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain markup for writers is a much higher degree of <db:emphasis>functional lucidity</db:emphasis> compared with a typical document-domain language.</db:para>
<db:para>While a document domain-language such as <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook must have a wide range of document structures, a recipe markup language such as the one we developed in <db:xref linkend="chapter.subject-domain"/> has only a few simple structures. Better still, there are very few permutations of those structures. The decisions writers must make align closely with the core task of expressing the method for preparing a dish.</db:para>
<db:para>Because <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures describe the subject matter they contain, they are also much more lucid to writers, who may not understand complex document structures (or, more often, the subtle distinctions between several similar document structures), but who do (we hope) understand their subject matter.</db:para>
<db:figure xml:id="ex.authoring-recipe"><db:title>Expanded recipe for hard-boiled eggs</db:title><db:programlisting language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity
        eggs, 12
        water, 2qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</db:programlisting></db:figure>
<db:para>The combination of simplicity and clarity means that writers can often create subject-domain structured content with little or no training. For instance, even if we add some additional fields to our recipe markup, a writer could easily use a sample like the one in <db:xref linkend="ex.authoring-recipe"/> as a template without any training or special tools.</db:para>
<db:para>Of course, the downside is that recipe markup is good for only one thing: recipes. Complexity is never destroyed, only moved somewhere else. So this approach moves complexity away from the writer to the person who has to design and maintain these structures and the algorithms that process them. (<db:indexterm><db:primary>Information Architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>Information Architect</db:secondary></db:indexterm>Information Architect and <db:indexterm><db:primary>Content Engineer</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>Content Engineer</db:secondary></db:indexterm>Content Engineer are both titles sometimes used for the person with this responsibility.)</db:para>
<db:para>This can seem scary because we are not used to partitioning complexity in this way. But then, the way we have partitioned complexity in the past has not been as successful as we would like – it has, in fact, left much of the complexity of content creation unhandled, resulting in impaired rhetoric and  all the costs associated with it. A new partitioning of the content creation process requires us to accept that some of these new methods of partitioning will be unfamiliar.</db:para>
<db:indexterm class="endofrange" startref="idm1422750108"/><db:indexterm class="endofrange" startref="idm1422749980"/><db:indexterm class="endofrange" startref="idm1422750108x"/><db:indexterm class="endofrange" startref="idm1422749980x"/></db:section>
</db:chapter>
