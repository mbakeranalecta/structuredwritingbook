<?xml version="1.0"?>
<db:partintro xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings">
<db:para>At its most basic, structured writing is a system for partitioning a document. That is, it is a way to break up a document into a set of pieces, and to attach a name or type, along with other pieces of metadata to each of these parts. The question is, what kinds of parts do you partition a document into?</db:para>
<db:para>The most common tool for doing this partitioning is markup, which is essentially a system for partitioning the raw text of a document into the text itself and the pieces into which it has been partitioned. You have probably worked with markup. HTML is an example of a markup language. It partitions web pages into their actual content and the structures and instructions that govern how it will be displayed. We will look at the mechanics of markup languages later in the book.</db:para>
<db:para>Different markup languages partition documents in different ways, breaking them up into different pieces and naming those pieces in different ways. One term that is often used to distinguish one type markup language from another is “semantic”. Semantics is the study of meaning, so semantic markup is markup that tells us what the content means. The problem is, people can, and do, understand the phrase “semantic markup” in different ways, leading to confusion about what is and is not semantic markup. And in truth, all markup has meaning at some level, so it is all semantic. Markup that has no semantics would have no value.</db:para>
<db:para>But if calling markup “semantic” is not really helpful, we do still need a way to talk about the different ways in which markup languages can partition documents, because the way a markup language partitions a document is directly related to how it allows you to partition your content system. In this section, therefore, I am going to propose a way to distinguish between the different ways markup languages can partition documents by introducing four domains of content structure, each representing a fundamentally different way of partitioning a document. Through the rest of the book I will show how choosing a markup language in each of these domains profoundly affects how you can partition your content system as a whole.</db:para>
<db:para>None of these domains is new. People have been using these approaches to markup for decades. Dividing these techniques into domains simply gives us a consistent way to talk about them and to explore the virtues of each.</db:para>
</db:partintro>
