<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.subject-domain"><db:title>Writing in the Subject Domain</db:title>



<db:para>The <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain is concerned with the subject matter of a text. It includes both the rhetoric of a subject – the particular way in which information on a subject is expressed and presented for a particular audience and purpose – and with the identification of subjects expressed in the content.</db:para>
<db:para>Some of the most important decisions that a writer makes when writing a text are the rhetorical ones: what to say and how to say it. A writer working in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain makes all those decisions, but does not explicitly record them. They only record the text that results from making those decisions. In the subject domain, however, the writer actually records what it is they are writing about in explicit terms.</db:para>
<db:para>A recipe is a useful example for illustrating the use of the subject domain. Here is a recipe written in <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm>reStructuredText, a lightweight general purpose <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain markup language:</db:para>
<db:informalfigure>
<db:programlisting language="reStructuredText">
Hard Boiled Eggs
================
A hard boiled egg is simple and nutritious. 
Prep time, 15 minutes. Serves 6.

Ingredients
-----------
    ======  ========
    Item    Quantity
    ======  ========
    eggs    12
    water   2qt
    ======  ========
    
Preparation
-----------
    1. Place eggs in pan and cover with water.
    2. Bring water to a boil.
    3. Remove from heat and cover for 12 minutes.
    4. Place eggs in cold water to stop cooking.
    5. Peel and serve.
</db:programlisting>
</db:informalfigure>
<db:para>In <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm>reStructuredText, a line underlined with equals signs is a major heading and one underlined with dashes is a minor heading. A table is created by using equals signs to mark the beginning and end of the table and the boundary between the table head and the table body. Rows are separated by new lines and columns by spaces in the rows of equals signs. Numbered lists are created by putting numbers in front of lines of text. The equivalent HTML document would look like this:</db:para>
<db:programlisting language="HTML">
&lt;html&gt;
    &lt;h1&gt;Hard Boiled Eggs&lt;/h1&gt;
    
    &lt;p&gt;A hard boiled egg is simple and nutritious. 
    Prep time, 15 minutes. Serves 6.&lt;/p&gt;
    
    &lt;h2&gt;Ingredients&lt;/h2&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Item&lt;/th&gt;
                &lt;th&gt;Quantity&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;eggs&lt;/td&gt;
                &lt;td&gt;12&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;water&lt;/td&gt;
                &lt;td&gt;2qt&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h2&gt;Preparation&lt;/h2&gt;
    &lt;ol&gt;
        &lt;li&gt;Place eggs in pan and cover with water.&lt;/li&gt;
        &lt;li&gt;Bring water to a boil.&lt;/li&gt;
        &lt;li&gt;Remove from heat and cover for 12 minutes.&lt;/li&gt;
        &lt;li&gt;Place eggs in cold water to stop cooking.&lt;/li&gt;
        &lt;li&gt;Peel and serve.&lt;/li&gt;
    &lt;/ol&gt;
&lt;/html&gt;
</db:programlisting>
<db:para>This document follows the normal rhetorical pattern of a recipe. That is, it has all the pieces of information a recipe normally has, in the order they normally occur in a recipe: introduction, list of ingredients, preparation steps. However, it does not record the fact that it follows this rhetorical pattern. There is nothing in the markup to say that this is not a novel, a car manual, or knitting pattern. Nor would the markup constrain an author to follow the normal rhetorical pattern of a recipe while writing.</db:para>
<db:para>Moving this document to the subject domain would allow us to impose these rhetorical constraints, and to record that we have done so. Neither <db:indexterm><db:primary>reStructuredText</db:primary></db:indexterm>reStructuredText nor <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm>HTML give us a way to do that, so we will need a different markup language. Here’s what that might look like:</db:para>
<db:programlisting language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
</db:programlisting>
<db:para>This structure breaks the document up into a collection of named structures. Those structures are “introduction”, “ingredients”, and “preparation” and they are contained in an overall structures called “recipe”. This is the basic rhetorical structure of a recipe. This markup make it explicit that this is a recipe (not a novel, a car manual, or a knitting pattern). The author is explicitly guided to follow this pattern. They are also constrained to present the ingredients as an unordered list and the preparation as a numbered list. (<db:xref linkend="chapter.conformance"/> will look at how such constraints are expressed and enforced.)</db:para>
<db:para>In other words, in this example, certain basic rhetorical decisions about how to write a recipe have been made by someone other than the writer – we can call the person the information architect, though this is not always the responsibility of people with that title. By making this basic rhetorical structure explicit, the information architect communicates this requirement to the author. This simplifies the writer’s task. (They no longer need to make this decision for each recipe they write.) It also ensures that all recipes in the collection follow this pattern.</db:para>
<db:para>This is not necessarily an all or nothing distinction. This recipe markup language enforces a couple of basic rhetorical decisions about recipes, but leaves plenty of others or the writer to make. Few markup languages are entirely in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain or entirely in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain, though most can be fairly identified as predominantly document domain or predominantly subject domain. We’ll see later how we can move this recipe markup further into the subject domain, capturing more rhetorical decisions in the markup language design as we do so.</db:para>
<db:para>But this markup does not merely enforce rhetorical decisions on the writer (meaning that the <db:indexterm><db:primary>information architect</db:primary></db:indexterm>information architect makes the decision, but the writer has to implement it), it also factors out some rhetorical decisions altogether. This means that the writer neither makes nor implements the decision. The decision is made by the <db:indexterm><db:primary>information architect</db:primary></db:indexterm>information architect and implemented by a algorithm (designed by the information architect).</db:para>
<db:para>Let’s say that we have made a rhetorical decision that the ingredients and preparation sections of each recipe should be titled “Ingredients” and “Preparation”. When the recipe was written in <db:indexterm><db:primary>markdown</db:primary></db:indexterm>markdown, in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain, the writer had to remember and execute this decision each time. But in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain version, the titles have been factored out. Instead we have markup structures called <db:code>ingredients</db:code> and <db:code>preparation</db:code>, but these don’t contain titles. The titles will be added back into the content by the <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm>publishing algorithm.</db:para>
<db:para>Partitioning requires that we pass enough information to the partition to do its job. Here the presence of the <db:code>ingredients</db:code> and <db:code>presentation</db:code> sections in the recipe structure provide the information that the algorithm needs to insert the appropriate titles.</db:para>
<db:para>By factoring out titles, we factor out the constraint on what those titles must be. An author no longer has to remember the standard titles to use, and a whimsical author can no longer decide to title these sections “Stuff you need” and “Stuff you do”, or any other variant of the standard that the organization has chosen. If we want to change these titles across all the recipes, on the other hand, we only have to change the algorithm. By partitioning the titles out of the content, and out of the writer’s task, we have gained the ability to make and to change the decision about the titles of these sections in all recipes, not only those we write in the future, but all those we have already written, without having to go back and edit the content file at all.</db:para>
<db:para>If your organization publishes a lot of recipes, you probably have a lot more constraints on the rhetorical structure of your recipes. For instance, you might have a constraint that every recipe must state its preparation time and the number of people it serves. In our subject domain markup, we can enforce and record that constraint by moving the information from the introduction section to separate fields:</db:para>
<db:programlisting language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 1
</db:programlisting>
<db:para>This approach changes the partitioning of the prep-time and serves information. Previously, writers had to remember the requirement to mention these facts in the text of the introduction. Now we have partitioned them off into simple fields that the writer is required to fill out. The writer no longer has to remember the presentation rules that dictate that this information is required and where it should appear. They are prompted for it directly and errors will be raised if they forget, and the decision about where to include it has been transferred to an algorithm.</db:para>
<db:para>Does this mean that the preparation time will now be displayed as separate fields in the output, rather than in-line? Not necessarily. It might be a good idea to call it out in separate fields so that readers can find the information more easily, but if you really wanted that information at the end of the introduction in every recipe, it would be a simple matter for the <db:indexterm><db:primary>publish  algorithm</db:primary></db:indexterm>publish  algorithm to construct the sentences “Prep time, 15 minutes. Serves 6.” from the <db:code>prep-time</db:code> and <db:code>serves</db:code> field values.</db:para>
<db:para>So, something interesting has happened here. In order to enforce a rhetorical constraint – that prep time and number of servings must be specified – we have moved away from markup that specifies presentation to markup that merely records data. In other words, <db:code>prep-time</db:code> and <db:code>serves</db:code> are data-oriented <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain structures that do not specify presentation at all. We are now partitioning the presentation of the recipe from the information the recipe must contain. This allows us to shift responsibility for conformance to our requirements from the author to a <db:indexterm><db:primary>conformance algorithm</db:primary></db:indexterm>conformance algorithm. This makes our design more testable and more <db:indexterm><db:primary>repeatable</db:primary></db:indexterm>repeatable – a welcome redistribution of complexity.</db:para>
<db:para>This is a recurring pattern in structured writing, and one of the most important things to understand about how structured writing works. It is almost always better to factor out a constraint than to enforce it. This can be a difficult idea to adjust to. If we have a particular form of presentation we want to achieve, our first instinct naturally is to specify it in detail. But this is not always easy to do, especially if you want to specify that a paragraph should always contain certain pieces of information. Nor is it flexible if you want to vary the presentation for any reason (we will look at some reasons why you might in <db:xref linkend="chapter.single-sourcing"/>). It is important to condition yourself so that when you look at these kinds of problem the first question you ask yourself is, is there a way I can factor out this constraint. Only resort to trying to impose a constraint if it is not possible to factor it out.</db:para>
<db:para>Note that when you enforce a constraint, that means that the information architect has made the decision, but that the writer is still required to execute it in the content. When you factor out a constraint, the information architect is still making the decision, but the writer is no longer require to execute it. It is executed by an algorithm and separate from the content. This not only means that the writer’s job is simpler, and conformance to the constraint is more reliable, it also means that yo have the ability to change the decision independently of the content.</db:para>
<db:para>In addition, using data-oriented <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm>subject-domain markup like this also offers some interesting publishing possibilities. For instance, with this markup in place, you could easily create a cookbook of recipes you can make in 30 minutes or less because you can query your set of recipes and pull out just those in which the <db:code>prep-time</db:code> field has a value of 30 minutes or less.</db:para>
<db:para>Are there other elements of presentation that we can factor out of the recipe structure? As we noted, the reStructuredText version above uses a table presentation for the ingredients. Our recipe structure currently specifies a simple list. The block that contains it is labeled “ingredients”, but the contents of the block is just an ordinary unordered list.</db:para>
<db:para>There is a constraint here about how ingredients are expressed, one which authors need to follow, but one that our markup does not yet impose or record. The specification of ingredients in a recipe generally requires three pieces of information, the name of the ingredient, the quantity, and the unit of measure used to express this quantity. These can be presented as a list or a table. To factor out the presentation choice, we can create an ingredient structure that calls out each piece of information separately:</db:para>
<db:programlisting language="sam">
ingredients:
    ingredient: 
        name: eggs
        quantity: 12
        unit: each
    ingredient:
        name: water
        quantity: 2
        unit: qt
</db:programlisting>
<db:para>There are some shortcuts we can take to make this markup less verbose. (This is a markup syntax named <db:indexterm><db:primary>SAM</db:primary></db:indexterm>SAM that I will talk about later):</db:para>
<db:programlisting language="sam">
ingredients:: ingredient, quantity, unit
    eggs, 12, each
    water, 2, qt
</db:programlisting>
<db:para>This markup turns the ingredients into a set of records with named fields for ingredient, quantity, and unit. This enforces and records that the constraint on ingredients is followed. And because the way they are recorded is independent of any one form of presentation, we are now free to use an algorithm to present them either as a table or as a list.</db:para>
<db:para>By adding and recording these constraints, we get similar benefits as before. We can better enforce any constraints we have about how ingredient lists are structured and formatted, and we gain access to the specific data involved, meaning, for example, that we could write an algorithm to convert our units from imperial to metric for publication in markets where metric units are preferred.</db:para>
<db:section>
<db:title>Using subjects to establish context</db:title>
<db:para>In <db:xref linkend="chapter.document-domain"/>, we noted that we can use context to identify the role that certain structures play in a document, which allows us to get away with fewer structures. For instance, we can use a single <db:code>title</db:code> tag for all titles because we can tell what kind of title each one is from the context in which it occurs. The same is true with subject domain structures. They can provide context that allows us to treat basic text structures differently.</db:para>
<db:para>Consider our markup language for recipes:</db:para>
<db:programlisting language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</db:programlisting>
<db:para>With the ingredients, we saw that we needed to add additional structure to factor out whether the ingredients would be presented as a list or a table. For the preparation, the steps are currently marked up as a numbered list.  Suppose we want to present the steps as steps, rather than just as a generic numbered list (for instance, by labeling them as <db:emphasis role="bold">Step 1.</db:emphasis>, etc, rather than just <db:emphasis role="bold">1.</db:emphasis>). Do we need to create an additional <db:code>step</db:code> structure to do this? Not necessarily. In this case we can can tell the difference between an ordinary ordered list and a set of preparation steps based on context. We can write a rule in the <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm>publishing algorithm that creates special formatting just for ordered lists that are the children of <db:code>preparation</db:code> elements that are children of <db:code>recipe</db:code> elements (just as we could create rules to format a nested list differently from its parent list based on its context in <db:xref linkend="chapter.document-domain"/>). This is another example of how partitioning creates context which simplifies various publishing functions.</db:para>
</db:section>
</db:chapter>
