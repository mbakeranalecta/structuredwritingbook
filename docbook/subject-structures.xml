<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0"><db:title>Subject domain structures</db:title>




<db:para>Not all content can be meaningfully moved into the subject domain. The subject domain requires a repeatable rhetorical structure. Sometimes the nature of your content, your subject matter, or your argument does not lend itself to a repeatable structure. In those cases, the best you can do is work in the document domain. However, you can add subject-domain annotations and indexing (as described in <db:xref linkend="chapter.linking"/>) – marking up significant subjects in your content by their type and value – across all your subject-domain and document-domain content, allowing you to apply the conformance, change management, linking, and information architecture algorithms across your entire body of content.</db:para>
<db:para>But, as I noted in <db:xref linkend="chapter.blocks"/>, you can move a lot of your content into the subject domain, even if it does not currently obey a closely defined rhetorical type, and you can move your content into smaller <db:indexterm><db:primary>rhetorical block</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>rhetorical block</db:secondary></db:indexterm>rhetorical blocks that are easier to apply a repeatable rhetorical structure to. In this chapter I walk through the steps of defining a repeatable rhetorical type using the recipe example we have been looking at throughout the book.</db:para>
<db:para>To begin, let’s take a step back and look at <db:xref linkend="fig.hbe-unstructured-recipe"/>, which shows what a recipe might look like if it were not presented in its familiar rhetorical pattern.</db:para>
<db:figure xml:id="fig.hbe-unstructured-recipe"><db:title>Unstructured recipe for hard-boiled eggs</db:title><db:programlisting language="reStructuredText">
Hard-Boiled Eggs
================
A hard-boiled egg is simple and nutritious. 
Place 12 eggs in a pan and cover with 
water. Bring water to a boil. Remove
from heat and cover for 12 minutes.Place eggs
in cold water to stop cooking. Peel and 
serve. Prep time, 15 minutes. Serves 6.
</db:programlisting></db:figure>
<db:para>If you were discerning the rhetorical structure of a recipe for the first time, you might look at several examples, try making the dishes or observe others doing so, and conclude that it is easier to find and follow a recipe if the ingredients are listed separately and the preparation steps are presented one at a time. You might then come up with a structure that looks like <db:xref linkend="fig.hbe-structured-recipe"/>.</db:para>
<db:figure xml:id="fig.hbe-structured-recipe"><db:title>Basic structured recipe for hard-boiled eggs</db:title><db:programlisting language="reStructuredText">
Hard-Boiled Eggs
================
A hard-boiled egg is simple and nutritious. 
Prep time, 15 minutes. Serves 6.
    
Ingredients
-----------
    ======  ========
    Item    Quantity
    ======  ========
    eggs    12
    water   2qt
    ======  ========
    
Preparation
-----------
    1. Place eggs in pan and cover with water.
    2. Bring water to a boil.
    3. Remove from heat and cover for 12 minutes.
    4. Place eggs in cold water to stop cooking.
    5. Peel and serve.
</db:programlisting></db:figure>
<db:para>At this point you have the basic rhetorical pattern of a recipe, but you don’t have any formal constraints for writers to make the format repeatable. To fix this, you could create a rhetorical block named <db:code>recipe</db:code> that contains three semantic blocks: <db:code>introduction</db:code>, <db:code>ingredients</db:code>, and <db:code>preparation</db:code>. This step factors out the titles of those sections. You might also decide to present the ingredients as a bulleted list and the preparation as a numbered list (these lists are document-domain semantic blocks, composed of structural blocks that we need not delve into here). <db:xref linkend="fig.hbe-rhetorical-block"/> shows the result of these steps.</db:para>
<db:para>This defines the basic rhetoric of a recipe – it enforces the rhetorical constraint. This structure stands at the intersection between the document and subject domains. It is <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain in the sense that it describes the structure of a document, but also <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain in that it is specific to a single subject and defines the document structure in terms of the rhetoric of that particular subject. This structure provides guidance for writers, which helps with <db:indexterm><db:primary>repeatability</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>repeatability</db:secondary></db:indexterm>repeatability, but when you look closer, there are some other things that can be made repeatable in the rhetorical model to make sure they are included every time.</db:para>
<db:figure xml:id="fig.hbe-rhetorical-block"><db:title>Hard-boiled egg recipe as a rhetorical block</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
</db:programlisting></db:figure>
<db:para>Two obvious items are prep time and the number of servings. These are important items that should be in every recipe, but currently they are only in the introduction, where writers could forget them. Also, algorithms can’t access them, so if you wanted to make a collection of recipes that took less than 30 minutes to make, you would not be able to find them algorithmically. So let’s pull those items out into separate fields. Now you can verify that they are included and that algorithms can find the information (see <db:xref linkend="fig.hbe-add-prep-serves"/>).</db:para>
<db:figure xml:id="fig.hbe-add-prep-serves"><db:title>Hard-boiled egg recipe with prep time and servings added</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious. 
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</db:programlisting></db:figure>
<db:para>But if you look a little closer, you will see more information that should be provided consistently and repeatably – the list of ingredients. You probably want to make this information accessible to algorithms, so you can handle it differently for different media or audiences.</db:para>
<db:para>There are three elements to an ingredients list: the name of the ingredient, the quantity required, and the unit of measurement for that quantity. Different units of measure are used for different types of ingredients and for large and small quantities in cooking, so you have to specify the unit of measure each time. The ingredients section of <db:xref linkend="fig.hbe-add-ingredients"/> uses pure subject-domain markup – the rhetoric has been factored out leaving pure data.</db:para>
<db:figure xml:id="fig.hbe-add-ingredients"><db:title>Hard-boiled egg recipe with ingredients list added</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</db:programlisting></db:figure>
<db:para>Once you have put all of the current content into repeatable, accessible structures, it is time to think about whether there is any other information that should be included.</db:para>
<db:para>Usually during this process, people start to say things like “Wait, shouldn’t we tell them X?” Sometimes X is included in one or two of the examples that you are looking at, and you realize it would be useful in all of them. Sometimes it occurs to people for the first time that X might be valuable. The process of formalizing the information you are proposing to offer often produces the realization that there is valuable information that you have not been providing or not providing consistently in your current content.</db:para>
<db:para>Also, it is at this stage that you should think about differential single sourcing, where you might want to capture content that should be presented differently in different domains and reuse scenarios or where you have information presented in one publication but not another.</db:para>
<db:para>Therefore, you might decide to add wine and beverage matches and nutritional information to the model (see <db:xref linkend="fig.hbe-add-beverage"/>).</db:para>
<db:figure xml:id="fig.hbe-add-beverage"><db:title>Hard-boiled egg recipe with beverage and nutrition information</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g               
</db:programlisting></db:figure>
<db:para>Once you are satisfied that the overall structure of the <db:indexterm><db:primary>rhetorical block</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>rhetorical block</db:secondary></db:indexterm>rhetorical block is correct, it is time to think about <db:indexterm><db:primary>subject annotation</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>subject annotation</db:secondary></db:indexterm>subject annotation. Annotating subjects that are significant to the subject matter of the information set makes that information available for many purposes, from linking and formatting to validation and auditing. To do this, go through the text looking for mentions of subjects related to cooking. As you find mentions of food, utensils, and common cooking tasks, add annotation markup for them to your model. <db:xref linkend="fig.hbe-add-annotations"/> contains annotations for items that can be classified as food, utensils, and tasks.</db:para>
<db:figure xml:id="fig.hbe-add-annotations"><db:title>Hard-boiled recipe with annotations</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    introduction:
        A hard-boiled {egg}(food) is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in (pan){utensil} and cover with water.
        2. {Bring water to a boil}(task).
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</db:programlisting></db:figure>
<db:para>This process can raise some interesting questions. For example, you might notice that every recipe uses utensils. If that’s the case, why not make a list of utensils? Wouldn’t such a list help readers determine if they have the equipment needed to make a recipe? And you might notice that a close cousin of the recipe, the knitting pattern, does list equipment: the precise knitting needles used.</db:para>
<db:para>So, should you change the structure of the rhetorical block to include a list of utensils? Specifying subject affinities formally forces you to think systematically about the correct rhetoric for your subject matter and audience. Sometimes the answer to questions like this is no. Over the years, cooks around the world have determined that while a list of ingredients is an essential part of the rhetorical structure of a recipe, a list of utensils is not. Don’t create additional structures just because you can. Create them because they enhance your rhetoric or process.</db:para>
<db:para>Finally, you may want to think about whether there is any management-domain metadata that you need to add to the model. In <db:xref linkend="chapter.metadata"/> and <db:xref linkend="chapter.content-management"/> I consider how much management metadata belongs in the content model itself, as opposed to an external system. Here it is sufficient to note that you may need additional management metadata to support your processes. <db:xref linkend="fig.hbe-add-mgmt-info"/> adds some basic tracking metadata, such as the author’s name and copyright information.</db:para>
<db:figure xml:id="fig.hbe-add-mgmt-info"><db:title>Hard-boiled recipe with management-domain information</db:title><db:programlisting language="sam">
recipe: Hard-Boiled Egg
    author: bcrocker
    rights: full
    season: winter, spring, summer, fall
    introduction:
        A hard-boiled {egg}(food) is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in (pan){utensil} and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</db:programlisting></db:figure>
<db:para>Management-domain metadata may not be part of your current content examples. This is alright, because adding management metadata should be the last step in this process. Once you have formalized the rest of the model, you may find that the subject-domain data you have delineated is usable for management and tracking purposes as well, and you don’t need to add fields just for management. For instance, you can use <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain information to manage which recipes you include in particular publications. For example, with the information in these examples, you could assemble quick and easy meals (less than 20 minutes prep time, fewer than 6 ingredients, fewer than 5 steps) or a low-cal vegetarian cookbook (fewer than 160 calories, no meat ingredients).</db:para>
<db:section><db:title>Keep it simple and lucid</db:title>


<db:para>Most <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain languages are small, simple, and fairly strict in their constraints. This is as it should be. Since you have to design them, and the algorithms that translate them into the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain for publishing, you don’t want them to be elaborate or full of different structural permutations. The point of a subject-domain language is to partition the gathering of information about a subject from all the processes that you might want to perform on that content, from differential single sourcing to linking to information architecture to content reuse.</db:para>
<db:para>If you find yourself needing a similar language for a related subject, it is usually better to create a new, equally small and strict language for that subject rather than trying to make one language cover both. Subject-domain languages get both their power and ease of use from the simple and direct way that the language relates to its subject matter. Trying to make one language cover more than one subject takes away from these properties. If you have ever tried to fill out a government form in which different people or entities are supposed to fill out different fields in different ways, you know how difficult it can be to be sure you have filled out all the sections, and just the sections, that apply to you. It is far better to have one form for each case (though obviously you need to make it clear which case each form applies to).</db:para>
<db:para>A <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain language should communicate with writers in terms they understand. This means that the names of structures should make sense to them, but it also means that the way that the formal structures break things up should make intuitive sense as well. For writers with experience in the field, a subject-domain language should be such a good fit that they don’t really feel like they have to learn anything to use it. This vastly increases the <db:indexterm><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>functional lucidity of the language, leaving more of the writer’s attention free to focus on the subject matter and the aspects of rhetoric that cannot be modeled, while at the same time providing constraints and guidance to make sure that the resulting content is complete and consistent.</db:para>
<db:para>Be careful not to take things too far. Once you get started, it is easy to get carried away and formally describe the subject matter in finer and finer detail. Remember that all of this effort is wasted unless it helps improve your rhetoric or process. If you get to the point where more precisely modeling the subject matter makes your markup mysterious, tedious, or difficult to create, you can do more harm than good, reducing <db:indexterm><db:primary>functional lucidity</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>functional lucidity</db:secondary></db:indexterm>functional lucidity without any compensating increase in quality or efficiency.</db:para>
</db:section>
</db:chapter>
