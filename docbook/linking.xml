<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.linking"><db:title>Linking</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477555332"><db:primary>linking</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477555332x"><db:primary>concept</db:primary><db:secondary>linking</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477555716"><db:primary>linking algorithm</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477555716x"><db:primary>concept</db:primary><db:secondary>linking algorithm</db:secondary></db:indexterm>




<db:para>A large part of the complexity of content is that readers do not read in a straight line. Numerous studies<db:footnote>
<db:para>For a discussion of these studies and their implications for how we write, see my book <db:citetitle>Every Page is Page One: Topic-based Writing for Technical Communication and the Web</db:citetitle>.</db:para>
</db:footnote> have shown that readers often read opportunistically, looking for one piece of information or the answer to a particular question. Their behavior can best be described as <db:indexterm><db:primary>information foraging</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>information foraging</db:secondary></db:indexterm>information foraging. They are sniffing for the scent of the information they want and will follow its trail as long as the scent gets stronger and the trail is easy to follow.</db:para>

<db:para>The best way to support this information foraging behavior is with a <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture (as described in <db:xref linkend="chapter.architecture"/>). Linking is key to building a bottom-up information architecture. But as we discussed in <db:xref linkend="chapter.single-sourcing"/>, different media often require different rhetoric and a difference in linking strategy is a big part of that difference. This makes linking a complex problem.</db:para>
<db:para>Linking is at the heart of a <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture. In a bottom-up architecture, a page is not simply a leaf on a tree: the prize you find at the end of the search. It is a junction point in the exploration of an information space and the quest to understand a subject.</db:para>
<db:para>For example, while reading your content, readers may discover new subjects they need to understand and new options they need to consider. Readers may discover that what they thought they knew is wrong or that what they thought they wanted to do was not the right choice. They may find that their search or navigation has led them to the wrong place, or they may discover new worlds to explore. On a more mundane level, they may discover that they need additional information, such as reference data, to complete a task.</db:para>
<db:para>These are all pointers to some next page that a reader may need. However, even the most prescient writer cannot make every possibility the next page in a linear narrative. To serve readers, writers need to pave all of the possible paths, and the way to do that is with <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext <db:indexterm><db:primary>links</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>links</db:secondary></db:indexterm>links.</db:para>
<db:para>This means that linking is not something that happens at arbitrary points where the writer feels like adding a link. Linking must be planned for as part of the <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture. Whether you specify hard links in the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain or the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain, manage links with keys in the <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management domain, or generate them from <db:indexterm><db:primary>subject annotations</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>subject annotations</db:secondary></db:indexterm>subject annotations in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, links should be created in a disciplined and consistent manner according to a deliberate plan.</db:para>
<db:para>The trail a reader follows through an information set has junction points, places where the reader can decide to keep going straight through the current document or turn aside to look at a different document. While a reader can decide to switch documents at any point and for any reason, the most common reason for switching is because they want more information about, or are simply more interested in, a subject mentioned in the current document.</db:para>
<db:para>Even if each document describes just one subject, it still mentions many other subjects in the course of describing its own subject. Thus, a movie review mentions actors, directors, and other movies; a recipe mentions cooking techniques such as whisking and grilling; and a programming topic mentions functions, libraries, and data structures.</db:para>
<db:section><db:title>Subject affinities</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477570692"><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477570692x"><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>



<db:para>I call the points where a document mentions related subjects <db:emphasis><db:indexterm><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>subject affinities</db:emphasis>. Subject affinities are the junction points where the subjects of different pieces of content intersect, the points were the reader may choose to turn or to go straight on.</db:para>
<db:para>Suppose you are reading a recipe and come across the instruction “sweat the onions,” but you don’t know how to do that. You can’t continue without that knowledge, so you turn aside in search of it. The words “sweat the onions” are a point of subject affinity between the recipe and the cooking technique of sweating vegetables. Your decision to turn in search of additional information at this point is not arbitrary. It follows from the relationship between the task of making the dish and a cooking technique used in that task. Writers can anticipate that some readers will need to make this turn at this point of subject affinity.</db:para>
<db:para>This particular subject affinity, between a recipe and a cooking technique, is neither arbitrary nor unique. The subject affinity between recipes and basic cooking techniques applies universally and can be modeled using structured writing techniques.</db:para>
<db:para>The need to seek more information on a subject or task is part of the complexity of information seeking. The goal of information delivery is to make information seeking simpler. If you don’t make it possible for your readers to find this information when they need it, you are dumping the complexity of navigating the subject affinity onto them. Managing subject affinities, therefore, is an important part of managing the overall complexity of the content system. Making sure that every part of the complexity of the content system is handled by a person or process that has the skill, time, and resources to handle it extends to the reader. You don’t want to give readers any navigational complexity that they are not fully equipped to handle. Indeed, you want to make it as easy as you can for them to navigate subject affinities.</db:para>
<db:para>The most obvious, and generally the most powerful, way of handling subject affinities is to create links from the point in the text where the affinity occurs to a suitable resource that provides the needed information. If you force readers to use search, go to a table of contents, or consult an index when you could easily provide a direct link, you are dumping complexity on them.</db:para>
<db:para>But linking is not the only way to handle subject affinities, nor is linking an option in all media. You can use footnotes, cross references, sidebars, or parenthetical statements to provide additional information. You can even attempt to anticipate and forestall a reader’s information need by using data about that individual to dynamically reorder the content. A discussion of linking, therefore, needs to consider other ways of handling subject affinities that may be appropriate in particular circumstances.</db:para>
<db:para>If you <db:indexterm><db:primary>single-source</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>single-source</db:secondary></db:indexterm>single-source content between different media, you might want to handle subject affinities differently between paper and hypertext outputs. For example, you might want to include a chunk of explanatory content in a sidebar in paper documents but link to a single copy of it in <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext. Linking, in other words, is a kind of <db:indexterm><db:primary>reuse</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>reuse</db:secondary></db:indexterm>reuse that avoids duplication by referencing content rather than copying it.</db:para>
<db:para>Thus, you should not think solely in terms of managing links. Instead, you should think about managing <db:indexterm><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>subject affinities and supporting them in a way that works best with each of your output formats.</db:para>
<db:para>One of the biggest problems with link management is that it’s complex and often time-consuming. As a result, many organizations do not link their content adequately, nor do they provide alternative ways to handle subject affinities. They just dump the complexity of finding the next piece of information right back on the reader.</db:para>
<db:para>However, there are ways to partition the complexity of link management and subject affinity management that make it much easier and more economical for writers to provide good subject affinity support. To understand how to do this, it is useful to look at how link and subject affinity management works in each of the <db:indexterm><db:primary>structured writing domains</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>structured writing domains</db:secondary></db:indexterm>structured writing domains.</db:para>
<db:indexterm class="endofrange" startref="idp1477570692"/><db:indexterm class="endofrange" startref="idp1477570692x"/></db:section>
<db:section><db:title>Subject affinities in the media domain</db:title>


<db:para>In the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, you simply record the various devices used to express subject affinities: cross references, tables, links, etc. For example, in HTML a link specifies a page to load:</db:para>
<db:programlisting language="html">
&lt;p&gt;In Rio Bravo, 
&lt;a href="https://en.wikipedia.org/wiki/John_Wayne"&gt;the Duke&lt;/a&gt; 
plays an ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting>
<db:para>The phrase “the Duke” is a subject affinity. The reader may not know who “the Duke” is or may want more information about him. The link allows the reader to navigate the subject affinity and find the information needed.</db:para>
<db:para>But if the page is printed, the link is lost. The phrase “the Duke” is still a subject affinity, and the reader may still want more information. The reader can still get more information by doing a search for “the Duke” or asking a friend what the phrase means. But the printed version doesn’t support the reader’s need. It dumps the complexity of the search back on the reader.</db:para>
<db:para>If the content had been written for paper, the subject affinity might be supported in a different way. For example, it might be supported by adding an explanation in parentheses:</db:para>
<db:blockquote>
<db:para>In Rio Bravo, the Duke (John Wayne) plays an ex-Union colonel out for revenge.</db:para>
</db:blockquote>
<db:para>Or it might be handled with a footnote:</db:para>
<db:programlisting language="text">
In Rio Bravo, the Duke* plays 
an ex-Union colonel out for revenge.
        
...
        
* "The Duke" is the nickname of the actor John Wayne.
</db:programlisting>
<db:para>Clearly, this is a case where you would like to do <db:indexterm><db:primary>differential single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>differential single sourcing</db:secondary></db:indexterm>differential single sourcing and handle the subject affinity differently in different media. To accomplish this, you need to move the content out of the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain.</db:para>
</db:section>
<db:section><db:title>Subject affinities in the document domain</db:title>


<db:para>Moving to the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain is about factoring out the formatting specific structures of the media domain. But a link is not really a piece of formatting, so conventional refactoring into abstract document structures doesn’t apply. For this reason, people working in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain often enter hypertext links exactly the way they would in the media domain – by specifying a URL. Thus, in <annotation type="markup-language"><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA</annotation> you might enter a link as:</db:para>
<db:programlisting language="DITA">
&lt;p&gt;In Rio Bravo, 
  &lt;xref href="https://en.wikipedia.org/wiki/John_Wayne" 
        format="html"&gt;The Duke&lt;/xref&gt; 
  plays an ex-Union colonel out for revenge.
&lt;/p&gt;
</db:programlisting>
<db:para>The difference from <annotation type="markup-language"><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML</annotation> is slight. The link element is <db:code>&lt;xref&gt;</db:code> rather than <db:code>&lt;a&gt;</db:code>. But the meaning of <db:code>&lt;xref&gt;</db:code> is bit more general. The HTML <db:code>&lt;a&gt;</db:code> element says, “create a hypertext link to this address.” The DITA <db:code>&lt;xref&gt;</db:code> element says, “create some sort of reference to this resource.” (As you will see in a moment, DITA is capable of linking to things other than HTML pages, which is why it requires the <db:code>format</db:code> attribute to specify that in this case the target is an HTML page.) This gives you a little more leeway in processing. From this markup, you can create usable print output that looks like this:</db:para>
<db:blockquote>
<db:para>In Rio Bravo, the Duke (see: https://en.wikipedia.org/wiki/John_Wayne) plays an ex-Union colonel out for revenge.</db:para>
</db:blockquote>
<db:para>This is not the way you would handle the subject affinity if you were designing for paper, but it is a definite improvement from a <db:indexterm><db:primary>differential single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>differential single sourcing</db:secondary></db:indexterm>differential single sourcing point of view. At least the link is now visible to readers.<db:footnote>
<db:para>Technically you could do this from the HTML markup as well, but that would be cheating. The HTML markup doesn’t really give you permission to do this. It says create a hypertext link and nothing else. The problem with cheating is that you are basing your algorithm on constraints that are not promised or enforced, and this can fail in ways you may not expect or catch. Some cheats are more reliable than others, but you probably don’t want to get into the habit. It’s better to create content in a format that doesn’t require cheating to get the output you want.</db:para>
</db:footnote></db:para>

<db:para>Fundamentally, though, this is not a satisfactory <db:indexterm><db:primary>differential single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>differential single sourcing</db:secondary></db:indexterm>differential single sourcing solution. Unless there is no alternative (such as when you are citing a specific source), you would not normally direct someone reading paper to the web or vice versa. Linking to an already published file, such as an HTML page, means linking to the address where the published file resides. It commits you to a particular format for the link target. If, instead of linking to the published address, you link to the address of the unpublished source file, or to an identifier for that file, you gain the freedom to link to any format of that content that you choose to publish.</db:para>
<db:para>In DITA, you can link to another DITA file (this is the default format, so you don’t need to use the <db:code>format</db:code> attribute):</db:para>
<db:programlisting language="html">
&lt;p&gt;In Rio Bravo, &lt;xref href="John_Wayne.dita"&gt;The Duke&lt;/xref&gt; 
plays an ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting>
<db:para>You don’t yet know if that content will be published to paper or the web, what the address of the published topic will be, or if that topic will stand alone or be assembled into a larger page or document for publication. This means that the publishing system is taking on responsibility for both ends of the link. It has to make sure that the target page is published in a way the source page can link to and that the source page links to the right address. But transferring this responsibility to an algorithm gives you the leeway to publish this link as you see fit.</db:para>
<db:para>If you publish as a printed book and the target resource ends up as part of a chapter in that book, you can render the <db:code>xref</db:code> as a cross reference to the page that resource appears on. And you can format that cross reference in line or as a footnote. These are all legitimate interpretations of the <db:code>xref</db:code>’s instruction to create a reference to a resource.</db:para>
<db:para>If you publish to a help system and the target resource ends up as a topic in the same help system, you could render the <db:code>xref</db:code> as a hypertext link to that topic.</db:para>
<db:para>This is a big step forward, but it still does not let you do this:</db:para>
<db:blockquote>
<db:para>In Rio Bravo, the Duke (John Wayne) plays an ex-Union colonel out for revenge.</db:para>
</db:blockquote>
<db:para>In other words, you can render the <db:code>xref</db:code> as a cross reference, a link, or a footnote, but you can only handle the subject affinity as a reference to that specific resource. You can’t decide to link to a different resource or render it as a sidebar instead. If you want those capabilities, you need to turn to the <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management domain.</db:para>
</db:section>
<db:section><db:title>Subject affinities in the management domain</db:title>


<db:para>Linking to a source file rather than to an address gives you more latitude about how the link or cross reference is published, but you are still linking to the same resource. If you are doing <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse, this is a problem, because you do not know if the same resource will be available everywhere you reuse your topic. You need to be able to link to different resources when your topic is used in different places.</db:para>
<db:para>To accommodate this, you can factor out the file name and replace it with an ID or a key. IDs and keys are <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management-domain structures that I discussed in <db:xref linkend="chapter.reuse"/>. They allow you to refer to resources indirectly. Using IDs lets you use an abstract identifier rather than a file name to identify a resource. Using keys lets you remap the resources you point to, which is a more efficient way to address this problem. So instead of referring to a specific resource on John Wayne, you refer to the key <db:code>John_Wayne</db:code>. In DITA this would look like the following:</db:para>
<db:programlisting language="DITA">
&lt;p&gt;In Rio Bravo, &lt;xref keyref="John_Wayne"&gt;The Duke&lt;/xref&gt; 
plays an ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting>
<db:para>Somewhere in the <db:indexterm><db:primary>DITA map</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>DITA map</db:secondary></db:indexterm>DITA map for each publication, the key <db:code>John_Wayne</db:code> points to a topic. Publications link the <db:code>keyref</db:code> to the resource pointed to by that key in each of their DITA maps. This allows you to link to different resources in each publication.</db:para>
</db:section>
<db:section><db:title>The problem with IDs and keys</db:title>


<db:para>However, there is still a problem with linking based on IDs and keys. Keys let you vary which resource a <db:code>keyref</db:code> resolves to, but what happens when the resource doesn’t exist? The <db:code>xref</db:code> demands that a reference to a resource be created, but there is no resource to link to. You have a broken link and fixing it is not easy. You can’t simply go in and remove the <db:code>xref</db:code> from the source for one publication, because it defeats the purpose of <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse if you have to edit the content every time you reuse it. Removing the key reference would fix the broken link in one publication, but that would result in the link being removed from all publications, even where the resource does exist and the link ought to be created.</db:para>
</db:section>
<db:section><db:title>Relationship tables</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477351300"><db:primary>relationship tables</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477351300x"><db:primary>concept</db:primary><db:secondary>relationship tables</db:secondary></db:indexterm>



<db:para>One solution to this problem is to use a relationship table. In a conventional linking approach, the source page contains an embedded link that points to the target page. The source knows it is pointing to the target, but the target does not know it is being pointed to (see <db:xref linkend="fig.linking-simplelink"/>).</db:para>
<db:figure xml:id="fig.linking-simplelink"><db:title>A simple link</db:title><db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/simplelink.svg" contentwidth="2.8in" align="center"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/simplelink.png"/></db:imageobject><db:textobject><db:para>Diagram showing how a simple link works.</db:para></db:textobject></db:mediaobject></db:figure>
<db:para>Because the target resource does not know it is being pointed to, it does not have to do anything in order for other resources to point to it. This is fundamental to the rapid growth of the web. If the target resource had to participate in the link process, every link would require negotiation between page owners, and the owner of the target resource would have to edit that resource to accept the link. It would have been impossible for the web to grow as explosively and organically as it has under those conditions.</db:para>
<db:para>A relationship table takes this one step further. When you create a link using a relationship table, you factor the link out of the source document and place it in a separate table. The relationship table in <db:xref linkend="fig.linking-linktable"/> says resource A links to resource B, but neither resource A nor resource B knows anything about it.</db:para>
<db:figure xml:id="fig.linking-linktable"><db:title>A relationship table</db:title><db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/linktable.svg" contentwidth="4in" align="center"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/linktable.png"/></db:imageobject><db:textobject><db:para>Diagram showing how a link table connects two resources.</db:para></db:textobject></db:mediaobject></db:figure>
<db:para>Once the links are factored out of a piece of content, you can reuse it anywhere you like. If there is a suitable resource available to link to, you enter it in a relationship table for that build and have the presentation algorithm create the link at build time. If no suitable resource is available for a different publication, no entry is made in the relationship table for that publication, and the presentation algorithm does not create a link.</db:para>
<db:indexterm class="endofrange" startref="idp1477351300"/><db:indexterm class="endofrange" startref="idp1477351300x"/></db:section>
<db:section><db:title>The problem with relationship tables</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477360260"><db:primary>relationship tables, problems with</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477360260x"><db:primary>concept</db:primary><db:secondary>relationship tables, problems with</db:secondary></db:indexterm>



<db:para>The problem with relationship tables is that they separate the link from the subject affinity it supports. The link was created to serve a subject affinity in the content – a point where readers might encounter something they don’t understand or might need more information – but the relationship table does not record the subject affinity, it simply says that there is some connection between topic A and topic B. And it does not say where in topic A the subject affinity is located. Therefore, there is no way to insert a link at the point where the subject affinity occurs. Links generated by relationship tables end up in a block, usually at the end of the page.<db:footnote>
<db:para>It is not impossible to imagine a markup system in which you could markup the source of the subject affinity in topic A and then have the relationship table reference that point by ID, thus allowing you to insert a link at the subject affinity. But this would be cumbersome for writers, and it would complicate the management task. I don’t know of any systems that work this way.</db:para>
</db:footnote></db:para>

<db:para>The fundamental problem here is that links exist as a way to service subject affinities in content. If we lose sight of this and think only in terms of managing links between resources, it makes sense to pull links out of the content and manage them separately. However, this ignores the reason links exist in the first place, which is to provide readers with support at a point of subject affinity. Using relationship tables is a classic case of partitioning that focuses on one part of the problem without adequate regard for the complexity that is being redirected. Moving the link away from the subject affinity simplifies link management but makes it harder for readers to find supporting information – a classic case of sacrificing rhetoric in the name of process efficiency.</db:para>
<db:para>The other problem with the relationship table approach is that it is time consuming. You have to rewrite the links for each content set, and because the <db:indexterm><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>subject affinities are not recorded in the content source, you have to figure out the appropriate links each time. This goes against the spirit of recording something once and using it many times. A mechanism intended to help you reuse content ends up forcing you to rework links for each publication you create. In other words, this mechanism does not partition the complexity of link management very well.</db:para>
<db:indexterm class="endofrange" startref="idp1477360260"/><db:indexterm class="endofrange" startref="idp1477360260x"/></db:section>
<db:section><db:title>Conditional linking</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477359108"><db:primary>linking, conditional</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477359108x"><db:primary>concept</db:primary><db:secondary>linking, conditional</db:secondary></db:indexterm>



<db:para>Before leaving the management domain, it is worth mentioning a management-domain approach that could address the differential single sourcing problem and handle subject affinities for both online and print publishing. This approach uses conditional structures to include content for both options in the source file. With a <db:indexterm><db:primary>DITA specialization</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>DITA specialization</db:secondary></db:indexterm>specialization to support <db:code>media</db:code> as a conditional attribute, you could do this in DITA as shown in <db:xref linkend="fig.linking-dita"/>..</db:para>
<db:figure xml:id="fig.linking-dita"><db:title>Conditional linking in DITA</db:title><db:programlisting language="DITA">
&lt;p&gt;In Rio Bravo,
&lt;ph media="online"&gt;&lt;xref keyref="John_Wayne"&gt;The Duke&lt;/xref&gt;&lt;/ph&gt;
&lt;ph media="print"&gt;The Duke (John Wayne)&lt;/ph&gt;
plays an ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting></db:figure>
<db:para>In <db:xref linkend="fig.linking-dita"/>, the DITA <db:code>&lt;ph&gt;</db:code> element delineates a phrase in the content that you want to apply management-domain attributes to. There are two versions of the phrase “the Duke,” one for print that uses a parenthetical expression and one for online that uses a link. The <db:code>media</db:code> attribute identifies the version. The <db:indexterm><db:primary>synthesis algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>synthesis algorithm</db:secondary></db:indexterm>synthesis algorithm chooses the appropriate version of the phrase for each publication based on the conditions set for the build.</db:para>
<db:para>There are obvious problems with this approach. It doubles the writer’s job and it doubles the cost of maintenance. This approach also flies in the face of creating formatting-independent content.</db:para>
<db:para>Unfortunately, in a general purpose <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain markup language with <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management-domain support, it is nearly impossible to support differential single sourcing and content reuse without forcing  writers to do things like this. And, in practice, writers do end up using conditional markup like this, which can lead to tangles of conditions that are hard to maintain and debug.</db:para>
<db:para>The <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management-domain approach does a poor job of partitioning the complexity of links and handling subject affinities:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Management-domain link structures are artificial. They don’t correspond to things in the writer’s everyday world, which makes them harder to learn and use. They introduce complexity into the writer’s world, which leads writers to severely limit the links they create.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can’t link to a key or an ID that does not exist. This means that as you develop a set of content, the first pages have few other pages to link to. You cannot enter links to content that has not been written yet. This introduces the complexity of system dependencies into the writer’s world.</db:para>
</db:listitem>
<db:listitem>
<db:para>In <db:indexterm><db:primary>reuse</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>reuse</db:secondary></db:indexterm>reuse scenarios, the use of <db:indexterm><db:primary>IDs</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>IDs</db:secondary></db:indexterm>IDs and <db:indexterm><db:primary>keys</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>keys</db:secondary></db:indexterm>keys does not solve the whole problem because you cannot guarantee that the resource that an ID or key refers to will be present in the final publication. You can use relationship tables to address this problem, but they create additional complexity for writers and don’t correctly handle subject affinities in the middle of the content.</db:para>
</db:listitem>
<db:listitem>
<db:para>Unless you resort to ugly conditional structures, you can’t use differential single sourcing to handle subject affinities differently for different media.</db:para>
</db:listitem>
</db:itemizedlist>
<db:indexterm class="endofrange" startref="idp1477359108"/><db:indexterm class="endofrange" startref="idp1477359108x"/></db:section>
<db:section><db:title>Subject affinities in the subject domain</db:title>


<db:para>As described in <db:xref linkend="chapter.reuse"/>, you can often eliminate the need for management-domain structures by moving content to the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain. The same is true with subject affinities. In the subject domain, you can mark up subject affinities as subject affinities. This means that you can move away from managing links and manage subject affinities instead. <db:xref linkend="fig.linking-duke-xml"/> and <db:xref linkend="fig.linking-duke-sam"/> show what this looks like in <annotation type="markup-language"><db:indexterm><db:primary>XML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>XML</db:secondary></db:indexterm>XML</annotation> and <annotation type="markup-language">SAM</annotation>.</db:para>
<db:figure xml:id="fig.linking-duke-xml"><db:title>Subject-domain subject affinity markup in XML</db:title><db:programlisting language="xml">
&lt;p&gt;In &lt;movie&gt;Rio Bravo&lt;/movie&gt;, 
&lt;actor name="John Wayne"&gt;the Duke&lt;/actor&gt; 
plays an ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting></db:figure>
<db:figure xml:id="fig.linking-duke-sam"><db:title>Subject-domain subject affinity markup in SAM</db:title><db:programlisting language="sam">
In {Rio Bravo}(movie), 
{the Duke}(actor "John Wayne") 
plays an ex-Union colonel out for revenge.
</db:programlisting></db:figure>
<db:para>This markup clarifies that “the Duke” (a subject affinity) refers to the actor John Wayne (its subject). It specifies both the type of the subject (actor) and its value (John Wayne).</db:para>
<db:para>This is <db:indexterm><db:primary>subject annotation</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>subject annotation</db:secondary></db:indexterm>subject annotation, not link markup. Unlike <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain <db:code>xref</db:code> markup, it does not insist that a reference should be created nor does it specify any resource to link to. Instead, it simply states what the subject of the text is. Specifically, it clarifies that the phrase “the Duke” refers to the actor named John Wayne (and not the Duke of Wellington or the Duke of Earl) and that the phrase “Rio Bravo” refers to the movie (and not the city in Texas or the nature reserve in Belize).</db:para>
<db:para>Given this markup, you can easily render the subject affinity in a manner that works for print by having the <db:indexterm><db:primary>presentation algorithm</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>presentation algorithm</db:secondary></db:indexterm>presentation algorithm take the value of the <db:code>specifically</db:code> attribute (as this annotation is called in <annotation type="markup-language">SAM</annotation>) and output it between parentheses, as shown in <db:xref linkend="fig.linking-duke-html"/>.</db:para>
<db:figure xml:id="fig.linking-duke-html"><db:title>Subject affinity rendered for print</db:title><db:programlisting language="html">
&lt;p&gt;In Rio Bravo, The Duke (John Wayne) plays an 
ex-Union colonel out for revenge.&lt;/p&gt;
</db:programlisting></db:figure>
<db:para>Marking up a phrase as a subject affinity does not oblige the publishing algorithm to create a link. If you decide to have the publishing algorithm create a link on the web and a cross reference on paper, nothing in the markup obliges you to use any particular formatting or target any particular resource. I’ll describe how to create a link from a subject annotation later in this chapter.</db:para>
<db:para>In all the previous examples, mentions of <db:emphasis>Rio Bravo</db:emphasis> were not marked up, even though the names of movies are clearly subject affinities in a movie review. This reflects the writer’s decision not to create a link to support this subject affinity. But what if you want to make a different choice later? By marking up <db:emphasis>Rio Bravo</db:emphasis> with a subject annotation, you keep your options open by transferring the information needed to make the decision to a different partition. You can tell the <db:indexterm><db:primary>presentation algorithm</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>presentation algorithm</db:secondary></db:indexterm>presentation algorithm to create links on the names of movies if you want to, but you don’t have to.</db:para>
<db:para>There are additional reasons to annotate <db:emphasis>Rio Bravo</db:emphasis> as a subject, because that annotation can be used for other purposes as well.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The subject annotation says that <db:emphasis>Rio Bravo</db:emphasis> is the title of a movie. In the media domain, the titles of movies are commonly printed in italics. You can use the <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain <db:code>movie</db:code> tags to generate <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media-domain italic styling.</db:para>
</db:listitem>
<db:listitem>
<db:para>You could use this subject annotation to generate <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain index markers, so you can automatically build an index of all mentions of movies in a work.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Subject annotation thus serves multiple purposes and, correspondingly, reduces the amount of markup required to support all these publishing functions. This is an important characteristic of subject-domain markup. Because subject-domain markup is not directly tied to specific document-domain or media-domain structures, you can generate multiple document-domain and media-domain structures from the same subject-domain markup.</db:para>
<db:figure xml:id="fig.linking-docbook"><db:title>DocBook markup generated from subject-domain markup</db:title><db:programlisting language="DocBook">
&lt;para&gt;
    In 
    &lt;indexterm&gt;
       &lt;primary&gt;Rio Bravo&lt;/primary&gt;
       &lt;secondary&gt;Movies&lt;/secondary&gt;
    &lt;/indexterm&gt;
    &lt;citetitle pubwork="movie"&gt;Rio Bravo&lt;/citetitle&gt;,
    &lt;indexterm&gt;
        &lt;primary&gt;John Wayne&lt;/primary&gt;
        &lt;secondary&gt;Actors&lt;/secondary&gt;
    &lt;/indexterm&gt;
    &lt;ulink url="https://en.wikipedia.org/wiki/John_Wayne"&gt;
        The Duke
    &lt;/ulink&gt;
    plays an ex-Union colonel out for revenge.
&lt;/para&gt;                
</db:programlisting></db:figure>
<db:para>For example, you could generate the DocBook document-domain markup shown in <db:xref linkend="fig.linking-docbook"/> from subject-domain markup. <db:xref linkend="fig.linking-docbook"/> contains index markers, movie title formatting, and links on the actor’s name, all generated from subject annotations. It should be clear how much less work it takes to create the <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain version of this content than the <annotation type="markup-language"><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook</annotation> version, how many fewer decisions writers have to make, and how much less knowledge and skill they have to possess. Yet the same publishing capabilities are supported by both versions.</db:para>
<db:para>Generating links from subject annotations has a number of other advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>In a <db:indexterm><db:primary>reuse</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>reuse</db:secondary></db:indexterm>reuse scenario, you never have to worry about broken links or creating relationship tables. The <db:indexterm><db:primary>presentation algorithm</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>presentation algorithm</db:secondary></db:indexterm>presentation algorithm generates appropriate links to whatever topics are available.</db:para>
</db:listitem>
<db:listitem>
<db:para>In a <db:indexterm><db:primary>differential single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>differential single sourcing</db:secondary></db:indexterm>differential single sourcing scenario, you are never tied to one mechanism for handling the subject affinity. You can generate any mechanism you like in whatever media you like.</db:para>
</db:listitem>
<db:listitem>
<db:para>You don’t have to worry about maintaining links in your content because your source content does not contain any links. The subject annotations in your content are objective statements about your subject matter, so they don’t change. All the links in the published content are generated by the linking algorithm, so no management is required.</db:para>
</db:listitem>
<db:listitem>
<db:para>Writers can create subject annotations to content that has not been written yet. The subject annotation refers to the subject matter, not a resource. Links to content that is written later will appear once that content becomes available to link to.</db:para>
</db:listitem>
<db:listitem>
<db:para>Writers do not have to find content to link to or manage complex link tables or keys. They just create subject annotations when the text mentions a significant subject. This requires no knowledge of the publishing or content management system. It does not even require knowledge of other resources in the content set. It only requires knowledge of the subject matter, which the writer already has, and the format of subject annotations, which is easy to learn.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section><db:title>Finding resources to link to</db:title>


<db:para>The <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain approach represents a radically different partitioning of the complexity of linking and handling <db:indexterm><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>subject affinities. Most notably, it partitions and redirects away from writers the responsibility for finding content to link to.</db:para>
<db:para>Partitioning always introduces new complexity to replace what has been partitioned out. In this case, the new complexity is the effort required to create <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain annotations. However, this partitioning is particularly effective both because annotating subject affinities requires only knowledge the writer already has and because the same annotation is useful for so many other algorithms. This is one of the best features of the subject domain – its structures can serve multiple algorithms rather than just one, which is, in itself, a highly effective partitioning of complexity.</db:para>
<db:para>However, although the responsibility of finding resources to link to has been partitioned away from writers, you still need to consider the people and processes that are now required to locate appropriate resources. They do this by looking up resources based on the subject information (type and value) captured by the subject annotation. For this you need content that is indexed using those types and values (or their semantic equivalents). This means that you need to index your content. If you have a page on John Wayne, you can index it as shown in <db:xref linkend="fig.linking-index"/>.</db:para>
<db:figure xml:id="fig.linking-index"><db:title>Index information about John Wayne</db:title><db:programlisting language="sam">
topic: 
    title: Biography of John Wayne
    index:
        type: actor
        value: John Wayne
    body:
        John Wayne was an American actor known for westerns.
</db:programlisting></db:figure>

<?dbfo-need height="1.5in"?>

<db:para>Now the linking algorithm looks like <db:xref linkend="fig.linking-index-algorithm"/>.</db:para>
<db:figure xml:id="fig.linking-index-algorithm"><db:title>Linking algorithm for indexed content</db:title><db:programlisting language="pseudo">
match actor
    $target = find href of topic 
               where type = actor 
               and name = @name
    create xref
        attribute href = $target
        continue        
</db:programlisting></db:figure>
<db:para>However, content stored in the subject domain may already be indexed effectively enough by its inherent subject-domain structures. Suppose your content collection includes the subject-domain actor biography shown in <db:xref linkend="fig.linking-content"/>.</db:para>
<db:figure xml:id="fig.linking-content"><db:title>Subject-domain actor biography for John Wayne</db:title><db:programlisting language="sam">
actor: 
    name: John Wayne
    bio: 
        John Wayne was an American actor known for westerns.
    filmography:
        film: Rio Bravo
        film: The Shootist        
</db:programlisting></db:figure>
<db:para>Here the topic type is actor, and the <db:code>name</db:code> field specifies the name of the actor in question. This is all you need to identify this topic as a source of information on the actor John Wayne.</db:para>
<db:para>Only minor changes to the linking algorithm are required to use this bio (see <db:xref linkend="fig.linking-index-algorithm-2"/>).</db:para>
<db:figure xml:id="fig.linking-index-algorithm-2"><db:title>Linking algorithm modified to use biography</db:title><db:programlisting language="pseudo">
match actor
    $target = find href of actor topic where name = @name
    create xref
        attribute href = $target
        continue        
</db:programlisting></db:figure>
<db:para>There is a lot more to how this mechanism works in practice, including what you do about imperfect matches and what happens when the query returns multiple resources. But that goes into the specifics of individual systems, which is more detail than needed for present purposes.</db:para>
<db:para>You can also index topics using a <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>content management system, in which case the linking algorithm would query the CMS to find topics to link to.</db:para>
<db:para>A useful feature of this approach is that you can have the <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>publishing algorithm</db:secondary></db:indexterm>publishing algorithm fall back to creating a link to an external resource if an internal one is not available. If a search of the index of your own content fails, you can search indexes of external content. You can build such an index yourself, but some external sites provide indexes, APIs, or search facilities that you can use to locate appropriate pages to link to.</db:para>
<db:para>Of course, building these linking algorithms adds complexity to your content system. The subject domain partitions complexity away from writers and distributes it to <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architects and <db:indexterm><db:primary>content engineer</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineer</db:secondary></db:indexterm>content engineers.</db:para>
</db:section>
<db:section><db:title>Different domain, different algorithm</db:title>


<db:para>The linking algorithm – or, to be more precise, the subject-affinity handling algorithm – is perhaps the algorithm that most clearly illustrates how moving from one domain to another leads to a significantly different partitioning of complexity. While the purpose of the linking algorithm remains the same, the way it achieves that purpose differs significantly in each domain.</db:para>
<db:para>In the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain, the data structures tend to have a one-to-one correspondence with their algorithms. As system designers determine they need a particular algorithm, they create structures to support that algorithm. Thus, document-domain languages have separate structures for linking, reuse, indexing, and single sourcing. (Some of these may be <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management-domain structures, of course.)</db:para>
<db:para>In the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, however, the data structures reflect the subject matter. You won’t find a one-to-one correspondence between a structure and the algorithm it supports. Thus, you will not find markup for links, <db:indexterm><db:primary>reuse</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>reuse</db:secondary></db:indexterm>reuse, indexing, or <db:indexterm><db:primary>single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>single sourcing</db:secondary></db:indexterm>single sourcing in the subject domain. You will find subject annotations that clarify and delineate the subject matter of the content. Any algorithm must interpret <db:indexterm><db:primary>subject annotations</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>subject annotations</db:secondary></db:indexterm>subject annotations and use them as the basis for creating whatever kind of document or <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media-domain structure you need for publishing.</db:para>
<db:para>System designers still must decide which algorithms they need, so they can ensure that the information that drives those algorithms is present in the content. However, since every subject structure can drive many publishing algorithms, you will often find that your <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content already supports any new algorithm you want to apply. This helps <db:indexterm><db:primary>future proof</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>future proof</db:secondary></db:indexterm>future proof your content.</db:para>
<db:para>Therefore, moving from the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain to the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain is not a matter of looking for the <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain equivalent of a document-domain structure. Instead, it’s a matter of asking what information in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain drives the creation of <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain structures. Subject-domain content can look very different from its document-domain counterpart, and it will often be starkly simpler and easier to understand. This represents a better partitioning of complexity. But as noted before, all complexity has to go somewhere, and the use of the subject domain tends to transfer more of the complexity to the <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architect or <db:indexterm><db:primary>content engineer</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineer</db:secondary></db:indexterm>content engineer.</db:para>
<db:indexterm class="endofrange" startref="idp1477555332"/><db:indexterm class="endofrange" startref="idp1477555716"/><db:indexterm class="endofrange" startref="idp1477555332x"/><db:indexterm class="endofrange" startref="idp1477555716x"/></db:section>
</db:chapter>
