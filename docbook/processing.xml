<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.processing">
<db:title>Processing Structured Text</db:title>


<db:para>In the last chapter we looked at separating content from formatting. But of course they cannot stay separated. Content must be formatted before it is presented to the reader. So lets look at the algorithm for putting them back together again. Understanding the basics of algorithms is important to understanding structured writing even if you don’t intend to code the algorithms yourself. Understanding how things can be put back together is a big part of understanding how to separate them. Indeed, it is only by describing how you would put them back together that you know for certain that you did not lose anything when you did the separation. This is essential to ensuring a clean partitoning that does not allow any complexity to fall through to the reader.</db:para>
<db:section>
<db:title>Two into one: reversing the factoring out of invariants</db:title>
<db:para>Moving content from the media domain to the document domain or the subject domain involves progressively factoring out invariants in the content. Each step in this process creates two artifacts, the structured content and the invariant piece that was factored out.</db:para>
<db:para>Processing structured text is about putting the pieces back together: combining the structured content with the invariants that were factored out. If factoring out the invariants moves content toward the document or subject domains, recombining the content with the invariants moves it in the opposite direction, toward the media domain. This could mean moving the content from the subject domain to the document domain or from the document domain to the media domain, or simply from a more abstract form in the media domain to a more concrete form, which will be our first example.</db:para>
</db:section>
<db:section>
<db:title>Adding back style information</db:title>
<db:para>The first example of separating content from formatting that we looked at involved factoring out the style information from this structure:</db:para>
<db:programlisting>
{font: 10pt "Open Sans"}The box contains:
{font: 10pt "Open Sans"}[bullet][tab]Sand
{font: 10pt "Open Sans"}[bullet][tab]Eggs
{font: 10pt "Open Sans"}[bullet][tab]Gold
</db:programlisting>
<db:para>We replaced the style information with style names:</db:para>
<db:programlisting>
{style: paragraph}The box contains:
{style: bullet-paragraph}Sand
{style: bullet-paragraph}Eggs
{style: bullet-paragraph}Gold
</db:programlisting>
<db:para>And then we defined the styles:</db:para>
<db:programlisting>
paragraph = {font: 10pt "Open Sans"}
bullet-paragraph = {font: 10pt "Open Sans"}[bullet][tab]
</db:programlisting>
<db:para>To unite the styles with the appropriate paragraphs, we can write as set of  simple search and replace rules:</db:para>
<db:programlisting>
find {style: paragraph}
    replace {font: 10pt "Open Sans"}

find {style: bullet-paragraph}
    replace {font: 10pt "Open Sans"}[bullet][tab]
</db:programlisting>
<db:para>I said at the beginning that the basic processing algorithm was to combine two source of information to create a new one. Where are these two sources? The first source is the structured text. The second source is the style definitions, and they are embedded in the rules themselves. This is how it is usually done. In some cases, though, the rules may pull content from a separate file. We will see examples of this later.</db:para>
<db:para>The result of applying these rules is that we get back the original content:</db:para>
<db:programlisting>
{font: 10pt "Open Sans"}The box contains:
{font: 10pt "Open Sans"}[bullet][tab]Sand
{font: 10pt "Open Sans"}[bullet][tab]Eggs
{font: 10pt "Open Sans"}[bullet][tab]Gold
</db:programlisting>
<db:para>If we want to change the styles, we can apply a different set of rules:</db:para>
<db:programlisting>
find {style: paragraph}
    replace {font: 12pt "Century Schoolbook"}

find {style: bullet-paragraph}
    replace {font: 12pt "Century Schoolbook"}[em dash][tab]
</db:programlisting>
<db:para>Applying these rules will result in the a change in the formatting of the original content:</db:para>
<db:programlisting>
{font: 12pt "Century Schoolbook"}The box contains:
{font: 12pt "Century Schoolbook"}[em dash][tab]Sand
{font: 12pt "Century Schoolbook"}[em dash][tab]Eggs
{font: 12pt "Century Schoolbook"}[em dash][tab]Gold
</db:programlisting>
</db:section>
<db:section>
<db:title>Rules based on structures</db:title>
<db:para>The tools that do this sort of processing do not literally use search and replace like this. Rather, they parse the source document to pull out the structures and allow you to specify your processing rules by referring to those structures.</db:para>
<db:para>We are not concerned here with the actual mechanism by which a processing tool recognizes structures. We are concerned with what to do when a structure is found. So let’s rewrite our rules to match structures rather than find literal strings in the text:</db:para>
<db:programlisting>
match paragraph
    apply style {font: 12pt "Century Schoolbook"}

match bullet-paragraph
    apply style {font: 12pt "Century Schoolbook"}
    output "[em dash][tab]"
</db:programlisting>
<db:para>The result of applying these rules is just the same as before:</db:para>
<db:programlisting>
{font: 12pt "Century Schoolbook"}The box contains:
{font: 12pt "Century Schoolbook"}[em dash][tab]Sand
{font: 12pt "Century Schoolbook"}[em dash][tab]Eggs
{font: 12pt "Century Schoolbook"}[em dash][tab]Gold
</db:programlisting>
<db:para>The way I have written these rules is an example of what is called pseudocode. It is a way for human being to sketch out an algorithm to make sure that they understand what they are trying to do before they write actual code. There is no formal grammar or syntax to pseudocode. It is intended for humans, not computers, and you can use whatever approach you like as long as it is clear to your intended audience. But pseudocode should clearly lay out a set of logical steps for accomplishing something. It should make clear exactly how the pieces go together.</db:para>
<db:para>Writing algorithms in pseudocode is a great way to make sure that we understand the algorithms we are creating without worrying about the details of code – or even learning how to code. They are also a great way to communicate to actual coders about what we need a program to do.</db:para>
</db:section>
<db:section>
<db:title>The order of the rules does not matter</db:title>
<db:para>You may have noticed that what these rules are doing is pretty much exactly what style sheets do in an application like Word or FrameMaker. In fact, it is exactly what a style sheet does. If you understand stylesheets, you understand a good deal of how structured writing algorithms work.</db:para>
<db:para>One important thing to notice is that when you create a stylesheet in Word or FrameMaker, you don’t specify the order in which styles will be applied to the document. The same is true when you create a CSS stylesheet for the Web. The stylesheet is just a flat list of rules. The order in which the rules are applied to the document depends entirely on the order in which the various structures occur in the document.</db:para>
<db:para>This may seem very obvious, but it is key to understanding how structured text is usually processed. It is a subject that is sometimes quite confusing to people who have been trained to write procedural computer programs, which is why I am making a point of calling it out.</db:para>
<db:para>Things get a tiny bit more complex when we move into processing the nested structures of the document domain and subject domain, but the basic pattern of a set of unordered rules to describe a transformation algorithm still applies.</db:para>
</db:section>
<db:section>
<db:title>Applying rules in the document domain</db:title>
<db:para>Suppose we have a piece of document domain structured text that contains this <db:code>title</db:code> structure:</db:para>
<db:programlisting language="sam">
title: Moby Dick
</db:programlisting>
<db:para>We want to transform this document into HTML. When our rule matches a structure in the source document, it outputs the equivalent HTML structure. Here is the pseudocode for this rule (it is in a slightly different format from the pseudocode above):</db:para>
<db:programlisting language="pseudo">
match title
    create h1 
        continue
</db:programlisting>
<db:para>This says, when you see a <db:code>title</db:code> structure in the source, create an <db:code>h1</db:code> structure in the output, and then continue applying rules to the content of the title structure.</db:para>
<db:para>The <db:code>continue</db:code> instruction is indented under the <db:code>create h1</db:code> instruction to indicate that the results of continuing will appear inside the <db:code>h1</db:code> structure.</db:para>
<db:para>In our pseudocode, we are assuming that the text content of each structure will be output automatically (as is the case in many tools), so the output of this rule (expressed in HTML) is:</db:para>
<db:programlisting language="html">
&lt;h1&gt;Moby Dick&lt;/h1&gt;
</db:programlisting>
<db:para>But suppose that there is another structure inside the title in our source. In this case it is an annotation of part of the title text:</db:para>
<db:programlisting language="sam">
title: Review of {Rio Bravo}(movie)
</db:programlisting>
<db:para>Here the annotated text is set off with curly braces and the annotation itself in in parentheses immediately after it. (This is a feature of the SAM markup syntax that I am using for most of the examples in this book.) So the annotation says that the words “Rio Bravo” refer to a movie. The annotation is a content structure, just like the title structure, and is nested inside the text of the title.</db:para>
<db:para>So what do we do with our rule for processing titles to make it deal with <db:code>movie</db:code> annotations embedded in the title text? Absolutely nothing. Instead, we write a separate rule for handling <db:code>movie</db:code> annotations no matter where they occur:</db:para>
<db:programlisting language="pseudo">
match movie
    create i
        continue
</db:programlisting>
<db:para>When the processor hits <db:code>continue</db:code> in the <db:code>title</db:code> rule, it processes the content of the title structure. In doing so, it encounters the <db:code>movie</db:code> structure and executes the <db:code>movie</db:code> rule. The result is output that looks like this:</db:para>
<db:programlisting language="html">
&lt;h1&gt;Review of &lt;i&gt;Rio Bravo&lt;/i&gt;&lt;/h1&gt;
</db:programlisting>
<db:para>The <db:code>continue</db:code> instruction is really all we need to add to our rules to allow them to deal with nested structures. They remain an unordered collection of rules, just like a stylesheet. (In fact, XSLT, a language that implements this model, calls a set of processing rules a “stylesheet”.)</db:para>
</db:section>
<db:section>
<db:title>Processing based on context</db:title>
<db:para>When we move to the document domain, we use context to reduce the number of structures that we need. For example, where HTML has six different heading structures, <db:code>H1</db:code> through <db:code>H6</db:code>), DocBook has only one: <db:code>title</db:code>, which can occur in many different contexts. So how do we apply the right formatting to a title based on its context? We create different rules for the <db:code>title</db:code> structure in each of its contexts. We express the context by listing the parent structure names separated by slashes:</db:para>
<db:programlisting language="pseudo">
match book/title
    create h1 
        continue

match chapter/title
    create h2
        continue

match section/title
    create h3 
        continue

match figure/title
    create h4
        continue
</db:programlisting>
<db:para>Now here is the clever bit. You don’t have to change the <db:code>movie</db:code> rule to work with any of these versions of the <db:code>title</db:code> rule. Suppose our title is the title of a section, like this:</db:para>
<db:programlisting language="sam">
section:
    title: Review of {Rio Bravo}(movie)
</db:programlisting>
<db:para>When we process this with our rules, the <db:code>section/title</db:code> rule will be executed to deal with the title structure, and the <db:code>movie</db:code> rule will be executed when the <db:code>movie</db:code> structure occurs in the course of processing the content of the <db:code>title</db:code> structure, with the following result:</db:para>
<db:programlisting language="html">
&lt;h3&gt;Review of &lt;i&gt;Rio Bravo&lt;/i&gt;&lt;/h3&gt;
</db:programlisting>
<db:para>This is the basic pattern for most structured writing algorithms. An algorithm consists of a set of rules.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For each structure, you create a rule that says how to transform that structure into the structure you want.</db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>Each rule specifies the new structures to create and where to place the content and any nested structures.</db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>In each rule, you specify where the processor should process any nested structures and apply any rules that apply to them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>If you want a different rule for a structure occurring in different contexts, write a separate rule for each context.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Why is it important for you to understand this? Because when you are going through the process of abstracting out invariants to move content to the document domain or subject domain, it is really useful to understand how those invariants will be factored back in. In fact, understanding how this works can help you recognize invariants in your source and give you the confidence to factor them out. Writing down the pseudocode for processing the structures you are creating can help you validate that you have factored things out correctly and that the structures you are creating will be easy to process and that the processing rules will be clear, consistent, and reliable.</db:para>
<db:para>Obviously there is more involved in a complete processing system, and we are not going to get into the gritty details here, but let’s look at few a cases that come up frequently.</db:para>
</db:section>
<db:section>
<db:title>Processing container structures</db:title>
<db:para>When we move content to the document domain or the subject domain, we often create container structures to provide context. These container structures don’t have any analog in the media domain, so what do we do with them when it is time to publish? We obviously use them to provide context for the rest of our processing rules, but what to we do with the containers themselves?</db:para>
<db:para>In the previous example the content was contained in a <db:code>section</db:code> structure. So how does the <db:code>section</db:code> structure get processed?</db:para>
<db:programlisting language="pseudo">
match section
    continue
</db:programlisting>
<db:para>Yes, it’s that simple. Just don’t output any new structure in its place. The section container has done its work at this point so we simple discard it. We still want the stuff inside it though, so we use the <db:code>continue</db:code> instruction to make sure the contents get processed. In short, the container is a box. We unpack the contents and discard the box.</db:para>
</db:section>
<db:section>
<db:title>Restoring factored-out text</db:title>
<db:para>Sometimes when we factor out the invariants in content, we are not only factoring out styles, we are also factoring out text. To process the content we need to put the text back (obviously we can put back different text depending on our needs – which was why we factored it out in the first place).</db:para>
<db:para>As we saw, a simple example of factoring out text is numbered and bulleted lists, where we factor out the text of the numbers and bullets. Let’s look at how we create rules to put them back.</db:para>
<db:para>Suppose we have a document that contain these two different kinds of lists:</db:para>
<db:programlisting>
paragraph: To wash hair:
ordered-list:
    list-item:Lather
    list-item:Rinse
    list-item:Repeat
    
paragraph: The box contains:
unordered-list:
    list-item:Sand
    list-item:Eggs
    list-item:Gold
</db:programlisting>
<db:para>Let’s write a set of rules to deal with this document. Converting this to HTML lists won’t tell us much, since HTML handles list numbering and bullets itself, so we’ll create instructions for printing on paper. We won’t use real printing instructions (they get tediously detailed). Instead we will use the same style specification shorthand we used above. The <db:code>paragraph</db:code> rule is simple enough:</db:para>
<db:programlisting>
match paragraph
    apply style {font: 10pt "Century Schoolbook"}
    continue
</db:programlisting>
<db:para>Now let’s deal with the <db:code>ordered-list</db:code>. The ordered list structure is just a container, so we don’t need to create an output structure for it. But because this is an ordered list, we need to start a count to number the items in the list. That means we need a variable to store the current count. We will use a <db:code>$</db:code> prefix to indicate that we are creating a variable:</db:para>
<db:programlisting>
match ordered-list
    $count=1
    continue
</db:programlisting>
<db:para>Then the rule for each ordered list item will output the value of the variable and increment it by one:</db:para>
<db:programlisting>
match ordered-list/list-item
    apply style {font: 12pt "Century Schoolbook"}
    output $count
    output ".[tab]"
    $count=$count+1
    continue
</db:programlisting>
<db:para>Every time the <db:code>ordered-list/list-item</db:code> rule is fired, the count will increase by one, resulting in the list items being numbered sequentially.</db:para>
<db:para>If a new numbered list in encountered, the <db:code>ordered-list</db:code> rule will be fired, resetting the count to 1.</db:para>
<db:para>This rule will not match <db:code>list-item</db:code> elements that are children of an <db:code>unordered-list</db:code> element, so we need a separate set of rules for unordered lists:</db:para>
<db:programlisting>
match unordered-list
    continue
    
match ordered-list/list-item
    apply style {font: 12pt "Century Schoolbook"}
    output "[em dash][tab]"
    continue
</db:programlisting>
<db:para>Applying the combined set of rules will produce output like this:</db:para>
<db:programlisting>
{font: 10pt "Century Schoolbook"}To wash hair:
{font: 10pt "Century Schoolbook"}1.[tab]Lather
{font: 10pt "Century Schoolbook"}2.[tab]Rinse
{font: 10pt "Century Schoolbook"}3.[tab]Repeat           
{font: 10pt "Century Schoolbook"}The box contains:
{font: 10pt "Century Schoolbook"}[em dash][tab]Sand
{font: 10pt "Century Schoolbook"}[em dash][tab]Eggs
{font: 10pt "Century Schoolbook"}[em dash][tab]Gold
</db:programlisting>
<db:para>Note how the structure has been flattened and all of the abstractions of document structure have been removed. We are back in the media domain, with a flat structure that specifies formatting and text.</db:para>
</db:section>
<db:section>
<db:title>Processing in multiple steps</db:title>
<db:para>We do not always want to apply final formatting to our content in a single step. When we separated content from formatting, we did the separation in several stages. It is often desirable to put them back together in several stages. Not only are the algorithms involved easier to write and maintain if they only do one step of the process, we can often reuse some of the downstream steps (nearer the media domain) for many different types of document domain and subject domain content.</db:para>
<db:para>So far we have looked at examples from the media domain and the document domain. Let’s look at one from the subject domain. We used an example of completing the separation of content from formatting by moving a labeled list from the document domain to the subject domain.</db:para>
<db:programlisting language="sam">
address:
    street: 123 Elm Street
    town: Smallville
    country: USA
    code: 12345
</db:programlisting>
<db:para>Now let’s look at the algorithm (the set of rules) for getting it back to the document domain, where it should look like this:</db:para>
<db:programlisting language="sam">
labeled-list:
    list-item:
        label: Street
        contents: 123 Elm Street
    list-item:
        label: Town
        contents: Smallville
    list-item:
        label: Country
        contents: 123 USA
    list-item:
        label: Code
        contents: 12345
</db:programlisting>
<db:para>Here is the set of rules to accomplish this transformation:</db:para>
<db:programlisting>
match address
    create labeled-list
        continue
    
match street
    create list-item 
        create label 
            output "Street"
        create contents
            continue
                
match town
    create list-item 
        create label 
            output "Town"
        create contents
            continue

match country
    create list-item 
        create label 
            output "Country"
        create contents
            continue

match code
    create list-item 
        create label 
            output "Code"
        create contents
            continue
</db:programlisting>
<db:para>Notice that the text of the labels, which we factored out when we moved to the subject domain, are being factored back in here, and are specified in the processing rules. As we moved the content from the media domain to the document domain to the subject domain, we first factored out invariant formatting and then invariant text. In the algorithms, we put back the text and the formatting, each at a different processing stage.</db:para>
<db:para>Processing content in multiple steps can save us a lot of time. The subject domain <db:code>address</db:code> structure is specific to a single subject and we might have many similar structures in our subject domain markup. But it is presented as a <db:code>labeled-list</db:code> structure. A labeled list is a document domain structure that can be used to present all kinds of information, and that can be formatted for many different media. By transforming the address structure into a <db:code>labeled-list</db:code> structure, we avoid having to write any code to format the <db:code>address</db:code> structure directly. We can format the address correctly for multiple media using the existing <db:code>labeled-list</db:code> formatting rules.</db:para>
</db:section>
<db:section>
<db:title>Query-based processing</db:title>
<db:para>The rule-based approach shown here is not the only way to process structured writing. There is another approach which we could call the query-based approach.<db:footnote>
<db:para>The rule-based and query-based approaches are often called “push” and “pull” methods respectively, but I sometimes find it hard to remember which is which. I find rule-based and query-based more descriptive.</db:para>
</db:footnote> In this approach, you write a query expression that reaches into the structure of a document and pulls out a structure or a set of structures from the middle of the document.</db:para>
<db:para>This is a useful technique if you want to radically rearrange the content of a document or if you want to pull content out of one document to use in another. Any reference in these pages to using an algorithm to go through a content set an pull out certain pieces of data is an example of the query based approach. We will see more examples of this in future chapters.</db:para>

<db:para>This chapter does not by any means describe the full range of available content processing techniques or all the ways in which algorithms can recognize and manipulate structures in content. The point of introducing your to structured writing algorithms and the basics of how content processing works is to enable you to think about structures with an eye to how they can be processed. Often when you look at structures in this way you can see how a simple structure could be used and how that simpler structure can be processed to achieve the same result as a more complex structured. Don’t be afraid to write out your algorithms in pseudocode to make sure you have a clear idea of the processing you intend for your structures, and don’t feel confined by the algorithms shown in this book, or the annotation I have used for pseudocode examples. You own your pseudocode. Choose a format that is clear to you and that communicates clearly to whoever will be implementing the actual code. Working together with that person can help you improve your appreciation of algorithms and your ability to write useful pseudocode. Can learning to write real code help with this to? Absolutely it can. Is it necessary? No. What is essential is to think in terms of distributing certain parts of your content system to algorithms and the ability to describe those algorithms well enough that you have a clear idea of what you are asking them to do, and a reasonable certainty that you are passing them the structures and information they need to do it.</db:para>
</db:section>
</db:chapter>
