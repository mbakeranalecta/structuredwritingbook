<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.content-management"><db:title>Content Management</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp325580868"><db:primary>content management</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp325580868x"><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>




<db:para>Managing content assets is fundamental to managing your content process. Any large collection of content needs to be managed, and when you manage the work of many contributors to produce an integrated <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture, managing content assets becomes key.</db:para>
<db:para>To make content management decisions, you must be able to locate and examine the content. These functions can be performed by algorithms if you attach sufficient and accurate metadata to your content. Attaching metadata to content to allow algorithms to make decisions is, of course, precisely what you do in all forms of structured writing. Therefore, content management is a structured writing process. In this section, I add a set of management algorithms to the content manipulation algorithms described in <db:xref linkend="part.algorithms"/>. Like the other structured writing algorithms, these algorithms work differently depending on which domain your content is written in.</db:para>
<db:para>But what if your content does not contain sufficient metadata to allow management tasks to be performed by algorithm – or even by hand? In that case you can use a content management system (CMS) to attach additional metadata to the content as external labels. Most commercial CMSs support this capability.</db:para>
<db:para>Of course, you can choose to manage your content by hand. This means that everyone who has a role in managing content – that is, everyone on your content team – must have the knowledge, skills, and time needed to perform the management tasks. Because these conditions are hard to meet with perfect consistency, content management complexity can fall through the cracks, resulting, as unmanaged content complexity always does, in inferior rhetoric and inefficient processes. But managing content by hand does avoid introducing a lot of complex tools into your system. Introducing tools is never neutral. New tools always bring complexity and unless they provide or enable a better partitioning of complexity, they can cause more problems than they solve.</db:para>
<db:para>Some content management systems attempt to be all encompassing – to be the only tool anyone in the organization ever uses to create and deliver content. Others are designed to work in concert with other tools. Some are more <db:indexterm><db:primary>frameworks</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>frameworks</db:secondary></db:indexterm>frameworks than tools – platforms on which you can construct your own content management functionality. All of them implement some form of structured writing for at least some functions in the media and document domains, with some from the <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management domain mixed in. Some work with or, at least, support certain management functions for the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain. Some content management systems attempt to manage the entire content creation process, from design and authoring to workflow and publishing. Others focus on more limited aspects of the process. Some focus on a single media platform (usually the web), while others support multiple media.</db:para>
<db:para>A CMS does exactly what I describe throughout this book: it partitions and distributes the tasks of the content process. Different CMSs partitions tasks differently, and there is, of course, no guarantee that a particular system’s partitioning is the best fit for your organization or that it will direct all complexity to people or processes that have the skills, knowledge, and resources to handle it. And if not, unhandled process complexity will result in poor rhetorical quality.</db:para>
<db:para>As tempting as it may be to simply go shopping for a content management system, buying a CMS means buying a complete process and partitioning, which may or may not be the best fit for your organization. A better approach is to design the partitioning of your system first and then look for tools that fit the process you have designed. Depending on how you partition your processes and how and where you direct complexity, you may not need a conventional CMS at all.</db:para>
<db:para>Many of the decisions you have to make in a large content system involve examining large volumes of content. Thus the main interface to many content management systems is a file system or database view of the content repository. Whatever specific tasks the system is performing, the essence of its interface is that it allows you to view and apply metadata to large volumes of content. However, if your content already contains the metadata needed to make these decisions, the need for such an interface diminishes (thought the need for the algorithms themselves remains).</db:para>
<db:para>Structured writing and content management systems both work to make <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata available to algorithms. But the algorithms work differently – and require a different class of metadata – in each structured writing domain. Content management systems tend to supply <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain and <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain metadata for algorithms that process document-domain and media-domain content. But subject-domain content supplies the subject-domain metadata itself, and, as we have seen, you can often factor out the need for management-domain metadata by moving content to the subject domain. Just as a single set of subject-domain structures can often serve the needs of multiple content manipulation algorithms, the same set can often also serve the needs of multiple management algorithms.</db:para>
<db:para>This does not mean that if your content is in the subject domain you will never need a CMS, but it does mean that you may not need one or that you may require a less elaborate system. Certainly it means that if you do need a CMS, you should choose one that partitions tasks in a manner that supports the subject domain.</db:para>
<db:para>If your content does not contain the metadata necessary for management, the <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>CMS must gather and store it separately. This adds complexity to the CMS interface, which can be a major source of pain for users. For CMSs that are designed to be the only tool you use, this generally means that the structured writing format is baked in and can only be changed in limited ways, if at all. Transferring metadata from the CMS to the structures of your content would require a major reconfiguration of the CMS. If you buy this kind of system, you need to look at the total picture – how the CMS partitions and redistributes all of the complexity of the content systems and what complexity, if any, it neglects and lets fall through. There will likely be little you can do to change the partitioning or distribution after the fact, so make sure it is what you want going in.</db:para>
<db:para>Most off-the-shelf <db:indexterm><db:primary>content management systems</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management systems</db:secondary></db:indexterm>content management systems are designed for <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain or basic <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain content. This makes sense from a commercial point of view because it allows CMS vendors to develop their own <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata scheme and management algorithms independent of the content that will be stored. This means a vendor can sell its CMS to a wider variety of clients and advertise that it has simple editors or works with the editors that people already have.</db:para>
<db:para>The problem with this model – in terms of developing a comprehensive solution for managing complexity across the content system – is that it draws a hard line between the management tasks and constraints supported by the CMS and any management tasks or constraints associated with the rhetoric of your content. This means that algorithms that depend on the consistency of content or its relationships with other content are largely unsupported by the CMS, and there is no integration between those algorithms and the algorithms provided by the CMS. Due to this lack of integration, complexity gets dropped, with the usual consequences for rhetoric and for the reader.</db:para>
<db:para>Other CMSs are built for more complex <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain languages. These CMSs typically support <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain features specifically for those languages and are sold as such: a DITA CMS or an <db:indexterm><db:primary>S1000D</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>S1000D</db:secondary></db:indexterm>S1000D CMS. The most common systems of this type today are based on <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA.</db:para>
<db:para>You might expect that a CMS would primarily record <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain metadata. After all, the management domain is an intrusion into the structured writing world, since it does not actually describe the structure of content. The reason for the intrusion of the <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management domain into content is to allow for the management of the content below the level of whatever file or chunk size you store in the CMS.<db:footnote>
<db:para>In some CMSs, this distinction between the chunk stored in the CMS and the structures expressed inside that chunk is moot. A CMS based on a native XML database, for instance, makes no distinction between the chunk and the structure of the chunk, but treats the entire repository as a single XML resource that it can query and manage down to any level of granularity. Even with such a system, however, this distinction remains for writers, who have to deal with the structure of whatever sized chunks of content they are asked to write.</db:para>
</db:footnote></db:para>

<db:para>But while you will rarely find much <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain or <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata stored at the <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>CMS level, CMSs often contain a great deal of <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain metadata. If you manage a large volume of content, you will need some way to find content on a particular subject. If you are doing <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse, for example, writers will constantly be asking if content already exists on the subject they are preparing to write about. If your CMS is managing the delivery of content dynamically to the Web, it will need to respond to queries based on subject matter. And if you are optimizing your content for <db:indexterm><db:primary>search</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>search</db:secondary></db:indexterm>search you will need to provide the search engine with subject <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata in the form of keywords or <db:indexterm><db:primary>microformats</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>microformats</db:secondary></db:indexterm>microformats. All of this depends on <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata. Subject domain metadata is therefore central to CMS operations. This is also why the use of <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain structures in your content can lessen your reliance on content management systems.</db:para>
<db:para>To figure out what type of content management system you may need, if any, it helps to understand how content management systems work with metadata and where the metadata in question resides in your content. Essentially structured writing and content management systems both work to make metadata available to algorithms, so structured writing and content management systems are both working towards the same goal, and depending on your process you may want to assign more of that task to one or to the other.</db:para>
<db:section><db:title>The location of metadata</db:title>


<db:para><db:indexterm><db:primary>Content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Content management system</db:secondary></db:indexterm>Content management system do their job largely through the collection and management of <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata. Partitioning and redirecting complexity requires a method to pass information between partitions in a reliable way, and that is what structure and metadata do. Metadata provides a record of the identity and status of content. Management actions are actions on metadata: either creating and updating metadata or performing actions (running algorithms) based on metadata.</db:para>
<db:para>The location of the <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata that records the identity and status of the content and the constraints it obeys differs from one structured writing domain to another. The <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain captures virtually no <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata that is useful for <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management, the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain captures some, but not enough, and the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain often captures almost everything you need except, perhaps, for <db:indexterm><db:primary>workflow</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>workflow</db:secondary></db:indexterm>workflow information.<db:footnote>
<db:para>Workflow information is management-domain data, and there is nothing to prevent you from adding workflow information to document-domain or subject-domain content if you want to.</db:para>
</db:footnote></db:para>

<db:para>It is a very common pattern for a <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>CMS to store <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain or <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain content and attach <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain metadata to it as an external label. For instance, a CMS might store recipes written in <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown and attach separate <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata records to each recipe listing the key recipe metadata needed for retrieval and sorting of recipes. One of the things that writers often complain about with CMS systems is that they are not allowed to submit content to the system without filling out complicated metadata records.</db:para>
<db:para>An alternative is to write recipes in a <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain format in which all the recipe <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata is included in the content from the beginning. The <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>CMS then requires no external metadata labels, though it does require a way to access and query the embedded metadata. (CMSs based on <db:indexterm><db:primary>XML databases</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>XML databases</db:secondary></db:indexterm>XML databases often have this capability as a natural consequence of the XML database architecture.)</db:para>
<db:para>Which approach is preferable? The conventional CMS approach arises because most CMSs are based on relational databases, which are good at storing metadata records and attaching them to blobs of text but are not good at storing or querying the <db:indexterm><db:primary>hierarchical structure</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>hierarchical structure</db:secondary></db:indexterm>hierarchical structure of structured content. The conventional approach has several disadvantages, all of which introduce complexity that is often not handled well. The disadvantages of this approach include the following:</db:para>
<db:orderedlist>
<db:listitem>
<db:para>It can only record the characteristics of a chunk of content as a whole. It cannot look down into the content to find more fine-grained <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata. One of the advantages of writing a recipe is the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain is that it allows you to do things like querying the collection of recipes for all those with a calorie count below 100. But unless the metadata record for the recipe includes that level of detail, the <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>CMS cannot respond to that <db:indexterm><db:primary>query</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>query</db:secondary></db:indexterm>query. And if the CMS does store that level of detail, it is effectively asking the writer to write the entire content twice, once in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain document and once in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain metadata label. Not only is this more work, it is quite likely that the two versions will fall out of sync with each other.</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides no support for <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain <db:indexterm><db:primary>validation</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>validation</db:secondary></db:indexterm>validation of the content, which means it does nothing to help improve content quality. Requiring <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain content as the storage format precludes the use of the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain for writing and cuts writers off from all the advantages the subject domain provides.</db:para>
</db:listitem>
<db:listitem>
<db:para>The system has no way of telling if the content <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conforms to its constraints. It records the content constraints in a separate record without ever validating that the content meets them.</db:para>
</db:listitem>
<db:listitem>
<db:para>It separates the <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata from the content it describes. This allows for drift between the content and the metadata.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Storing <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata in the content presents challenges, too. Having each piece of content stored in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain makes sense from a rhetorical point of view and makes it easy to submit content, since writers don’t need to fill out additional metadata forms. The problem is how to retrieve the metadata.</db:para>
<db:para>A CMS is essentially a database, and the way you retrieve information from a database is to write a <db:indexterm><db:primary>query</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>query</db:secondary></db:indexterm>query. A query is different from a <db:indexterm><db:primary>search</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>search</db:secondary></db:indexterm>search. A search is fuzzy. A <db:indexterm><db:primary>search engine</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>search engine</db:secondary></db:indexterm>search engine takes a plain text question or search phrase and tries to figure out which documents are the best match. Search engines may be powerful and sophisticated, but their results are a sophisticated, mechanical guess, and sometimes they get it wrong. Ask a search engine for a list of recipes with less than 100 calories, and it will give you a bunch of guesses based mostly on the plain text of those documents. Chances are it will catch some, miss others, and give you some false hits.</db:para>
<db:figure xml:id="fig.search-query"><db:title>Search results vs query results</db:title><db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/search-query.svg" contentwidth="4in" align="center"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/search-query.png"/></db:imageobject><db:textobject><db:para>Diagram showing relationship of search and query results.</db:para></db:textobject></db:mediaobject></db:figure>
<db:para>A <db:indexterm><db:primary>query</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>query</db:secondary></db:indexterm>query, on the other hand, is a request for items whose <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata precisely matches specified criteria. A query to return recipes for which the field <db:code>recipe/nutrition/calories</db:code> has a value less than 100 returns all the results, misses none, and gives you no false hits. However, it works only for content that contains this field, and to write this query, you need to know exactly how the system stores recipes (<db:xref linkend="fig.search-query"/> illustrates the difference between a search and a query).</db:para>
<db:para>If you have many different content structures in your repository, you need to know how each of them is structured in order to create <db:indexterm><db:primary>queries</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>queries</db:secondary></db:indexterm>queries that return the correct results. Although this is a complicating factor, it is not the end of the world. <db:indexterm><db:primary>Information architects</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>Information architects</db:secondary></db:indexterm>Information architects and <db:indexterm><db:primary>content engineers</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineers</db:secondary></db:indexterm>content engineers can create and save queries that writers can run as needed, saving them from having to remember the details of every structure.</db:para>
<db:para>In the end there is no way around this. Accurate and reliable <db:indexterm><db:primary>queries</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>queries</db:secondary></db:indexterm>queries depend on precise and consistent <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata that is specific to the object it belongs to. There is no such thing as a generic metadata record. They are always specific to the things they describe. Subject-domain metadata is specific to its subject. If you want to be able to find all recipes with calorie counts less than 100, you need recipe-specific metadata that records the number of calories in the recipe. If you want to find a used car listing for a blue convertible, you need metadata that specifically records the car color and body style. There is no generic metadata format that supports both of these queries. The inherent variability of content means you cannot create a generic query system. The trick is to find the right balance and make your content as easy to query as possible.</db:para>
</db:section>
<db:section><db:title>Hybrid approaches</db:title>


<db:para>There is an alternative to the two approaches described above, which is a hybrid of document and database. In the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, you can create fielded data that an algorithm can use to create content. The relational database on which most CMSs are based is great at managing fielded data, and this allows you to create a hybrid system in which the fielded data parts of a subject-domain document type are stored as database fields and the narrative content is stored in text fields, using document-domain markup such as markdown or HTML. Hybrid systems are common in custom web CMS solutions, where they are not looked on as hybrids so much as logical extensions of the database model.</db:para>
<db:para>The advantage of this model is that writers no longer need to add metadata after the fact, because it is part of their normal authoring environment, which is essentially a database form. This is a perfectly legitimate implementation of subject-domain structured writing, since there is no requirement that structures have to be expressed and captured as markup. Nonetheless, many <db:indexterm><db:primary>content strategists</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content strategists</db:secondary></db:indexterm>content strategists have come to realize the limitations of this model, which lacks any constraints on the content of the narrative fields, thus making it hard to create the consistent rhetoric that <db:indexterm><db:primary>content strategy</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>content strategy</db:secondary></db:indexterm>content strategy tries to foster.</db:para>
</db:section>
<db:section><db:title>Alternate repositories</db:title>


<db:para>At the heart of any content management solution is a repository: a place to put the content assets you are managing. The simplest form of repository is a file system, either local or shared on a network. The amount of metadata you can associate with content on a file system is limited. Some people use a separate metadata store, such as a spreadsheet, but there are limits to how far such a system can scale, and it is hard to apply content management algorithms in such an environment.</db:para>
<db:para>Virtually every full-fledged CMS comes with and is built around a repository that is set up to capture the metadata used for content management. Having the repository baked into the CMS provides obvious integration benefits for the CMS itself. However, this means that access to your content by any algorithm not provided by the CMS itself comes only by permission of the CMS. Many systems do not make access to their content easy for outside processes. This is in part because vendors want to present their systems as providing everything you need, but also in part to preserve the integrity of the repository, which could be corrupted by a poorly written algorithm.</db:para>
<db:para>Even you don’t need the services of a full-fledged CMS, or you simply can’t find one that supports the partitioning you want for your content system, you may still need two content management features for your content repository: access control and version control. Both of these services can be provided by the <db:indexterm><db:primary>version control system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>version control system</db:secondary></db:indexterm>version control systems used by software developers.</db:para>
<db:para>Access control gives you the ability to permit or deny access to resources on an individual or group basis. This improves the security of your system by helping to prevent deliberate or unintentional damage to your content by unauthorized individuals.</db:para>
<db:para>A version control system (VCS) stores all of the changes writers make to content, allowing them to find and restore previous versions. Most version control systems allow you to maintain content in an ordinary file system, which means that tools and algorithms do not have to know anything about the VCS in order to work on the content. The VCS stores all changes that are made to files under its control, storing each iteration along with labels and commentary that allow you to find any version you might want to go back to.</db:para>
<db:para>VCSs also allow you to back up content, along with its version metadata, to a central server that can be accessed by many different contributors. Each contributor maintains a local copy of the files and has the ability to upload files to the central server, where they can be pulled down to the workstations of other contributors, thus ensuring that everyone has access to the latest content.</db:para>
<db:para>VCSs have various mechanisms for preventing people from accidentally overwriting each other’s work, including the ability to create a branch of the repository where you can make changes independent of other contributors and merge those changes into the mainline of the repository when they are ready for release.</db:para>
<db:para>A VCS cannot match the complex facilities of a typical CMS, but they are used successfully for very large software projects involving hundreds of developers. How it possible to support collaboration on this scale with such simple repository features? The key is that code is by its nature highly structured text to which all of the same algorithms I have described for structured writing can be applied.</db:para>
<db:para>Software code can be strongly partitioned to minimize the collaborative overhead, and a rich set of tools is available to ensure <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conformance and to perform audits to make sure that code is complete and conforms to its constraints. In short, software projects do not need the kind of services provided by a typical CMS on the content side, because the code itself contains the metadata necessary to perform these same functions with external algorithms and because developers enforce the right kind of discipline among contributors. The open nature of a VCS is ideal for software development because it does not impose any barriers to implementing new processes or new algorithms to manage the content.</db:para>
<db:para>There is a movement within the documentation community called Docs as Code<db:footnote><db:para>http://www.writethedocs.org/guide/docs-as-code/</db:para></db:footnote>, which advocates using the same management processes and tools for content as developers use for code, including VCSs and scripted content builds, rather than conventional CMS solutions.</db:para>
</db:section>
<db:section><db:title>Making content manageable</db:title>


<db:para>If you want to manage your content, you need to make your content easy to manage. The danger is that if you start with the principal aim of making your content manageable, you may find your management goals at odds with your <db:indexterm><db:primary>rhetorical</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>rhetorical</db:secondary></db:indexterm>rhetorical goals. It is easier to manage content (or anything else) if its structure is uniform. The constraints you impose to make content more manageable make it more uniform. Thus a system, such as <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA, which starts by proposing just three types of content (concept, task, and reference), has an obvious appeal from a management point of view. However, remember that it is your <db:indexterm><db:primary>rhetorical</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>rhetorical</db:secondary></db:indexterm>rhetorical goals that serve your readers. Your management goals should be subservient to your rhetorical goals.</db:para>
<db:para>The constraints that you impose to improve content quality are those which make sure that a piece of content does just the job it is supposed to to. Such constraints ensure that a recipe contains everything a recipe needs and is presented in the way a recipe should be presented. They are specific to the subject matter and the audience. Three generic content types cannot provide all the constraints you need to effectively manage content <db:indexterm><db:primary>quality</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>quality</db:secondary></db:indexterm>quality. Indeed, some of the constraints that are designed to facilitate content management may be positively damaging to content quality.</db:para>
<db:para>If improved content <db:indexterm><db:primary>quality</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>quality</db:secondary></db:indexterm>quality was not one of your business goals, you might naturally choose uniformity in implementing a CMS. However, I would argue that a system based on <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content can lead to better content management in the long run.</db:para>
<db:para>In any system that relies on constraints, on data that is known to meet certain constraints, you need to make sure that the constraints are actually being met. As we have seen, it is often easier to provide effective <db:indexterm><db:primary>guidance</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>guidance</db:secondary></db:indexterm>guidance and perform effective <db:indexterm><db:primary>validation</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>validation</db:secondary></db:indexterm>validation in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain. Also, the subject domain allows you to factor out many constraints, which is the most effective way of making sure they are obeyed. The <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain provides far fewer opportunities for factoring out constraints and providing effective guidance. In addition, it is much more difficult to <db:indexterm><db:primary>audit</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>audit</db:secondary></db:indexterm>audit constraints correctly in the document domain.</db:para>
<db:para>Thus, while a simple <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain system of concept, task, and reference <db:indexterm><db:primary>topics</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>topics</db:secondary></db:indexterm>topics meets the content manager’s desire for uniformity, it provides little opportunity for ensuring that the full range of constraints necessary to make content management and reuse work are actually followed. The result can be a deterioration in the quality of the content set over time, a process that tends to be self-perpetuating because disorder in current content makes it harder to impose order on new content, just as you cannot put things away neatly in a messy drawer.</db:para>
<db:para>The variety of constraints and formats found in a <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain system may present a greater <db:indexterm><db:primary>content management</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>content management</db:secondary></db:indexterm>content management challenge initially, but it can go a long way toward ensuring that the necessary constraints are met. And, as we have seen, you can often use <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures to factor out <db:indexterm><db:primary>management-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management-domain</db:secondary></db:indexterm>management-domain concerns (see <db:xref linkend="chapter.management-domain"/>), which can go a long way toward removing the conflict between <db:indexterm><db:primary>rhetorical</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>rhetorical</db:secondary></db:indexterm>rhetorical structures and management structures in content. This not only leads to more effective management, but also to a simpler writing experience.</db:para>
<db:para>The key to <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conformance is to create structures that are easy to conform to. The content management algorithm relies heavily on conformance to constraints and structures. To manage content successfully, you must know exactly what assets you are managing. The more you know about each asset, and the more you can rely on what you know, the more confidently you can manage those assets and the less likely it is that your management system will descend into chaos.</db:para>
<db:para>This means that the content management algorithm depends on content that is easy to manage. It may seem like generic units of content would be the easiest to manage, but the problem with such generic units is that you know very little about them, and what you do know is often unreliable. Generic units may be easy to create and easy to store, but they are not easy to manage. It may require more initial thought and planning to manage highly specific, well-constrained content units, but such units will be the easiest to manage over time, especially as your content set grows.</db:para>
<db:section><db:title>Managing structured writing assets</db:title>


<db:para>Finally, consider that structured writing requires you to record content in <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain, <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain, or <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures, factor out invariants into separate files, express constraints, and create algorithms that translate the content to the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain for <db:indexterm><db:primary>publishing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>publishing</db:secondary></db:indexterm>publishing. All of this creates artifacts that you need to track and requires processes both for keeping track of artifacts and for running the structured authoring and publishing <db:indexterm><db:primary>tool chain</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>tool chain</db:secondary></db:indexterm>tool chain.</db:para>
<db:para>Thus, you need to manage both the artifacts and the process. Don’t fall into the trap of assuming that these are generic processes. Every artifact results from the partitioning of your content system, and how  they should be managed is determined by how the partitions communicate with each other. This is specific to the overall partitioning strategy of your particular content system. You need to find a tool that fits your partitioning strategy.</db:para>
<db:para>One class of tool commonly used for document- and management-domain structured writing systems, particularly <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA, is a specialized type of content management system called a component content management system or CCMS. A CCMS is designed for managing small fragments of content, rather than whole documents, and <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse is the primary design objective. Most DITA tools are build around a CCMS.</db:para>
<db:para>However, if your content is in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, you may not need all the services of a CCMS and may be able to do just fine with a relatively simple <db:indexterm><db:primary>version control system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>version control system</db:secondary></db:indexterm>version control system.</db:para>
<db:indexterm class="endofrange" startref="idp325580868"/><db:indexterm class="endofrange" startref="idp325580868x"/></db:section>
</db:section>
</db:chapter>
