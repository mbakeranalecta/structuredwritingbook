<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.content-management"><db:title>Content Management</db:title><db:indexterm class="startofrange" xml:id="idm1070021164"><db:primary>content management</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1070021164x"><db:primary>concept</db:primary><db:secondary>content management</db:secondary></db:indexterm>



<db:para>Structured writing is an instrument we use to help us partition and redirect the complexity of content creation and delivery. In other words, it is an instrument of content management. There are, of course, many tools available to help you manage content. Collectively, they are called content management systems. They are quite varied in their concept and operation because they partition and redirect different parts of the complexity of content creation and delivery, and/or they partition and redirect complexity in different ways. Some systems attempt to be all encompassing – to be the only tool anyone in the organization ever uses to create and deliver content. Others are designed to work in concert with other tools. Some are more frameworks than tools, platforms on which you can construct your own content management functionality. All of them implement some form of structured writing for at least some of their functions, some in the media domain, some in the document domain with more or less of the management domain mixed in. Some work with, or at least support certain management functions for, the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain.</db:para>
<db:para>If you use a <db:indexterm><db:primary>content management system</db:primary></db:indexterm>content management system, it is important to understand how the partitioning and redistribution of complexity that the CMS is designed to do fits with the partitioning and redistribution that you are planning to do in your content system. If the two are not a good match, additional complexity will be created, and some of the complexity you are seeking to manage will be dropped and fall down to the reader.</db:para>
<db:para>While content management, which is the partitioning and redirection of complexity in the content system, is actually concerned with the whole of the content problem, when we speak of content management systems specifically we are mainly talking about two problems:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Orchestrating content for the <db:indexterm><db:primary>publishing</db:primary></db:indexterm>publishing process. That is, making sure all the right bits get into the right documents at the right time. In many cases, there is a workflow aspect to this, making sure that every piece of content is seen, acted on, and or approved by every interested party in the organization prior to release. It may also include rights management issues, if there are different people with a financial stake in the content who may be entitled to compensation based on its use. These functions are well covered by other works, and I don’t intend to discuss them in any detail here.</db:para>
</db:listitem>
<db:listitem>
<db:para>Orchestrating content for writers during the writing process. For instance, if you are practicing <db:indexterm><db:primary>content reuse</db:primary></db:indexterm>content reuse, writers need to find content to reuse, and a content management system can help. Change management is also a huge part of content management: when a change happens in subject matter or in business requirements, how to you make sure all the necessary content changes are made, and made efficiently?</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>Metadata is the foundation of management</db:title>
<db:para>Content management system do their job largely through the collection and management of metadata. Partitioning and redirecting complexity requires a method to pass information between partitions in a reliable way, and that is what structure and metadata do. Metadata provides a record of the identity and status of content. Management actions are actions on metadata: either creating and updating metadata or performing actions (running algorithms) based on metadata. (More on metadata in <db:xref linkend="chapter.metadata"/>.)</db:para>
<db:para>I defined structured writing as writing that not only obeys constraints, but also records the constraints that it follows. The record of those constraints is metadata. In fact, most of the metadata that a content management system manages is simply the record of the constraints that content obeys. This includes much of the metadata related to workflow, since the workflow requirements of a system are also constraints on the content.</db:para>
<db:para>The location of the metadata that records the identity and status of the content and the constraints it obeys, differs from one structured writing domain to another. The <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain captures virtually no metadata that is useful for <db:indexterm><db:primary>content management</db:primary></db:indexterm>content management, the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain captures some, but not enough, and the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain often captures almost everything your may need, except perhaps for workflow information. (Though workflow information is <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain data and there is nothing to prevent you from adding those structures to your <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain or <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain content if you want to.)</db:para>
<db:para>Where the content does not contain the metadata necessary for management, the CMS has to gather and store it separately. This naturally adds complexity to the CMS interface, a complexity that is a major source of pain for many users. This also illustrates that the kind of CMS you need for content in different domains can vary significantly. In the case of CMSs that are designed to be the only tool you use, this generally means that the structured writing format is baked in and can only be changed in limited ways, if at all. A transfer of metadata from the CMS to the structures of the content would involve a major reconfiguration of the entire CMS. If you buy this kind of system, therefore, you need to look at the total picture – how it partitions and redistributes all of the complexity of the content systems, and what complexity, if any, it neglects and lets fall through. There will likely be little you can do to change the partitioning or distribution after the fact, so you better make sure it is what you want going in.</db:para>
<db:para>Most off-the-shelf content management systems are designed for <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain or basic <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain content. This makes sense from a commercial point of view because it allows them to develop their own metadata scheme and associated management algorithms independent of the content that will be stored. This means they can be sold to a wider variety of clients and also that they can advertise that they have simple editors or work with the editors that people already have. The problem with this model, in terms of developing a comprehensive solution for managing complexity across the content system, is that it draws a hard line between the management going on in the CMS and any type of management or constraint you may wish to impose on the <db:indexterm><db:primary>composition</db:primary></db:indexterm>composition process. This means that algorithms that depend on the consistency of content or its relationships with other content are largely unsupported by the CMS, and there is no integration between those algorithms and the algorithms preformed by the CMS. The result is often that a lot of complexity gets dropped due to this lack of integration and falls through to the reader.</db:para>
<db:para>Other CMSs are built for more complex document domain languages, which typically means that they are built to support the specific <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain features of those languages. By far the most common instances of such systems today are based on <db:indexterm><db:primary>DITA</db:primary></db:indexterm>DITA. Typically, such systems are specific to the one language they support and are sold as such: a DITA CMS or an S1000D CMS.</db:para>
<db:para>You might expect that the principal type of metadata contained in a CMS would be <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain metadata. After all, we described the management domain as an intrusion into the structured writing world, since it does not actually describe the structure of content. The reason for the intrusion of the <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain into content is to allow for the management of the content below the level of whatever file or chunk size you store in the CMS.<db:footnote>
<db:para>In some CMSs, this distinction between the chunk stored in the CMS and the structures expressed inside that chunk is moot. A CMS based on a native XML database, for instance, makes no distinction between the chunk and the structure of the chunk, but treats the entire repository as a single XML resource that it can query and manage down to any level of granularity. Even with such a system, however, this distinction remains for the writer, who has to deal with the structure of whatever sized chunk of content they are being asked to write.</db:para>
</db:footnote></db:para>

<db:para>But while you will rarely find much in the way of <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain or <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain metadata stored at the CMS level, CMSs often contain a great deal of <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain metadata. If you are managing a large volume of content, you will need some way to find content on a particular subject. If you are doing <db:indexterm><db:primary>content reuse</db:primary></db:indexterm>content reuse, for example, you will constantly be asking if content already exists on the subject you are preparing to write about. If your CMS is managing the delivery of content dynamically to the Web, it will need to respond to queries based on subject matter. And if you are optimizing your content for search you will need to provide the search engine with subject metadata in the form of keywords or microformats. All of this depends on <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain metadata. Subject domain metadata is therefore central to CMS operations.</db:para>
</db:section>
<db:section>
<db:title>The location of metadata</db:title>
<db:para>It is a very common pattern for a CMS to store <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain or <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain content and attach <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain metadata to it as an external label. For instance, a CMS might store recipes written in MarkDown and attach separate metadata records to each recipe listing the key recipe metadata needed for retrieval and sorting of recipes. One of the things that writers often complain about with CMS systems is that they are not allowed to submit content to the system without filling out complicated metadata records.</db:para>
<db:para>An alternative approach would be to write recipes in a <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain format in which all the recipe metadata is included in the content from the beginning. The CMS then requires no external metadata label, though it does obviously require a way to access and query the metadata embedded in the content. (CMSs based on XML databases often have this capability as a natural consequence of the XML database architecture.)</db:para>
<db:para>Which approach is preferable? The conventional CMS approach arises because most CMS’s are based on relational databases, which are good at storing metadata records and attaching them to blobs of text, but are not good at storing or querying the hierarchical structure of structured content. It has several disadvantages, all of which introduce complexity which is often not well handled.</db:para>
<db:orderedlist>
<db:listitem>
<db:para>It can only record the characteristics of a chunk of content as a whole. It cannot look down into the content to find more fine grained metadata. One of the advantages of writing a recipe is the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain is that it allows you to do things like querying the collection of recipes for all those with a calorie count below 100. But unless the metadata record for the recipe includes that level of detail, the CMS cannot respond to that query. And if the CMS does store that level of detail, it is effectively asking the writer to write the entire content twice, once in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain and once in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain. Not only is this more work, it is quite likely that the two versions will fall out of sync with each other.</db:para>
</db:listitem>
<db:listitem>
<db:para>It gives no support for <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm>subject-domain validation of the content. It does nothing to help improve content quality. By requiring <db:indexterm><db:primary>document-domain</db:primary></db:indexterm>document-domain content as the storage format, it precludes the use of the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain for writing and cuts you off from all the advantages it provides.</db:para>
</db:listitem>
<db:listitem>
<db:para>The system has no way of telling if the content conforms to its constraints. It records the content constraints in a separate record without ever validating that the content meets them.</db:para>
</db:listitem>
<db:listitem>
<db:para>It separates the metadata from the content is describes. This allows for drift between the content and the metadata.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>But storing metadata in the content presents some challenges as well. Having each piece of content stored in the subject domain makes a lot of sense from a semantic point of view and makes it easy to submit content, since no additional metadata forms have to be filled out. The problem is how to retrieve it. A CMS is essentially a database, and the way you retrieve information from a database is to write a query. A query is different from a search. A search is fuzzy. A search engine takes a plain text question or search phrase and tries to figure out which documents are the best match. Search engines may be powerful and sophisticated, but their results are essentially a sophisticated mechanical guess, and sometimes they get it wrong. Ask a search engine for a list of recipes with less than 100 calories, and it will give you a bunch of guesses based mostly on the plain text of those documents. Chances are it will catch some, miss others, and give you some false hits.</db:para>
<db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/search.svg" contentwidth="2in" align="left"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/search.png"/></db:imageobject><db:textobject><db:para>Diagram showing relationship of search targets to results.</db:para></db:textobject></db:mediaobject>
<db:para>A query, on the other hand, is a precise request for items whose metadata precisely matches specified criteria. If you write a query to return recipes for which the value of the field <db:code>recipe/nutrition/calories</db:code> is less than 100, it will return all the results, miss none, and give you no false hits. However, it will work only for content that is stored that way. To write that query, you will need to know exactly how recipes are stored in the system.</db:para>
<db:mediaobject><db:imageobject condition="fo"><db:imagedata fileref="../graphics/query.svg" contentwidth="2in" align="left"/></db:imageobject><db:imageobject condition="epub"><db:imagedata fileref="../graphics/query.png"/></db:imageobject><db:textobject><db:para>Diagram showing relationship of query targets to results.</db:para></db:textobject></db:mediaobject>
<db:para>If you have many different content structures in your repository, you will need to know how each of them is structured in order to create the queries to return them. This is not the end of the world. Information architects and content engineers can save writers from having to remember how to do all of the queries by creating saved queries that they can run at any time. But is is still a complicating factor.</db:para>
<db:para>In the end there is no way around this. Accurate reliable queries depend on precise consistent metadata. Precise consistent metadata is specific to the object it belongs to. There is no such thing as a generic metadata record. They are always specific to the things they describe. Subject domain metadata is specific to its subject. If you want to be able to find all recipes with calorie counts less than 100, you need recipe-specific metadata that specifically records the number of calories in the recipe. If you want to find a used car listing for a blue convertible, you need metadata that specifically records the car color and body style. There is no generic metadata format that supports both these queries. The inherent variability of content means no generic query system is possible. The trick is to find the right balance and to make you content as queryable as possible.</db:para>
</db:section>
<db:section>
<db:title>Managing the process</db:title>
<db:para>When we create an individual piece of content for one-time publication in a single media, there is really not much of a role for management in the process. Content management becomes a concern when you want to manage the production and <db:indexterm><db:primary>publishing</db:primary></db:indexterm>publishing of many pieces of content, to manage the relationship between them, ensure consistency and quality, or to publish them many times in different ways.</db:para>
<db:para>Of course, many of the reasons we have looked at for moving content from the <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain to the <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain or the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain have to do with managing the production and publishing process. But managing a body of content and the processes and tools that create and process that content, requires a whole set of metadata of its own.</db:para>
<db:para>Structured writing is about imposing constraints on content. Content management is about imposing constraints on the content process. But it is also about managing the constraints we impose on content.</db:para>
<db:para>Doing structured writing requires recording content in <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain, <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain or <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain structures, factoring out invariants into separate files, expressing constraints, and creating algorithms to translate the content to the <db:indexterm><db:primary>media domain</db:primary></db:indexterm>media domain for <db:indexterm><db:primary>publishing</db:primary></db:indexterm>publishing. All of this creates a lot of artifacts to keep track of, and requires a process both for keeping track of them and for running the structured authoring and publishing tool chain. Thus there is a need to manage both the artifacts and the process. But don’t fall into the trap of assuming that this is a generic processes. All these artifacts that require managing are the result of partitioning your content system, and how they should be managed is determined by how the partitions communicate with each other. This is specific to the overall partitioning strategy of your particular content system. You need to find a tool that fits that partitioning strategy.</db:para>
<db:para>A common mistake is to focus on some management problem and simply push out the related complexity to some other function. For instance, the heavy use of <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain markup can solve a bunch of management problems, but it pushes a lot of management complexity onto the writer, which they may not be able to handle without compromising <db:indexterm><db:primary>quality</db:primary></db:indexterm>quality. Nowhere is it more important to take an holistic approach than in the selection of your approach to content management and the tools you choose to implement it.</db:para>
</db:section>
<db:section>
<db:title>Conflicting constraints</db:title>
<db:para>The constraints you use to partition the content management problem may not always be the same as those you would implement to improve content quality. You may find your management goals at odds with your rhetorical goals. It is easier to manage content (or anything else) if it is more uniform. The constraints that you will naturally wish to impose to make content more manageable are those that make it more uniform. Thus a system like <db:indexterm><db:primary>DITA</db:primary></db:indexterm>DITA which, as a starting point, proposes that there are just three types of content (concept, task, and reference) has an obvious appeal from a management point of view. Remember though, that it is the accomplishment of your rhetorical goals that serves your readers. Your management goals should logically be subservient to your rhetorical goals.</db:para>
<db:para>The constraints that you impose to improve content quality are those which make sure that a piece of content does just the job it is supposed to to. They are the kind of constraints that make sure that a recipe contains everything a recipe needs and is presented in the way a recipe should be presented. They are highly specific to the subject matter and to the audience. Three generic content types are not going to provide all the constraints we need to effectively manage content <db:indexterm><db:primary>quality</db:primary></db:indexterm>quality. Indeed, some of the constraints that are designed to facilitate content management may be positively damaging to content quality.</db:para>
<db:para>But while uniformity might be the approach you would naturally choose if you merely set out to implement a content management system – if improved content <db:indexterm><db:primary>quality</db:primary></db:indexterm>quality were not one of your business goals – I would argue that managing <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain content may actually lead to better content management in the long run.</db:para>
<db:para>In any system that relies on constraints, on data that is known to meet certain constraints, it is necessary to make sure that the constraints are actually being met. This is the role of the <db:indexterm><db:primary>authoring algorithm</db:primary></db:indexterm>authoring algorithm and the <db:indexterm><db:primary>conformance algorithm</db:primary></db:indexterm>conformance algorithm. And as we have seen it is often much easier to provide effective guidance and perform effective validation in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm>subject domain. Also, the subject domain allows you to factor out many constraints, which is the most effective way of making sure they are obeyed. The document domain provides far fewer opportunities for factoring out constraints and providing effective guidance and is much more difficult to audit correctly.</db:para>
<db:para>Thus while a simple <db:indexterm><db:primary>document domain</db:primary></db:indexterm>document domain system of concept, task, and reference topics meets the content management algorithm’s desire for uniformity, it provides little opportunity for ensuring that the full range of constraints necessary to make content management and reuse work are actually followed. The result can be deterioration of the quality of the content set over time, a process that tends to be self perpetuating, as disorder in current content makes it harder to impose order on new content. (Just as you cannot put things away neatly in a messy drawer.)</db:para>
<db:para>The variety of constraints and formats found in a <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm>subject-domain system may present a greater <db:indexterm><db:primary>content management</db:primary></db:indexterm>content management challenge initially, but it can go a very long way to ensuring that the necessary constraints are met. And, as we have seen, you can often use {subject domain structures to factor out <db:indexterm><db:primary>management domain</db:primary></db:indexterm>management domain concerns}<db:xref linkend="chapter.management-domain"/>, which can go along way to removing the conflict between <db:indexterm><db:primary>quality</db:primary></db:indexterm>quality structures and management structures in content. This not only leads to more effective management, but also to a simpler writing experience.</db:para>
</db:section>
<db:section>
<db:title>Creating manageable content</db:title>
<db:para>We saw with the <db:indexterm><db:primary>conformance algorithm</db:primary></db:indexterm>conformance algorithm that the key to conformance was to create structures that are easy to conform to. The <db:indexterm><db:primary>content management algorithm</db:primary></db:indexterm>content management algorithm relies heavily on the conformance algorithm. Successful management of content depends on knowing exactly what assets you are managing. The more you know about each asset, and the more reliable what you know about that asset is, the more confidently you can manage it, and the less likely the management system is to slowly descend into chaos.</db:para>
<db:para>What this means is that the content management algorithm depends on content that is easy to manage. It may seem like simple generic units of content would be the easiest to manage, but the problem with such generic units is that you know very little about them and what you do know is often unreliable. Generic units may be easy to create and easy to store, but they are not easy to manage. It may require more initial though and effort to plan for the management of highly specific well constrained content units, but such units will in fact prove to be the easiest to manage over time, especially as your content set grows.</db:para>
<db:indexterm class="endofrange" startref="idm1070021164"/><db:indexterm class="endofrange" startref="idm1070021164x"/></db:section>
</db:chapter>
