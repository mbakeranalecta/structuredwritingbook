<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.partitioning"><db:title>Partitioning Complexity</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp140686369736464"><db:primary>partitioning</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp140686369736464x"><db:primary>concept</db:primary><db:secondary>partitioning</db:secondary></db:indexterm>



<db:para>What is complexity in the content process (or any other process)? The complexity of a task can be measure by the number of decisions you have to make and execute. Every decision you make requires knowledge (to make the correct choice) and skill (to execute that choice). The more decisions a task involves, the more knowledge and skill it requires, and the more knowledge and skill a task requires, the more complex it is.</db:para>
<db:para>We can divide the decisions involved in a task into two kinds:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Core:</db:emphasis> decisions that are fundamental to the task. These decisions are central to the task and cannot be removed by changing your processes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Extended:</db:emphasis> decisions that are introduced into the task by your processes or tools. Theoretically, at least, these decisions can be removed from the task by changing your processes or tools.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The more extended decisions you can remove from a task, the simpler you make that task. The purpose of partitioning the content system is to remove these decisions from key tasks, making them less complex and, therefore, improving productivity and quality.</db:para>
<db:para>Of course, those decisions don’t just vanish into thin air. They still must be made and acted on somewhere in the system. Complexity cannot be destroyed, but it can be moved around to ensure that every decision is made by the person or process with the information, skill, and resources to make and execute it best.</db:para>
<db:para>Simplifying the tasks of individual people and processes is not the only reason to change where decisions get made. Making decisions earlier or later in the content process can also have profound effects on the efficiency of your process and the kinds of output it can produce. For instance, partitioning decisions about document formatting away from the writer means that those decisions are not recorded in the content itself. If you later need to change how your content is formatted, you can change the formatting algorithm, without touching the content. The possibilities in this area go well beyond formatting, as we will see in later chapters.</db:para>
<db:para>We partition the content system with two goals in mind:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Enhance quality by ensuring that all decisions are made by the person of process with the knowledge, skill, and resources to make them properly.</db:para>
</db:listitem>
<db:listitem>
<db:para>Enhance efficiency by making and executing decisions at a time and place that minimizes costs.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All modern content systems are partitioned, but not all are partitioned in a way that fully handles the complexity of the content development and delivery process. As a result, many organizations produce content of poor or variable quality and lose money. Why are so many content systems poorly partitioned? We can find some answers by looking at the evolution of content development and desktop publishing.</db:para>
<db:section>
<db:title>Desktop publishing</db:title>
<db:para>One of the biggest changes in the partitioning of the content system was ushered in by the <db:indexterm><db:primary>desktop publishing</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>desktop publishing</db:secondary></db:indexterm>desktop publishing (DTP) revolution of the 1980s. Prior to the introduction of desktop publishing, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, preparation of proofs by a printer, correction of proofs, and printing.</db:para>
<db:para>This was a complex, time consuming, and expensive process with many potential points of failure. Functions were well partitioned, and professionals in each trade had a piece of the decision making and the tools to implement those decisions. However, the overhead of passing information from one to another was cumbersome and time consuming.</db:para>
<db:para>Desktop publishing eliminated much of that overhead by putting all of these functions – writing, design, layout, and proofing – in the hands of a single operator: the writer. This greatly sped up the publishing process and generally reduced the costs by eliminating most of the trades traditionally involved in the process.</db:para>
<db:para>However, this model introduced three problems:</db:para>
<db:para>First, it put a huge amount of complexity on the writer. In a desktop publishing environment, writers must make many more decisions, which require knowledge and skills in addition to those required to research and write content. The demand for writers who can handle this complexity changed hiring practices. Desktop publishing skill became a major hiring criteria for writers and remains so today. The focus in hiring moved from writing skills and knowledge of subject matter to the ability to manage the publishing process.</db:para>
<db:para>Second, because writers did layout and design while writing, their attention was divided between these tasks. Attention is a finite resource; when writers pay attention to layout and design rather than writing, quality suffers.</db:para>
<db:para>Third, although desktop publishing removed the need for a lot of vertical communication between writers, designers, and typesetters, it made no provision for horizontal communication between writers, leaving every writer on an island. Every book became a separate project. The division of the writer’s attention and the lack of horizontal coordination left huge amounts of complexity unhandled in large content systems. Duplication, omissions, and inconsistencies became difficult to detect and fix, and providing effective navigation between books became virtually impossible. All of this unhandled complexity was dumped on the reader in the form of poor quality content. Desktop publishing did not create this problem, but it did nothing to fix it.</db:para>
<db:para>One of the most visible early signs of this unhandled complexity creating quality problems came in the form of the dreaded “desktop publishing look” – an explosion of poorly designed and poorly laid out documents, characterized by bizarre font combinations, poor use of whitespace, poorly designed and placed graphics, and a seemingly random profusion of lines, shades, colors, and other decorative elements.</db:para>
</db:section>
<db:section>
<db:title>Style sheets</db:title>
<db:para>To help contain this, desktop publishing systems introduced <db:indexterm><db:primary>style sheets</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>style sheets</db:secondary></db:indexterm>style sheets, which partially partition content from formatting. Style sheets allow a writer to format text using pre-defined, named styles. Each style encapsulates a set of decisions about content formatting that have been made by a style sheet designer. Style sheets allow you to partition decisions about what the text looks like from decisions about what the text says.</db:para>
<db:para>Style sheets do not relieve writers of all formatting decisions; writers still must pass information to the partition that makes formatting decisions, which means writers must know how to apply styles to each piece of text. Although this requires less skill, experience shows that many writers do not use styles correctly or even at all.</db:para>
<db:para>Although style sheets remove some formatting decisions, the WYSIWYG (What You See is What You Get) display used by desktop publishing systems has another flaw. A key aspect of any interface between partitions is the feedback it gives users to let them know if they have done their work correctly. A WYSIWYG display tells you only one thing: does it look right? It does not tell you whether you have used styles correctly or at all.</db:para>
<db:para>Therefore, style sheets do not remove all formatting decisions from writers, nor do they guarantee that writers will always apply styles correctly. Different writers (or even the same writer at different times) may have different ideas about how to apply styles.</db:para>
<db:para>Another problem is that style sheets partition the design of individual elements of a document, such as a title or a list, but not the overall design of the document. Document design remains on the writers’s side of the partition. The style sheet restricts the formatting pallet, but it does not tell writers how to use that pallet to achieve an effective document design. Since writers are not document designers by trade, they may not always do this well, and multiple writers working on a common projects will almost certainly not do it consistently.</db:para>
<db:para>Many organization use style guides to tell writers how to use the style pallet to design documents. But the style guide only provides instructions, it does not partition the task away from the writer. The style guide merely adds another knowledge requirement, adding complexity.</db:para>
<db:para>Styles, therefore, provide only limited relief to the complexity dumped on the author, and they are only moderately successful in promoting consistent document appearance.</db:para>
</db:section>
<db:section>
<db:title>Content management systems</db:title>
<db:para>Meanwhile, the Internet brings a new set of challenges. A modern website is not a library of independent volumes; it’s a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how readers seek and use content. Meeting those needs requires a level of coordination between writers – and between the pieces of content they create – that desktop publishing cannot provide.</db:para>
<db:para>To help manage these challenges, most organizations are adopting <db:indexterm><db:primary>content management systems</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management systems</db:secondary></db:indexterm>content management systems (CMS). This has led to new forms of partitioning and new roles, such as webmaster, information architect, and, more recently, content strategist.</db:para>
<db:para>Some of this new partitioning is useful, but sometimes content management systems can make things worse. For instance, some content management systems give control of the page header and sidebar to an information architect but let writers design the document part of the page pretty much as they did with a desktop publishing system. Unfortunately, this approach just wraps a frame around all of the shortcomings of desktop publishing, highlighting those shortcomings by closely juxtaposing the work of different writers.</db:para>
<db:para>Increasingly, therefore, content management systems have begun to incorporate more structured techniques and rely on a technology that actually predates desktop publishing: markup languages.</db:para>
</db:section>
<db:section>
<db:title>Markup languages</db:title>
<db:para>A <db:indexterm><db:primary>markup language</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>markup language</db:secondary></db:indexterm>markup language is a system for indicating the structure of a text via marks in the text itself. Markup languages were used for publishing on mainframe computers long before desktop computers had the processing power required for desktop publishing. A markup language – HTML – gave birth to the Web by enabling writers to include in a document the information needed to format and display that document in a Web browser. In other words, HTML markup is an interface between writers and web browsers.</db:para>
<db:para><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML is probably the single most widely used markup language in the world today, but there are thousands of others, and people create new markup languages for specific purposes all the time. Each markup language represents a specific interface between partitions in a content system. As we will see in <db:xref linkend="chapter.document-domain"/>, HTML represents a massive departure from the partitioning provided by traditional DTP systems.</db:para>
<db:para>Markup languages are by far the most general type of content interface, and they can be used to represent nearly any kind of partitioning you might need. In fact, markup languages are usually found behind the scenes in WYSIWYG and forms-based interfaces. However, markup languages can also stand alone as interfaces in their own right. <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown, for instance, has become a popular markup language for writing simple Web content.</db:para>
<db:para>There can be (and usually are), multiple partitions in a content system. The interfaces between those partitions are frequently markup languages, including interfaces that writers never use themselves. For instance, an organization may use <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown to author some of their content but then convert <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown to <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML for publishing and use a CSS style sheet (another markup language) to specify the formatting for that content.</db:para>
<db:para>Today the term “structured writing” is often taken as a synonym for the use of markup languages. This is not really fair, since, as we will see, any use of computers for writing and publishing necessarily involves structured writing techniques. The reason we associate markup languages so strongly with structured writing, however, is that markup languages allow organizations to create their own structures and, thus, change the way their content systems are partitioned.</db:para>
<db:para>Most of the discussion in this book focuses on the use of markup languages for interfaces, because markup languages provide the greatest range of possibilities for effectively partitioning the content system. You may be able to hide some of the markup techniques discussed here behind WYSIWYG or forms-based interfaces. However, in this book I use markup to illustrate them all, because markup provides the clearest view of the structure and interfaces that define partitions.</db:para>
</db:section>
<db:section>
<db:title>Quality and value</db:title>
<db:para>So far in this discussion I have only looked at how you can partition formatting decisions from writing decisions. This class of partitioning can improve the design quality of the output by putting professional designers in charge of formatting, and it can help improve content quality by freeing more of the writer’s time and attention to focus on writing. However, there is still much more you can do to improve the rhetorical quality of content.</db:para>
<db:remark>RLH - 
I can see that we need an increased emphasis on the rhetorical quality of writing, but I don’t see why “the increasing complexity and speed of content delivery” would lead one to that conclusion. I’ve reworded to make the point that the web has revealed weaknesses in the rhetorical quality of writing. Please read to make sure I didn’t muddy your point. Also, you may want to add a one-sentence definition of “rhetorical quality” to make sure readers are following your intent. Also, I think you can combine this section and the next one (The central role of writing). I think you’re making the same points, twice, and that you could combine and compress these sections.
</db:remark>
<db:para>The Internet has made it easier for users to access our information, but it has also made it easier for them to detect content that is inconsistent in tone and style, outdated, redundant, incomplete, or just plain useless. The Web did not create these flaws, but it made them painfully apparent. Organizations can no longer ignore that their existing content often has major rhetorical faults. This has led to the emergence of the discipline of <db:indexterm><db:primary>content strategy</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>content strategy</db:secondary></db:indexterm>content strategy as organizations feel the impact of poor content quality and see content quality as a strategic value.</db:para>
<db:para>In the age of physical typesetting, we had no automated tools to help with the rhetorical quality of content, and the desktop publishing revolution was mostly concerned with digitizing the previously mechanical design and layout process. The limitations of the available tools forced organizations to partition their processes in ways that did not always properly handle the full complexity of content creation. The result was poor-quality content.</db:para>
<db:para>Modern structured writing tools allow us to partition the content system in ways that significantly enhance the rhetorical quality of content. This includes methods that free writers to focus on quality, to create consistent content, to validate and audit content quality, and to create content structures and products that would not be possible with other methods.</db:para>
<db:para>The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in the content field. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in the area of content quality. Where structured writing tools have replaced desktop publishing or word processing tools, it has largely been in pursuit of process goals. But a more holistic view would show that process and quality are intimately related, and that treating them holistically can significantly improve both.</db:para>
<db:remark>RLH - 
I’m not sure you need this next paragraph.
</db:remark>
<db:para>The first priority in any partitioning of the content system, therefore, should be to maximize content quality. Poor content quality is the result of unhandled complexity in the content system. The goal of content system design must be to ensure that every piece of the complexity of the content system, including rhetorical complexity, is directed to a person or process that has the skills, the time, and the resources to handle it. This means that no part of the complexity of the system can be dropped in the interface between partitions, or within the operation of any partition. Nor can the interface of any partition be made so complex that the interface itself introduces complexity that cannot be handled adequately by the person working in that partition.</db:para>
</db:section>
<db:section>
<db:title>The central role of writing</db:title>
<db:para>There are many reasons to change the partitioning of a content system. Different partitioning can allow us to automate various aspects of the process, which can improve efficiency and consistency, and can even allow us to produce outputs that could not be produced at all without automation. But in pursuit of these goals, we can sometimes lose site of where the fundamental value of all content comes from: the writing.</db:para>
<db:para>Writing well is an activity that requires the whole of the writer’s attention. Any part of the complexity of the content creation process that divides the writer’s attention makes it more difficult for them to write quality content. Every partitioning requires the creation of an interface that passes information from one partition to another. Sometimes the interface to a new partition that enables some new form of automation can turn out to be more complicated than the interface to the old partition.</db:para>
<db:para>This ends up making the writer’s life more complex rather than less. If the writer ends up with more complexity than they can comfortable handle, the result is dropped complexity, which means diminished content quality. Sometimes that unhandled complexity also derails the attempts to make the process more efficient because the information coming through the complex interface is not reliable enough for the new process to work correctly.</db:para>
<db:para>The sad truth is that many content systems have never  seriously attempted to minimize the amount of complexity they dump on the writer. Writing and publishing have largely been treated as separate concerns, as if the publishing process and its demands had no influence, for good or bad, on the quality of content that the system  produced. The result has been widespread dissatisfaction with content tools and systems, and with their results. Lack of attention to where complexity falls in a system also typically results in breakdown and failure of the system over time, particularly as new features are added to address specific needs without adequate thought given to the impact of complexity they introduce, a process content strategist Joe Gollner calls the “barnacalization of systems”.</db:para>
</db:section>
<db:section>
<db:title>The role of algorithms</db:title>
<db:para>There are two fundamental and often complementary reason to partition the content process. One is to offload excessive complexity from a particular person or group, and the other is to direct an operation (and its complexity) to an <db:indexterm><db:primary>algorithm</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>algorithm</db:secondary></db:indexterm>algorithm. In many cases these are complementary aims because we partition the complexity away from a person and direct it to an algorithm. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted a certain way, chances are many similar pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.</db:para>
<db:para>Writing an algorithm redistributes complexity away from the person who used to do the task, but it directs that complexity to the person who writes and maintains the algorithm. For example, using a CSS style sheet to format lists redistributes the task of designing list formatting from writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.</db:para>
<db:para>Using CSS partitions the complexity of formatting a page, distributing that complexity away from the writer. Now, the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This allows writers to focus on writing and designers to focus on design. The result is better writing and better, more consistent, design.</db:para>
</db:section>
<db:section>
<db:title>The role of tools</db:title>
<db:para>However, while this transfer of responsibility improves quality by allowing both designer and writer to focus on what they do best, it also introduces a new kind of complexity into the system. CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS introduces new complexity.</db:para>
<db:para>All tools introduce complexity into the processes they serve. People have to design, build, learn to use, and maintain the tool. All this complexity did not exist before. We accept this new complexity because a good tool allows us to distribute our existing complexity more efficiently. Managing where complexity falls is ultimately much more effective than merely minimizing total complexity.</db:para>
<db:para>Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or text message is staggering, but it directs the complexity of communicating over distance away from the users towards systems, and the people who maintain them, for a huge net gain in productivity.</db:para>
<db:para>The content creation stack is similarly complex. However, the typical content creation stack does a poor job of partitioning and distributing complexity, often giving writers far more complexity than they can reasonably be expected to handle. As a result, that complexity gets dumped on the reader in the form of poor quality content.</db:para>
</db:section>
<db:section>
<db:title>Towards a more effective partitioning of the content system</db:title>
<db:para>The impact of poor quality content goes straight to the bottom line. To address it, we need a new partitioning of the content creation process. This book does not prescribe a single new vision of content partitioning for all organizations. The attempt to create a single system to meet all needs has been a large factor in the poor partitioning of many content systems. Each organization has different needs and different audiences. They face different sources and degrees of complexity, and they need to partition their content system accordingly. Therefore, rather than prescribe any one partitioning, this book explores structured writing strategies you can use to partition your content system and suggests how you can determine which approach will work best for your organization.</db:para>
<db:indexterm class="endofrange" startref="idp140686369736464"/><db:indexterm class="endofrange" startref="idp140686369736464x"/></db:section>
</db:chapter>
