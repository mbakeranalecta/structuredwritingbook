<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.partitioning"><db:title>Partitioning the Complexity of the Content System</db:title><db:indexterm class="startofrange" xml:id="idp1487974644"><db:primary>partitioning</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1487974644x"><db:primary>concept</db:primary><db:secondary>partitioning</db:secondary></db:indexterm>



<db:para>All modern content systems are partitioned. Not all modern content systems are partitioned in a way that fully handles the complexity of the content development and delivery process. As a result, many organizations produce content of poor or variable quality, and loose money as a result.</db:para>
<db:para>What is complexity in the content process (or any other process)? The complexity of a task can be measure by the number of decisions the person doing the task has to make and execute. Every decision you make require knowledge (to make the correct choice) and skill (to execute that choice once you have made it). The more decisions a task involves, the more knowledge and skill it requires. The more knowledge and skill it requires, the more complex it is.</db:para>
<db:para>We can divide the decisions involved in a task into two kinds:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Core decisions are those that are fundamental to the task. They are absolutely central to the task and cannot be removed from it by a change in process.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extended decisions are those that are introduced into the task by the process or tools you use to perform the task. Theoretically, at least, these decisions can be removed from the task by a change of process of tools.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The more extended decisions you can remove from an individual task the simpler you make that task. The purpose of partitioning the content system is to move the decisions from key tasks, making them less complex, and therefore improving the productivity or quality of the person doing those tasks.</db:para>
<db:para>Those decisions don’t just vanish into thin air of course. They still have to be made and acted on somewhere in the system. Complexity cannot be destroyed, but it can be moved around to ensure that every decisions is made by the person or process with the information, skill, and resources to make  and execute it best.</db:para>
<db:para>Simplifying the tasks of individual people and processes is not the only reason to change where decisions are made in your content system. Making decisions earlier or later in the content process can also have profound effects on the efficiency of your process and the kinds of outputs it can produce. For instance, partitioning decisions about document formatting away from the writer also means that those decisions are partitioned from the content itself. If you later want to make wholesale changes to how your content is formatted, you can make them by changing the algorithm that does the formatting, without having to touch the content itself. The possibilities in this area go well beyond formatting, as we will see in later chapters.</db:para>
<db:para>Overall, then, we partition the content system with two goals in mind. First to enhance quality by ensuring that all decisions are made by the person of process with the knowledge, skill, and resources to make them properly, and second to enhance efficiency my making sure that decisions are made and executed at a time and place that minimizes the time and cost of implementing them.</db:para>
<db:section>
<db:title>Desktop publishing and the repartitioning of content systems</db:title>
<db:para>One of the biggest changes in the partitioning of the content system was ushered in by the desktop publishing revolution of the 1980s. Prior to the introduction of desktop publishing, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, the preparation of proofs by a printer, correction of proofs, and the final printing. This was a complex and time consuming process that cost a lot of money and had many points where failure could occur or error be introduced. The various function were well partitioned from each other. Professionals in different trade each had a chunk of the decision making and the tools to implement those decisions. However, the overhead of passing information from one to another was cumbersome and time consuming.</db:para>
<db:para>Desktop publishing eliminated much of that overhead by putting all the tools of document creation – writing, design, layout, proofing – in the hands of a single operator: the writer. This greatly sped up the process of producing published documents and generally reduced the costs as well by eliminating most of the trades traditionally involved in the process.</db:para>
<db:para>The problem with this model are threefold.</db:para>
<db:para>First, it put a huge amount of complexity on one person: the writer. Writers working in a desktop publishing environment have to make far more decisions than those working with a pen or a typewriter, and consequently those writers require a lot of knowledge and skills in addition to those required to research and write their content. The need for writers to be able to handle this complexity actually changed hiring practices. Desktop publishing skill became a major hiring criteria for writers (and remains so today). The focus in hiring was taken off writing and knowledge of subject matter and placed on the ability to manage the complexity of the publishing process. To the extent that this results in the better desktop publisher being hired over the better or more knowledgeable writer, content quality suffers.</db:para>
<db:para>Second, because the writer is doing layout and design tasks while writing, the writer’s attention is divided between these tasks. Attention is a finite resource, so to the extent that attention is being paid to layout and design rather than to writing, quality suffers.</db:para>
<db:para>Third, while it removed a lot of complexity of vertical communication between writer, designer, and typesetter, desktop publishing left every writer on an island, making no provision for any kind of horizontal coordination between writers. Everyone worked on their own book as a separate project. The division of the writer’s attention and the lack of horizontal coordination meant the huge amounts of complexity were going unhandled in large content systems. Duplication, omissions, and inconsistencies were very difficult to detect and fix, while providing effective navigation between books was virtually impossible. All this unhandled complexity was dumped on the reader in the form of poor quality content. Desktop publishing did not create this problem, but it did nothing to fix it.</db:para>
<db:para>One of the most visible early signs of unhandled complexity creating quality problems in the desktop publishing model came in the form of the dreaded “desktop publishing look” – an explosion of poorly designed and poorly laid out documents, often mixing several different fonts at different sizes, poor use of whitespace, and a profusion of lines, shades, and poorly placed graphics.</db:para>
<db:para>To help contain this, desktop publishing systems quickly introduced a partial partitioning of content from formatting in the form of stylesheets. Stylesheets allow a writer to format a piece of text by applying a style to it. Each style encapsulates a set of decisions about content formatting that have been made by the style sheet designer. Styles allow you to partition decisions about what the text will look like from decisions about what the text will say.</db:para>
<db:para>Because partitioning always requires that we pass the information required to make decisions on to the partition that makes them, styles do not remove all concern with formatting from the writer. The writer still has to decide which style to apply to each piece of text they write and they have to have to skills to apply them. These are much simpler skills, but experience has shown that they are frequently performed poorly and many documents, particularly word processing documents, do not use styles correctly or even at all.</db:para>
<db:para>One of the key aspects of any interface between partitions is the feedback that it provides to the user to let them know if they have done their work correctly. In desktop publishing, that interface is the WYSIWYG (What You See is What You Get) display. The feedback a WYSIWYG display provides is, if it look right, it is right. Unfortunately, the use of styles does not change this interface at all. As long as the writer thinks the document looks okay, there is nothing to tell them they have used styles incorrectly or not at all.</db:para>
<db:para>This partitioning, therefore, does not remove all formatting decisions from the writer’s concerns or their control. It does not guarantee that the writer will alway apply the correct style to each part of the document. Different writers (or even the same writer at different times) may have different ideas about how a document should be designed.</db:para>
<db:para>Part of the problem is that stylesheets partition the design of individual elements of a document, such as a title or a list, but not from the overall design of the document. Document design remains on the author’s side of the partition. The style sheet restricts the formatting pallet available to the author for designing documents, but does not tell them how to use the items on that pallet to achieve an overall effective document design. And since writers are not document designers by trade, they may not always do this well, and multiple writers working on a common projects will almost certainly not do it consistently.</db:para>
<db:para>Many organization use style guides to tell the writer how they are suppose to use the style pallet to design the overall document. But the style guide only provide instructions, it does not partition the task away from the writer. The style guide, and many of them are very long and complex, merely adds an additional knowledge requirement that adds to the complexity on the writer’s side of the partition.</db:para>
<db:para>Styles, therefore, have provided only very limited relief to the amount of complexity dumped on the author, and have been only moderately successful in providing consistency across the appearance of documents.</db:para>
<db:para>Meanwhile, the advent of the Web had brought a new set of challenges. A modern website is not a library of independent volumes but a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how readers seek and use content. This requires a level of coordination between writers and between pieces of content that desktop publishing is just not equipped to provide.</db:para>
</db:section>
<db:section>
<db:title>Enter content management</db:title>
<db:para>The advent of the Web has led to most organizations adopting content management systems to help with managing the new levels of coordination that delivering to the Web requires. This has led to new forms of partitioning of the content system. New roles such as webmaster, information architect, and, more recently, content strategist, have been developed to play coordinating roles in the content system.</db:para>
<db:para>Different content management systems partition the content system in different ways. Some, for instance, give control of the page header and sidebar to the information architect while letting the writer design the document part of the page pretty much as they did in a traditional word processor or desktop publishing system. But this approach really just wraps a frame around all the shortcomings of desktop publishing, while making those shortcomings more obvious by more closely juxtaposing the work of different writers.</db:para>
<db:para>Increasingly, therefore, content management systems have begun to incorporate more structured techniques and to rely on a technology that actually predates desktop publishing: markup languages.</db:para>
<db:para>A markup language is a system for indicating the structure of a text via marks directly in the text itself. Markup languages were being used to do publishing on mainframe computers long before desktop machines had the processing power of graphical display that are required for desktop publishing. It was also a markup language – HTML – that gave birth to the Web by enabling a document to carry the information needed to display it as a formatted document in a Web browser. In other words, HTML markup is an interface between the author and the web browser, allowing the browser to format a document for display.</db:para>
<db:para><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML is probably the single most widely used markup language in the world today, but there are thousands of other markup languages, and people create new markup languages for specific purposes all the time. A markup language is a way to convey information between the partitions of a content system. Each of these languages represents a specific interface between partitions in a content system. As we will see in <db:xref linkend="chapter.document-domain"/>, HTML represented a massive departure from the partitioning provided by traditional DTP systems.</db:para>
<db:para>Markup languages are by far the most general type of content interface and can be used to represent just about any kind of partitioning of the content system. In fact, markup languages are usually found behind the scenes in WYSIWYG and forms-based interfaces. However, markup languages can also stand alone as interfaces in their own right. <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown, for instance, has become a very popular markup language for writing simple Web content.</db:para>
<db:para>There can be (and usually are), multiple partitions in a content system. The interfaces between those partitions are frequently markup languages, including the partitions that writers never interact with themselves. For instance, an organization may use <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown for authoring for at least part of their content. But <db:indexterm><db:primary>Markdown</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>Markdown</db:secondary></db:indexterm>Markdown is converted to <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML for publishing, and a CSS stylesheet (another markup language) is used to specify the formatting of that content. Thus three markup languages, at least, as being used as the interfaces or partitions in that content system.</db:para>
<db:para>Today the term “structured writing” is often taken as a synonym for the use of markup languages. This is not really fair, since, as we will see, any use of computers for writing and publishing necessarily involves the use of structured writing techniques. The reason that markup languages are so strongly associated with structured writing, however, is that markup languages allow organizations to create their own structures, and thus to change the way their content systems are partitioned.</db:para>
<db:para>Most of the discussion in this book will focus on the use of markup languages for interfaces, as it is markup languages that provide the greatest range of possibilities for effectively partitioning the content system. Some of the markup techniques we will discuss here can be effectively hidden behind WYSIWYG or forms-based interfaces and some cannot. But in this book I will use markup to illustrate them all, as this provides the clearest view of the structure and of the interface that it provides between partitions.</db:para>
</db:section>
<db:section>
<db:title>Quality and value</db:title>
<db:para>So far in this discussion I have only looked at how formatting decisions get partitioned from writing decisions. But while this partitioning can improve the design quality of the output by putting professional designers in charge of formatting, and can help improve content quality by freeing more of the writer’s time and attention to focus on writing. There is still much more that can be done to improve the rhetorical quality of content.</db:para>
<db:para>The increasing complexity and speed of content delivery in the age of the Web means that we need an increase emphasis on the rhetorical quality of writing as well as its design qualities. The emergence of the discipline of content strategy shows that organizations are feeling the impact of poor content quality and are seeing content quality as a strategic value. The Web has made organizations face up to the fact that their existing content is often has major rhetorical faults. It is often inconsistent in tone and style. It frequently contains major omissions. It is often outdated, redundant, or just plain useless. The Web did not create these flaws, but it made them more painfully apparent than they had been in the past.</db:para>
<db:para>In the age of physical typesetting, we had no tools to help with the rhetorical quality of content, and the desktop publishing revolution was mostly concerned with digitizing the previously mechanical design and layout process. The partitioning of the content system was largely dictated by the limits of the tools, thus forcing organization to partition their process in ways that did not always handle the full complexity of content creation properly, resulting in the creation of much poor-quality content. Modern structured writing tool, however, have the capacity to allow us to partition the content system in ways that significantly enhance the rhetorical quality of content. This includes methods that free the writer to focus on quality, methods that positively support the writer in creating consistent quality, methods that improve our ability to validate and audit content quality, and methods that allow us to create content structures and products that would not be possible with other methods.</db:para>
<db:para>The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in the content field. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in the area of content quality. Where structured writing tools have replaced desktop publishing or word processing tools it has largely been in pursuit of process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both.</db:para>
<db:para>The first priority in any partitioning of the content system, therefore, should be to maximize content quality. Poor content quality is the result of unhandled complexity in the content system. The goal of content system design must be to ensure that every piece of the complexity of the content system, including rhetorical complexity, is directed to a person or process that has the skills, the time, and the resources to handle it. This means that no part of the complexity of the system can be dropped in the interface between partitions, or within the operation of any partition. Nor can the interface of any partition be made so complex that the interface itself introduces complexity that cannot be handled adequately by the person working in that partition.</db:para>
</db:section>
<db:section>
<db:title>The central role of writing</db:title>
<db:para>There are many reasons to change the partitioning of a content system. Different partitioning can allow us to automate various aspects of the process, which can improve efficiency and consistency, and can even allow us to produce outputs that could not be produced at all without automation. But in pursuit of these goals, we can sometimes lose site of where the fundamental value of all content comes from: the writing.</db:para>
<db:para>Writing well is an activity that requires the whole of the writer’s attention. Any part of the complexity of the content creation process that divides the writer’s attention makes it more difficult for them to write quality content. Every partitioning requires the creation of an interface that passes information from one partition to another. Sometimes the interface to a new partition that enables some new form of automation can turn out to be more complicated than the interface to the old partition.</db:para>
<db:para>This ends up making the writer’s life more complex rather than less. If the writer ends up with more complexity than they can comfortable handle, the result is dropped complexity, which means diminished content quality. Sometimes that unhandled complexity also derails the attempts to make the process more efficient because the information coming through the complex interface is not reliable enough for the new process to work correctly.</db:para>
<db:para>The sad truth is that many content systems have never  seriously attempted to minimize the amount of complexity they dump on the writer. Writing and publishing have largely been treated as separate concerns, as if the publishing process and its demands had no influence, for good or bad, on the quality of content that the system  produced. The result has been widespread dissatisfaction with content tools and systems, and with their results. Lack of attention to where complexity falls in a system also typically results in breakdown and failure of the system over time, particularly as new features are added to address specific needs without adequate thought given to the impact of complexity they introduce, a process content strategist Joe Golner calls the “barnacalization of systems”.</db:para>
</db:section>
<db:section>
<db:title>The role of algorithms</db:title>
<db:para>There are two fundamental and often complementary reason to partition the content process. One is to offload excessive complexity from a particular person or group, and the other is to direct an operation (and its complexity) to an algorithm. In many cases these are complementary aims because we partition the complexity away from a person and direct it to an algorithm. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted a certain way, chances are many similar pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.</db:para>
<db:para>Writing an algorithm to do a repetitive task redistributes complexity from the person who used to do the task to the algorithm, but also to the person who writes and maintains the algorithm. For example, using a CSS stylesheet to format lists redistributes the task of designing list formatting from the writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.</db:para>
<db:para>Using CSS partitions the complexity of formatting a page so that we can distribute the complexity of formatting away from the writer.  Now the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This simplifies the writer’s life, allowing them to focus on writing. It also simplifies the designers life, allowing them to concentrate on design. The result is better writing and better, more consistent, design.</db:para>
</db:section>
<db:section>
<db:title>The role of tools</db:title>
<db:para>However, while this transfer of responsibility improves quality by allowing both designer and writer to focus on what they do best, it also introduces a new kind of complexity into the system. CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS in to our process means introducing new complexity.</db:para>
<db:para>All tools introduce new complexity into the processes they serve. People have to design the tools and build the tool and learn to use the tool, and maintain the tool. All this is new complexity that did not exist before. We accept this new complexity into our processes because a good tool allows us to distribute our existing complexity more efficiently, so that less of the complexity falls on the people and more on the tools, and so that each person in the system only has to deal with the complexity that they are able to cope with. Managing where the complexity falls is ultimately much more effective than merely minimizing total complexity.</db:para>
<db:para>Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or a text message is staggering, but its directs the complexity of communicating over distance away from the users towards systems, and the people who maintain them, for a huge net gain in productivity.</db:para>
<db:para>The content creation stack is similarly complex. Yet the content creation stack does not do such a good job of partitioning and distributing all of the complexity of content creation, often focusing far more of that complexity on writers than they can reasonably be expected to handle, with the result that complexity is pervasively being dumped on the reader in the form of poor quality content.</db:para>
</db:section>
<db:section>
<db:title>Towards a more effective partitioning of the content system</db:title>
<db:para>The impact of poor quality content goes straight to the bottom line of revenue and profitability. To address it, we need a new partitioning of the content creation process. This book is not a prescription of a single new vision of content partitioning for all organizations. The attempt to create a single system to meet all needs has been a large factor in the poor partitioning of many content systems. Each organization has different needs and different audiences. They face different source and degrees of complexity and they need to partition their content system accordingly. Rather than prescribe any one partitioning, therefore, this book seeks to describe how various approaches to structured writing enable different ways of partitioning the content system, and to suggest how you might go about figuring out which approach to partitioning will work best for your organization.</db:para>
<db:indexterm class="endofrange" startref="idp1487974644"/><db:indexterm class="endofrange" startref="idp1487974644x"/></db:section>
</db:chapter>
