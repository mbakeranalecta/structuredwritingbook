<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.document-domain"><db:title>Writing in the Document Domain</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp38568564"><db:primary>media domain</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp38568564x"><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp38565492"><db:primary>document domain</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp38565492x"><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idp38561652"><db:primary>subject domain</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp38561652x"><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>




<db:para>A vector graphics program does a great job of partitioning formatting complexity from text. But what happens when you want to create a document that spans multiple pages or if you edit the text and need to change how it flows from one page to the next? A vector graphics program will force you to handle these pagination issue by hand. To factor them out, we need to look to the document domain.</db:para>
<db:para>Pagination is a complex process that requires a lot of decisions about how and where to place page breaks. It is tedious and time consuming to execute those decisions by hand. An algorithms can make all of these decisions, but to partition them off to an algorithm, we need to move our content into the document domain.</db:para>
<db:para>The <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain is concerned with the presentation of information as a document. In the document domain you use structures such as title, list, and table, without specifying how they will be formatted. You make document-domain decisions and defer media-domain decisions to someone else. In all likelihood, you defer those decisions to a designer who creates an algorithm to execute the decision.</db:para>
<db:sidebar>
<db:title>Formatting versus presentation</db:title>

<db:para>The words <db:emphasis>formatting</db:emphasis> and <db:emphasis>presentation</db:emphasis> are commonly used as synonyms, but here I make a distinction between, for example, the decision to present a piece of information as a list (presentation), and the decision to format list items in 12-point Palatino with 1-em indent and a square bullet (formatting). In this sense, presentation and formatting are distinct and can be partitioned from each other. However, it’s easy to lose this distinction because most of today’s tools combine these two operations in a <db:indexterm><db:primary>WYSIWYG</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>WYSIWYG</db:secondary></db:indexterm>WYSIWYG display.</db:para>
</db:sidebar>
<db:para>Word processors and desktop publishing programs partition the pagination process from the writing process by introducing some document domain constraints. A document is made up of a series of pages that have margins and contain text flows. Text flows are made up of blocks (paragraphs, headings) inside of which text can flow, even from one page to the next. Common features, such as tables, are supported as objects that can exist in text flows. New pages are created automatically as text expands. In other words, the program creates a bunch of text containers and decides how to fit text into those containers. This leaves writers free to focus on writing and gives pagination decisions to the program.</db:para>
<db:para>Pages, paragraphs, headings, and tables, are all <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain objects. Rather than working on a blank slate, as they do in a graphics program, writers now work within the <db:indexterm><db:primary>constraints</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>constraints</db:secondary></db:indexterm>constraints of these document-domain objects.  These constraints remove or limit decisions about positioning of elements, which makes creating documents faster and more consistent.</db:para>
<db:para>But while these constraints are powerful, word processing and desktop publishing impose few other constraints on formatting. While they offer a basic set of document-domain objects – pages, paragraphs, tables, and so forth – they use a <db:indexterm><db:primary>WYSIWYG</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>WYSIWYG</db:secondary></db:indexterm>WYSIWYG display, which unifies, rather than partitions, writing and formatting. The writer worries less about pagination but is still thinking mostly in terms of styles and formatting – the concerns of the media domain. If you want the writer to think less about formatting you need to factor out the media-domain concerns. For that you need to move more fully into the document domain where you can take the formatting decisions out of the writer’s hands entirely.</db:para>
<db:para>Consider a list. You may want the spacing above the first item of a list to be different from the spacing between other items of the list. This is a media-domain constraint – it is about formatting, not the structure of the document. However, this constraint is hard to enforce in the media domain.</db:para>
<db:para>Most media-domain writing applications create lists by applying styles to ordinary paragraphs. To format a list with an extra space above the first item, you need to create two different styles: a <db:code>first-item-of-list</db:code> style and and <db:code>following-item-of-list</db:code> style. The result might look like <db:xref linkend="ex.flat-list"/>.</db:para>
<db:figure xml:id="ex.flat-list"><db:title>List structure in the media domain</db:title><db:programlisting>
p{first-item-of-list}: Carrots
p{following-item-of-list}: Celery
p{following-item-of-list}: Onions
</db:programlisting></db:figure>
<db:para>This requires the writer to apply the <db:code>first-item-of-list</db:code> style to the first item of a list and the <db:code>following-item-of-list</db:code> style to the following items. The word processor does not enforce this constraint. The writer has to remember it, which creates two problems:</db:para>
<db:orderedlist>
<db:listitem>
<db:para>It makes writing a bit harder (and all the bits add up). The writer needs to decide which style to use for every list item, even though the design decision has already been made. And new writers must learn, and remember to apply, this rule.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the writer gets it wrong, the problem can easily go unnoticed.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Structured writing works by factoring out invariants. Most constraints are invariants – that is, they are rules that apply to all instances of the same content structure. The constraint that all lists must have extra space before the first item is an obvious example. The best way to enforce an invariant constraint is to partition it out altogether.</db:para>
<db:para>To do this, we create a list structure – not a styled paragraph, but a structure that is specifically a list. A document-domain list structure looks like <db:xref linkend="ex.docdomain-list"/>:</db:para>
<db:figure xml:id="ex.docdomain-list"><db:title>List structure in the document domain</db:title><db:programlisting language="SAM">
list:
    list-item: Carrots
    list-item: Celery
    list-item: Onions
</db:programlisting></db:figure>
<db:para>A list structure partitions the idea of a list from the physical formatting of a list by creating a container that did not exist before – the <db:code>list</db:code> structure. By creating a <db:code>list</db:code> structure, the writer tells the formatting algorithm that this is a list. Since a list is a feature of a document, it is a document-domain structure. The <db:code>list</db:code> container has no <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain analog.</db:para>
<db:para>Taking the formatting decisions out of the writer’s hand obviously reduces complexity for writers. But by moving those decisions away from writers, we also ensure that they are executed more consistently. All of the media-domain constraints – all the design elements – that we previously asked writers to remember and execute are now executed by an algorithm. This means that we can enforce media-domain constraints that were difficult to enforce in the media domain itself.</db:para>
<db:para>This illustrates a consistent pattern in structured writing: we often move to the next domain to enforce – or factor out – constraints in the previous domain. This is an important design principle that we will see several times as we look at the structured writing algorithms. Wherever possible, look for a way to factor out a constraint rather than enforce it. Enforcing a constraint still requires the writer to think and act. Factoring it out removes it from the writer’s concerns entirely.</db:para>
<db:para>Here we begin to see specifically rhetorical structures enter the picture. In creating a list structure the writer is recording something of their rhetorical intent – not all of it by any means – but something of it: the intent to express their information as a list. Just as when we moved from recording text as a set of dots in a paint program to recording it as a text object in a vector graphics program (thus capturing it’s nature as text), rather than record a list as lines of text with a bullet character at the beginning of each line, we now capture it as a list structure.</db:para>
<db:para>Once you have a <db:code>list</db:code> structure, you can create rules – in a separate file – about how lists are formatted. We are familiar with this from <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML and <db:indexterm><db:primary>cascading style sheets</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>cascading style sheets</db:secondary></db:indexterm>CSS. <db:xref linkend="ex.html-list"/> shows a list structure in <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML (actually, this is a slightly more specific structure, but we’ll get to that):</db:para>
<db:figure xml:id="ex.html-list"><db:title>List structure using HTML</db:title><db:programlisting language="HTML">
&lt;ol&gt;
    &lt;li&gt;Carrots&lt;/li&gt;
    &lt;li&gt;Celery&lt;/li&gt;
    &lt;li&gt;Onions&lt;/li&gt;
&lt;/ol&gt;
</db:programlisting></db:figure>
<db:para>Now that you have a distinct list object, you can factor out the invariant list formatting rule into a separate file. For <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML, we usually do this with a <db:indexterm><db:primary>cascading style sheets</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>cascading style sheets</db:secondary></db:indexterm>CSS stylesheet (see <db:xref linkend="ex.css-list"/>):</db:para>
<db:figure xml:id="ex.css-list"><db:title>CSS for a list structure</db:title><db:programlisting language="CSS">
li:first-child 
{
    padding-top: 5pt;
}
</db:programlisting></db:figure>
<db:para>This factors out the spacing-above-lists decision and assigns it to an algorithm, partitioning the complexity of list formatting by asking the writer to express a simple idea in familiar terms – this is a list – instead of executing a complex set of formatting instructions.</db:para>
<db:para>But wait! That’s fine if all lists are foormatted exactly the same way, but they’re not. At the very least, some lists are bulleted and some are numbered. And then there are nested lists, which are formatted differently from their parents, and specialized lists, such as lists of ingredients, definitions, or function parameters. How do you make sure each type of list gets formatted appropriately?</db:para>
<db:para>A word processor or desktop publishing application addresses this problem using styles. You can create a style for each type of list formatting you want. A document-domain environment must make similar provision for different types of lists. However, the document domain deals with presentation (this is a list), not formatting (this paragraph starts with a bullet and a tab and is in 12pt New Century Schoolbook). So the question becomes, how may different kinds of list presentations do we need to support?</db:para>
<db:para>One obvious presentation difference between lists is that some express an ordered sequence of items while others present a collection of items with no necessary order to them (a rhetorical distinction). We generally format these as numbered and bulleted lists, respectively, but here we want to express the presentation difference – the rhetorical difference – not the formatting difference.</db:para>
<db:para>The common way to handle this is to create two different list structures, the ordered list and the unordered list. Different markup languages call them by different names – <db:indexterm><db:primary>ol</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>ol</db:secondary></db:indexterm><db:code>ol</db:code> and <db:indexterm><db:primary>ul</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>ul</db:secondary></db:indexterm><db:code>ul</db:code> in HTML, <db:indexterm><db:primary>orderedlist</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>orderedlist</db:secondary></db:indexterm><db:code>orderedlist</db:code> and <db:indexterm><db:primary>itemizedlist</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>itemizedlist</db:secondary></db:indexterm><db:code>itemizedlist</db:code> in DocBook, for example – but they are conceptually the same thing. (Thus the HTML example in <db:xref linkend="ex.html-list"/> is a little more specific than just being a list structure. It is an ordered list structure.)</db:para>
<db:para>The choice of the terms “unordered” and “ordered” is important, because those terms focus on the rhetorical properties of a list – whether the order of list items matters – rather than on its <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain properties – bullets or numbers.</db:para>
<db:para>Note that both the decision to create a list and the decision to use numbers, letters, or Roman numerals, have rhetorical aspects to them. It is not that rhetoric is absent from the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, but that the rhetorical intent is not recorded in the media domain, whereas some part of the rhetorical intent is recorded in the document domain, which allows us to factor rhetorically significant decisions about list numbering styles into the algorithm that processes document domain content into the media domain.</db:para>
<db:section>
<db:title>Context and structure</db:title>

<db:para>Does the need for separate ordered and unordered list objects imply that you need a separate document-domain list structure for every possible way you might format a list? No. In fact, that would be working in the media domain by proxy. When you work in the document domain, you think in terms of document structures, not formatting, which means that each document-domain object must make sense in the document domain, not the media domain. Otherwise, the partitioning falls apart.</db:para>
<db:para>For example, consider nested lists. Items in a nested list are formatted differently from the list that contains them. At a minimum, they are indented more, and they usually have different number or bullet styles. In the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, you would need a different style for each level. However, you don’t need a separate nested-list structure in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain. Instead, you express nesting by actually nesting one list inside another (expressing the rhetoical intent that they should be nested). For instance, in <db:xref linkend="ex.nested-list"/> one ordered list is nested inside another ordered list:</db:para>
<db:figure xml:id="ex.nested-list"><db:title>Nested list structure in HTML</db:title><db:programlisting language="HTML">
&lt;ol&gt;
    &lt;li&gt;
        &lt;p&gt;Dogs&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;Spot&lt;/li&gt;
            &lt;li&gt;Rover&lt;/li&gt;
            &lt;li&gt;Fang&lt;/li&gt;
            &lt;li&gt;Fluffy&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Cats&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;Mittens&lt;/li&gt;
            &lt;li&gt;Tobermory&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
&lt;/ol&gt;
</db:programlisting></db:figure>
<db:para>In the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain the inner and outer list are both identical <db:code>ol</db:code>/<db:code>li</db:code> structures. In the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, one will be formatted with Arabic numerals and the other with letters (see <db:xref linkend="ex.nested-list-rendered"/>).</db:para>
<db:figure xml:id="ex.nested-list-rendered"><db:title>Nested list rendered</db:title><db:orderedlist>
<db:listitem>
<db:para>Dogs</db:para>
<db:orderedlist>
<db:listitem>
<db:para>Spot</db:para>
</db:listitem>
<db:listitem>
<db:para>Rover</db:para>
</db:listitem>
<db:listitem>
<db:para>Fang</db:para>
</db:listitem>
<db:listitem>
<db:para>Fluffy</db:para>
</db:listitem>
</db:orderedlist>
</db:listitem>
<db:listitem>
<db:para>Cats</db:para>
<db:orderedlist>
<db:listitem>
<db:para>Mittens</db:para>
</db:listitem>
<db:listitem>
<db:para>Tobermory</db:para>
</db:listitem>
</db:orderedlist>
</db:listitem>
</db:orderedlist></db:figure>
<db:para>Both the inner and outer lists are ordered lists in the document domain, but in the media domain they are formatted differently based on context.</db:para>
<db:para>In this case, the algorithm that formats the page distinguishes the inner and outer lists by looking at their parents. For instance, <db:xref linkend="ex.nested-css"/> shows a CSS rule for a list item nested one deep:</db:para>
<db:figure xml:id="ex.nested-css"><db:title>CSS for nested list items</db:title><db:programlisting language="css">
ol&gt;li&gt;ol&gt;li
{
    list-style-type: lower-alpha;
}
</db:programlisting></db:figure>
<db:para>The ability to distinguish structures by context enables you to reduce the number of structures you need to define, particularly in the document and subject domains. It also allows you to name structures more logically and intuitively, since you can name them for what they are, what rhetorical role they play, not how they are to be formatted or for where they reside in the hierarchy of the document.</db:para>
<db:para>It also points out another important difference between the way media-domain and document-domain structured writing is usually implemented. The media domain almost always uses a flat structure with paragraphs, tables, etc., following each other in sequence. For instance, Microsoft Word constructs a nested list as a flat sequence of paragraphs with different styles. Inner and outer lists are expressed purely by the indent applied to the paragraphs. (Word tries to maintain auto-numbering across nested list structures, but it does not always get it right.)</db:para>
<db:para>Document-domain structures are usually implemented hierarchically. List items are <db:emphasis>inside</db:emphasis> lists. Nested lists are <db:emphasis>inside</db:emphasis> list items. Sections are <db:emphasis>inside</db:emphasis> chapters. Subsections are sections <db:emphasis>inside</db:emphasis> other sections. Where the media domain typically only has before and after relationships (except in tables), the document domain adds inside and outside relationships to the mix. This use of nested, rather than flat, structures helps to create context, which helps to reduce the number of different structures you need. Just as we saw with the basic list structure, nested structures help partition logical document structures.</db:para>
<db:para>Some <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain languages are more hierarchical than others. <db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>HTML</db:secondary></db:indexterm><db:indexterm><db:primary>HTML</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>HTML</db:secondary></db:indexterm>HTML is relatively flat. For example, it has six different heading styles: <db:indexterm><db:primary>H1</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>H1</db:secondary></db:indexterm><db:code>H1</db:code> through <db:indexterm><db:primary>H6</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>H6</db:secondary></db:indexterm><db:code>H6</db:code>. <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook, a widely used <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain structured writing language, is much more hierarchical and has only one element for the same purpose: <db:code>title</db:code>. However, DocBook’s <db:code>title</db:code> element can occur inside 84 different elements and, therefore, can potentially be formatted in 84 different ways based on context. In fact, it can be formatted in more ways than that, since some of the elements that contain titles can also be nested in other elements, creating a hierarchical structure that provides even more contexts.</db:para>
<db:para>There is a balance to be struck here. Hierarchical structures are harder to create and can be harder to understand. They may require you to find just the right place in a hierarchy to insert a new piece of content, which is more difficult than simply starting a new paragraph in a word processor. This introduces complexity, and you need to make sure you don’t introduce more complexity than you take away.</db:para>
</db:section>
<db:section>
<db:title>Constraining document structure</db:title>

<db:para>In addition to factoring out <db:indexterm><db:primary>media-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media-domain</db:secondary></db:indexterm>media-domain constraints, another important reason for working in the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain is to constrain how documents are structured (the rhetoric they use). For example, suppose you want to make sure that all graphics have a figure number, a title, and a caption. In the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain, you can make styles available for figure numbers, titles, and captions, but you can’t enforce a rule that says all graphics must have these elements. In the document domain, you can express these constraints. You can make it illegal to place an image element anywhere in the document structure except within a figure that has a title and caption. A structure to implement this constraint might look like <db:xref linkend="ex.figure-image"/>:</db:para>
<db:figure xml:id="ex.figure-image"><db:title>Document-domain structure for a figure</db:title><db:programlisting language="SAM">
figure:
    title: Cute kitty
    caption: This is a cute kitten.
    image: images/cute.jpg
</db:programlisting></db:figure>
<db:para>If the only way to include an image is to use the image element, and you only allow the image element inside the figure element, and you require the figure element to contain the title and the caption elements, then the writer can’t add a graphic without a figure, title, and caption. A document without these elements would be rejected by the <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conformance checks (see <db:xref linkend="chapter.conformance"/>).</db:para>
<db:para>In the case of <db:code>list</db:code> structures we saw that the <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain allows the writer to capture something of their rhetorical intent. Here we takes things a step further. This markup is not merely allowing the writer to express their rhetorical intent, it is constraining their rhetorical choices.</db:para>
<db:para>The list object simply says, if you want to create a list, don’t bother about formatting, just say it is a list and leave the formatting to the formatting algorithm. It does not force the writer to create a list in any particular location, it merely provides a higher-level tool for creating lists without having to worry about how they are formatted. The rhetorical choice to create a list or not remains entirely with the writer.</db:para>
<db:para>But the figure object is introducing a requirement, a constraint. It say, if you want to insert an image, you have to supply a title and a caption. These are rhetorical choices over which the writer now has no control. They can decide to insert an image or not, but they cannot decide to insert an image without a title and a caption. Thus the organization can impose a consistent rhetoric for images across all their content.</db:para>
<db:para>Let’s look at another example. A bibliography is a document structure for listing works cited in a document. It generally consists of the heading “Bibliography” followed by a set of paragraphs listing the cited works. In the media domain, you can easily create such a structure. It is just a sequence of paragraphs with some bold and italic formatting for author names, book titles, etc.</db:para>
<db:para>In your media-domain stylesheet, you may have some character styles for things like <db:code>author-name</db:code> or <db:code>book-title</db:code>. You may even have a paragraph style for bibliography entries, but you typically don’t have much more specific support.</db:para>
<db:para>But these few styles can’t cover all the rules a publisher or organization places on the rhetoric of bibliographies. Writers are generally required to follow rules that detail how to handle titles, author names, and so forth. These constraints are not enforced by media-domain styles. Writers have to learn and follow these constraints themselves. If you want to remove these decisions from the writer (and thus achieve rhetorical consistency among all writers), you need a document-domain structure for a bibliography. <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook has one (see <db:xref linkend="ex.bib-docbook"/>).</db:para>
<db:figure xml:id="ex.bib-docbook"><db:title>DocBook bibliography entry</db:title><db:programlisting language="docbook">
&lt;biblioentry id="bib.xsltrec"&gt;
  &lt;abbrev id="bib.xsltrec.abbrev"&gt;REC-XSLT&lt;/abbrev&gt;   
  &lt;editor&gt;
     &lt;firstname&gt;James&lt;/firstname&gt;
     &lt;surname&gt;Clark&lt;/surname&gt;
  &lt;/editor&gt;
  &lt;title&gt;
    &lt;ulink url="http://www.w3.org/TR/xslt"&gt;XSL Transformations
    (XSLT) Version 1.0&lt;/ulink&gt;
  &lt;/title&gt;
  &lt;publishername&gt;W3C Recommendation&lt;/publishername&gt;
  &lt;pubdate&gt;16 November 1999&lt;/pubdate&gt;
&lt;/biblioentry&gt;
</db:programlisting></db:figure>
<db:para><db:xref linkend="ex.bib-docbook"/> is in XML, which can be hard to read, so here (<db:xref linkend="ex.bib-sam"/>) is the same structure using the markup notation have used in earlier examples.</db:para>
<db:figure xml:id="ex.bib-sam"><db:title>Bibliography entry using simpler markup</db:title><db:programlisting language="SAM">
biblioentry:(#bib.xslttrec)
    abbrev:(#bib.xsltrec.abbrev) REC-XSLT
    editor:
        firstname: James 
        surname: Clark
    title: XSL Transformations (XSLT) Version 1.0
    publishername: W3C Recommendation
    pubdate: 16 November 1999
</db:programlisting></db:figure>
<db:para>This structure does not just constrain how bibliography entries are presented and formatted, it also factors out many of those constraints by breaking down the components of a bibliography entry into separate labeled fields. Given a <db:indexterm><db:primary>biblioentry</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>biblioentry</db:secondary></db:indexterm><db:code>biblioentry</db:code> structure like this, you could create an algorithm to present and format a bibliography entry almost any way you wanted to. This structure not only partitions the formatting of the bibliography from the presentation of the bibliography, it also partitions the presentation from the underlying bibliographical data. This means you could write an algorithm to extract bibliography information from a document by looking for <db:indexterm><db:primary>biblioentry</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>biblioentry</db:secondary></db:indexterm><db:code>biblioentry</db:code> structures and extracting the desired information from them. For instance, if you want to build a list of authors cited in the document, you could do so by searching the <db:indexterm><db:primary>biblioentry</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>biblioentry</db:secondary></db:indexterm><db:code>biblioentry</db:code> records and extracting the name of the authors from the structures that record them in the bibliography structure.</db:para>
<db:para>Bibliographies are an interesting piece of structure because while the bibliography is a standard document structure, and therefore part of the document domain, it is also specific to a particular subject: books and periodicals. When we break down the bibliography structure into a set of data fields, we are actually factoring out the rhetoric of a bibliography entry – the decisions about the order and construction of each entry – and capturing subject data that could be used to construct different styles of bibliography. This means that this our bibliography entry is also in the subject domain. It is time, therefore, to look at the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain in more detail.</db:para>
<db:indexterm class="endofrange" startref="idp38568564"/><db:indexterm class="endofrange" startref="idp38565492"/><db:indexterm class="endofrange" startref="idp38561652"/><db:indexterm class="endofrange" startref="idp38568564x"/><db:indexterm class="endofrange" startref="idp38565492x"/><db:indexterm class="endofrange" startref="idp38561652x"/></db:section>
</db:chapter>
