<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0">
<db:title>Tables</db:title>

<db:para>Tables represent one of the hardest problems in structured writing. Essentially, they are a media domain artifact. Yet we often want to single source material that contains tables, meaning that we have to write it in the document domain or the subject domain.</db:para>
<db:para>Writing tables in the document domain is challenging because you do not know how they are going to be paginated. Creating a table in a word processor or desktop publishing program is relatively straightforward because you can see exactly how the table is paginating as you write. But if you work in the document domain, even in an WYSIWYG editor, you don’t see what final pagination will be, in any of the media in which the content may be published.</db:para>
<db:para>We commented that in the publishing algorithm certain aspects of pagination have to be left to an algorithm, and that algorithms may not always see an ugly break or have the same options to fix one as a human writer might have. This becomes doubly so for tables. Not only do you have to worry about breaks between pages, you have to worry about the cells fitting the page of view port and what happens to the text inside the cells. You have to worry about how wide each cell should be and decide if that is something the writer should specify or if it should be left to the algorithm.</db:para>
<db:para>As with paginating text, you can give hints to the algorithm to help it paginate the table. For regular text you might tell the algorithm to keep a title with the paragraph that follows it. But giving hints on how to paginate a table is more complicated.</db:para>
<db:para>It gets worse if you decide you want to do complicated things like spanning rows or columns in a table.</db:para>
<db:para>We should note that for years, it was common practice in HTML to use tables to lay out Web pages. This is highly discouraged now, because it makes it difficult, if not impossible, to do a responsive web design (a design that will adjust itself to fit better on different sizes of screen). In a responsive design, you may want to present content in three columns on a standard computer monitor, but in one column on a phone. This involves moving around the elements that were in the three columns and repositioning them in one column.</db:para>
<db:para>To accomplish this, you have to implement the <annotation type="term">formatting algorithm</annotation> in the web browser and execute it when the reader loads the content into their device. This means that the content has to be given to the browser in the document domain. But it has to use document domain structures that allow it to be moved around on the fly, which means that it can’t be in tables, which prescribe a fixed vertical and horizontal orientation between content in different cells.</db:para>
<db:para>For setting up a responsive web page, you can use <annotation type="element" namespace="HTML">div</annotation> in HTML with class attributes and CSS to do the positioning. In this case <annotation type="element" namespace="HTML">div</annotation> represents a abstraction in the document domain. One of the ways that we deal with this class of problem in the document domain is by creating more abstract document domain objects.</db:para>
<db:para>But using <annotation type="element" namespace="HTML">div</annotation> won’t help with the more general table problem of associating a bit of content with a label, or, in many tables, two labels, representing two axes with the content at the intersection. The only reliable way to solve this problem is to explicitly state the association between the content an its labels, something that usually involves moving the content into the subject domain. (Why is this the only reliable way? If you look at a specific table, it may be clear what the labels are and which content is associated with them. But that is because we can understand the semantics of the content itself and perceive the relationship. Another table, using an identical document domain table structures, might not express the same semantics at all. There is no way for a presentation algorithm to reliably interpret the table in the same way we can. Structured writing requires that such relationships be explicitly recorded so that we can write simple algorithms that can interpret them reliably.</db:para>
<db:para>Tables are a particular problem for the document domain. Regular text is one dimensional – it is just a string of words than can fairly easily be wrapped to fit in rows on a display of page of almost any size. Tables are two dimensional objects. They don’t have to have a set height or width, either for the table as a whole or for the individual cells, but to be readable they do need to fit enough words into a cell and enough cells onto the screen/page to be readable. But making text readable on a given screen/page size is a media domain problem. How do you solve it in the document domain without throwing the author back into the media domain, and without creating content that will not fit properly in some future media?</db:para>
<db:para>The problem with tables is that they prescribe a fixed horizontal and vertical orientation of one cell relative to other cells. This orientation associates the content of a cell with other information. Either it associates it with a label in a heading row or column, or it simply groups with with other similar values (leaving it to the reader to intuit the label). The problem is that this relationship between the content and its label is only expressed through this orientation, and in most document domain markup, there isn’t even a formal association that says definitively, “this is the label that applies to this content”. In other words, once the content is presented in a table in the document domain, the only completely reliable way to format it in the media domain is as a table with the same orientation of cells, whether that fits well onto the page or not.</db:para>
</db:chapter>
