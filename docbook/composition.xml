<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.composition">
<db:title>Composition</db:title>

<db:para>A major source of complexity in content reuse is the need to write pieces of content that will work when combined with other pieces to form a larger work. This is the composition problem. But the composition problem does not only occur in reuse scenarios. It can also occur in any situation in which you want multiple writers to contribute to a single work. In these scenarios, you have partitioned the writing of certain pieces of content so that they occur only once, and so that, presumably, they are written by the person best qualified to write them.</db:para>
<db:para>But as we have noted before, successful partitioning requires that sufficient information be passed between the partitions so that each can do its own work completely without any complexity being dropped. When a writing task is divided among many authors, we need to make sure that their individual pieces will come together to form a coherent whole. The definition of what constitutes a coherent whole may vary. A collection of Every Page is Page One topics organized as a hypertext has a different definition of what constitutes a coherent whole than does a printed product manual designed to be read in linear order. But whatever the criteria, we have to make sure they are met in order to distribute authoring or practice reuse without allowing elements of complexity to fall through to the reader.</db:para>
<db:para>The composition algorithm deals with the problem of composing a larger work out of smaller pieces. Many traditional writing tools produce files that are meant to encompass a whole work. If you take two Word files, for example, or two FrameMaker files and simply join them together, the result will not be a document that is the combination of the two files, it will be a corrupt file that will not open.</db:para>
<db:para>Both Word and FrameMaker have features that allow you to compose Word and FrameMaker documents out of smaller pieces. To a limited extent, they may even allow you to compose documents out of files other than their own. Some systems are specifically designed to allow you to compose document from many different source files. In many cases, though, some cleanup is required before the imported files can be used, particularly if they contain media domain formatting information. This cleanup requirement means that this is usually a one time import. You can’t keep editing the original files and have the changes immediately reflected in the importing system.</db:para>
<db:para>Organizations that require a high degree of composability, therfore, have often turned to structured writing for solutions to the composability problem.</db:para>
<db:para>There are several parts to the composability problem, each of which structured writing helps address in different ways.</db:para>
<db:section>
<db:title>Fundamental composability</db:title>
<db:para>The first requirement of composability is that you must actually be able to combine the pieces. Most structured writing formats consist of a hierarchy of structures. Those structures tend to be self similar in form. For instance, all structures in an XML document are composed of XML elements. This means that you can take an XML document apart at any point in the structural hierarchy and insert, remove, or rearrange the structures at that level. To compose a larger structure out of smaller structures, you simply wrap new elements around them. Thus XML, and many other structured writing formats, provide a fundamental composability often lacking in other formats.</db:para>
</db:section>
<db:section>
<db:title>Structural composability</db:title>
<db:para>The second requirement of composability is that the result of combining markup structures must be a valid document (must conform to the appropriate constraints for that document). The simplest way to assure this it to plan all of your pieces to fit the constraints of the documents they will be inserted into. The most obvious way to do this it to make sure that all of your pieces come from the same markup language. Thus DITA has good support for structural composability, but only for sources that are themselves DITA.</db:para>
<db:para>But belonging to the same markup language is not enough. markup language constrain where certain structures can occur and you must also make sure that the pieces go into a place where they are structurally allowed in that language. Just because all the pieces come from the same languages does not mean that every possible combination results in a valid document. Thus you cannot insert a DITA <db:code>steps</db:code> structure into a DITA concept or reference topic because <db:code>steps</db:code> are not permitted in those topic types. This requires planning and careful management to make sure the combinations you create are valid.</db:para>
<db:para>However, it is not essential to composability that all the pieces you want to combine come from the same language as the document you are composing. You can also take content from different sources and with different structures, as long as you can transform their structures on input to match the structures of the destination document. This can be a very powerful technique. For instance, you can use it to compose documents from content in a database. (Indeed, all database reporting systems are exactly this: systems that compose documents in one format from tabular data in another format.) Structural composability depends on the semantic equivalence of structures, not common syntax.</db:para>
<db:para>For this approach to work, however, it is important that all of the sources you draw from have a high level of conformance to their own constraints. If you don’t know, or cannot rely on, the structure of the pieces you are drawing in, you cannot reliably combine them with an algorithm. Thus it is often better to focus on strategies for getting the most reliable sources rather that forcing everyone into a common format that they might not use reliably. For more on this, see <db:xref linkend="chapter.conformance"/>.</db:para>
</db:section>
<db:section>
<db:title>Stylistic composability</db:title>
<db:para>While structural composability is vital, it is not always sufficient. You could have pieces in a media domain language that are structurally composable but formatted differently. The resulting document would be valid and would publish successfully, but it would be a mess of competing styles and fonts.</db:para>
<db:para>For practical purposes, then, you should not try to create composable content in the media domain. You should at least use the document domain. The document domain separates content from formatting so you can compose a document in the document domain and then apply consistent formatting to the result.</db:para>
<db:para>This is true even if the pieces are in different document domain languages. All document domain languages essentially describe the same set of abstract document structures – document are documents after all, they all have the same basic features which all document domain languages seek to represent. As long as you can recognize the same basic features in each of the source languages, you can compose a document from pieces in different document domain languages by converting to a common output language. (Embedded management-domain markup may spoil the party, however, since there is not the same level of semantic equivalence between management system. For this reason you generally want to do composition after the resolution of management-domain structures, unless those structures are actually doing composition themselves.)</db:para>
</db:section>
<db:section>
<db:title>Narrative composability</db:title>
<db:para>Even if you can assemble pieces from different document domain sources and format them all with a single consistent look, that does not mean that the result will be a complete, correct, coherent narrative. To create a coherent narrative, you need to ensure narrative composability.</db:para>
<db:para>This is not necessarily a matter of making the document sound like it came from a single person. Many business documents are the result of several different writers, sometimes working together, sometimes inheriting and maintaining a document over time. Truly making such a document sound like it was all written by one person is a tall order and usually not necessary to achieve its business purpose.</db:para>
<db:para>What does matter is that the document be cohesive and coherent. The terminology it uses should be consistent from beginning to end. The end should flow logically from the middle and the middle from the beginning. There should not be obvious duplications of content nor omissions (obvious or not). This clearly requires a number of constraints on the content affecting both composition and style.</db:para>
<db:para>There are a couple of approaches to narrative composability. One is the information typing approach that you find in systems like DITA or Information Mapping. In this approach, content is broken down into certain broad types such as procedure, process, principle, concept, structure, and fact (Information Mapping) or task, concept, and reference (DITA – though DITA allows you to define others though specialization.) The idea here is that if you keep reference information in a separate chunk from a concept, for instance, the chunks will compose more reliably, since there will not be duplicate concept information in a reference chunk. (For more on these mechanisms, see <db:xref linkend="chapter.heavyweight"/>.)</db:para>
<db:para>The difficulty with this approach is that these abstract categories don’t always make a lot of sense to writers when they are writing about concrete subjects, and different writers may interpret the chunk types or their boundaries differently, resulting in material that does not compose as well as you might hope.</db:para>
<db:para>Also, this approach, while it has been shown to improve the quality of writing in some cases, can also impose an artificial clunkiness and lack of flow on the content, leaving it feeling choppy or disjointed.</db:para>
<db:para>And, if one of your aims is to impose a specific rhetorical style or structure for particular kinds of content, any composition that you do needs to be subject to the same rhetorical constraints as if the piece had been written as a whole. This is often difficult to achieve, not least because it is often difficult to authors to write material that conforms to a rhetorical structure when they can’t see the whole structure.</db:para>
<db:para>The other approach to narrative composability is to move content to the subject domain. A subject domain structure for a particular subject does not have to be structured as a collection of abstract chunk types. The structure is highly specific to the subject matter at hand and is therefore much more concrete and less susceptible to varying interpretation by writers. Also, you can use the subject domain to factor out many of the style issue that might otherwise compromise composability. (This is just like factoring out formatting issues by moving from the media domain to the document domain.) A narrative can then be composed algorithmically by arranging well-identifies pieces of information in a predetermined order.)</db:para>
<db:para>Of course, not all material fits into obvious strongly typed subject domain structures. Content that is more conceptual or theoretical in nature does not have a strong subject domain structure because it does not approach it subject matter in such a systematic or regular way. Then again, the ability to compose such content out of existing pieces is limited anyway. By its very nature such content requires a continuous flow of exposition that is very hard to assemble from pre-written chunks.</db:para>
</db:section>
</db:chapter>
