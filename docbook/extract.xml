<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.extract"><db:title>Extract</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idp1477140068"><db:primary>extract</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idp1477140068x"><db:primary>algorithm</db:primary><db:secondary>extract</db:secondary></db:indexterm>




<db:para>A great deal of the content we produce, particularly technical and business content, is essentially a report in human language on the specific features of a product, process, or data set. Much of the data that defines those things is contained in some kind of formal data set, such as a database or software source code.</db:para>
<db:para>In a traditional approach to publishing, researching and extracting that data and then recreating it as content that a reader can use is complex and requires a large amount of work from writers. And then, writers must keep that content in sync with the original source.</db:para>
<db:para>The source data for those systems is, in effect, subject-domain content for those products, processes, and data sets. Rather than researching and recreating that content, you can use structured writing techniques to extract information from those sources and create or validate content. This process is a form of <db:indexterm><db:primary>content generation algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content generation algorithm</db:secondary></db:indexterm>content generation based on externally sourced data. It partitions and redirects the complexity of dealing with these sources away from writers and towards information architects and content engineers who create algorithms that extract the data and generate content from it.</db:para>
<db:section><db:title>Tapping external sources of content</db:title>


<db:para>I have talked throughout this book about moving content from the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain to the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain and from the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain to the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain. I have described the advantages of creating content in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain and looked at the processing algorithms that use <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content to produce various kinds of publications in different media.</db:para>
<db:para>Subject-domain content is created and annotated in structures that are based on the subject matter rather than on the structure of documents or media. Subject-domain structures tell you what the content is about rather than how it should be published. You can, therefore, write algorithms that process content based on what it is about rather than how it is presented. This allows you to transfer and delay decisions about presentation and formatting and to have algorithms make those decisions based on the <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain markup.</db:para>
<db:para>Any data source that is contained in <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structures is a source of subject-domain content, regardless of whether or not that source was created with the expectation that it would be used to produce content. This includes virtually all databases and quite a bit of software code. It also includes all authored content (under an appropriate license) that contains usable and accessible subject-domain structures or annotations. All of this is potential material for generating content. As such, the extract algorithm can work effectively with many of the other structured writing algorithms.</db:para>
<db:para>As a source of <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content, the extract algorithm also naturally <db:indexterm><db:primary>separates content from formatting</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>separates content from formatting</db:secondary></db:indexterm>separates content from formatting and contributes to the <db:indexterm><db:primary>differential single sourcing algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>differential single sourcing algorithm</db:secondary></db:indexterm>differential single sourcing algorithm.</db:para>
<db:para>By tapping existing information to build content, the extract algorithm also works hand in hand with the <db:indexterm><db:primary>content reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>content reuse algorithm</db:secondary></db:indexterm>content reuse algorithm. In fact, it is really the highest expression of reuse, since it reuses content not only in the content system but also from the organization at large or even beyond the organization, which further reduces duplication within the organization.</db:para>
<db:para>Because the extract algorithm taps directly into external sources of information, it is also a great source of information for content auditing (which I discuss in <db:xref linkend="chapter.audit"/>). At one level, it provides a canonical source of information to validate existing content against. At another level, it factors out part of the conformance problem from the authoring function. It transfers the entire responsibility for maintaining information to the creators of the source you are extracting content from, which is a responsibility they already have.</db:para>
</db:section>
<db:section><db:title>Extracting information created for other purposes</db:title>


<db:para>There is nothing new, of course, about generating content from database records. Database reporting is an important and sophisticated field in its own right, and it would be entirely correct to characterize it as a type of structured writing. What sets it apart from other structured writing practices is that the databases it reports on serve other business purposes besides being sources of content. An insurance company policy database, for instance, may be used to publish custom benefit booklets for plan participants, but it is also used for processing claims. The design of the structures and data entry interfaces of these systems tends to fall outside the realm (and the notice) of writers and authoring system designers.</db:para>
<db:para>This is a pity, because organizations often develop separate processes, tools, and repositories for content creation that duplicate information that is already contained in databases that are researched, validated, recorded, and managed independently. Rather than treating code and databases as sources of content, writers treat them as research sources. They look up information in these sources, write content to describe the information from those sources, and then store that content in a separate repository.</db:para>
<db:para>The essence of the problem is that many content organizations choose to work in the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain or the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain and have neither the tools not the expertise to bridge the gap to all this material already available in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain. But even when content organizations extend their efforts into the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, they often don’t realize that the <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content they plan to create already exists in the systems of another department.</db:para>
<db:para>Another drawback is that content produced from these other systems – for instance, from a database reporting system – exists in isolation from the rest of the content produced by the organization. Such content can often be quite sophisticated and beautifully formatted and published. But it is the product of an entire structured publishing chain that has to be separately developed and maintained.</db:para>
<db:para>In the field of software documentation you can see the same pattern with programming language API documentation. Much of the material of an API reference guide is a description of each function, what information is required as input (its parameters or arguments), the information it produces as output, and the errors or exceptions it can generate. All of this information already exists in the code that implements the function.</db:para>
<db:para><db:indexterm><db:primary>API documentation tool</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>API documentation tool</db:secondary></db:indexterm>API documentation tools such as <annotation type="markup-language">JavaDoc</annotation> or <db:indexterm><db:primary>Sphinx</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>Sphinx</db:secondary></db:indexterm>Sphinx extract this information from code and comments and turn it into publishable content. This is an application of subject-domain structured writing, and these API documentation tools implement an entire structured publishing system that produces final output, often in multiple formats.</db:para>
<db:para>And here you see the same problems again:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An entire publishing chain is maintained separately from the main content publishing chain.</db:para>
</db:listitem>
<db:listitem>
<db:para>The content produced from this publishing chain is isolated from all the other content produced by the organization.</db:para>
</db:listitem>
<db:listitem>
<db:para>Much of the same information gets re-created in the form of programming guides or knowledge base articles and maintained in a separate repository using a separate tool chain.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>There are other cases of entirely separate publishing chains producing information that is isolated from the rest of an organization’s content. Technical support organizations create knowledge bases to answer commonly asked questions. The material in these knowledge bases is technical communication, plain and simple, yet it usually exists in isolation from the product documentation set, even to the extent that users may not be able to search both the documentation and the knowledge base from the same search box. Most users, however, have no way of guessing whether the answers they are looking for are in the documentation, the support knowledge base, or a users’ forum (yet another independent publishing system).</db:para>
<db:para>You can address these redundancies and the isolation that goes with them in two ways. One approach is to attempt to unify all content authoring and production in a single enterprise-wide system, often with a single set of content structures intended for use across all departments. However, this is expensive and disruptive, and it tends to create interfaces and structures that are less usable and less specific to your business functions than the ones they replace.</db:para>
<db:para>This approach also ignores the local complexity of individual groups and subject matter, which means that complexity gets shoved downstream, eventually, to the reader. And many of these systems exist for purposes other than generating content, which means they have subject-domain structures specific to, and required for, the database or software functions they were built for.</db:para>
<db:para>The second approach is to leave the subject-domain systems in place (and perhaps create more of them) and feed their output into a common <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain publishing tool chain. The <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>publishing algorithm</db:secondary></db:indexterm>publishing algorithm normally passes <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content through the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain on its way to <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media-domain publication. <db:indexterm><db:primary>Subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>Subject-domain</db:secondary></db:indexterm>Subject-domain content, by its nature, is not strongly tied to a particular <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain structure, so integrating many sources of <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content into a single publishing chain is not particularly onerous. The <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management-domain features of some tool chains make things more complicated, but since the subject domain  factors out a lot of the management domain, this is not an insurmountable problem.</db:para>
<db:para>Most enterprise-wide content systems are based on <db:indexterm><db:primary>document-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document-domain</db:secondary></db:indexterm>document-domain languages. After all, there is no way to create a single enterprise-wide <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain system, since an enterprise creates content on many subjects for many audiences. In principle, a document-domain system should be capable of integrating content from domain-specific subject-domain systems.  Unfortunately, neither subject-domain systems nor enterprise content systems are commonly designed with this kind of integration in mind.</db:para>
<db:para>Because of this, you sometimes have to find ways to extract content from these sources and feed them into a unified publishing chain. This creates the need for <db:indexterm><db:primary>extract algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>extract algorithm</db:secondary></db:indexterm>extraction algorithms.</db:para>
<db:para>A common example of the <db:indexterm><db:primary>extract algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>extract algorithm</db:secondary></db:indexterm>extraction algorithm is found in API documentation tools such as <annotation type="markup-language">JavaDoc</annotation>. These tools parse application source code to pull out information such as the names of functions, parameters, and return values, which they use to create reference documentation (or at least an outline). These tools generate a human language translation of what the computer language code says.</db:para>
<db:para>How the extraction algorithm works depends on how the source data is structured, but it usually creates output in the subject domain that clearly labels the pieces of information it has culled from the source. For instance, a <db:indexterm><db:primary>Java</db:primary></db:indexterm><db:indexterm><db:primary>programming-language</db:primary><db:secondary>Java</db:secondary></db:indexterm>Java function definition is a piece of structured content in which the role and meaning of each element can be determined from the grammar of the <db:indexterm><db:primary>Java</db:primary></db:indexterm><db:indexterm><db:primary>programming-language</db:primary><db:secondary>Java</db:secondary></db:indexterm>Java language (see <db:xref linkend="fig.java-function-example"/>).</db:para>
<db:figure xml:id="fig.java-function-example"><db:title>The syntax of a Java function definition</db:title><db:programlisting language="java">
boolean isValidMove(int theFromFile, 
                    int theFromRank, 
                    int theToFile, 
                    int theToRank) {
        // ...body
    }
</db:programlisting></db:figure>
<db:para>The same information can be extracted by an algorithm that knows the grammar of <db:indexterm><db:primary>Java</db:primary></db:indexterm><db:indexterm><db:primary>programming-language</db:primary><db:secondary>Java</db:secondary></db:indexterm>Java to produce something that looks more like <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain content (see <db:xref linkend="fig.java-function-subject-domain"/>):</db:para>
<db:figure xml:id="fig.java-function-subject-domain"><db:title>Subject-domain rendering of a Java function definition</db:title><db:programlisting language="sam">
java-function:
    name: isValidMove
    return-type: boolean
    parameters:: type, name
        int, theFromFile
        int, theFromRank
        int, theToFile
        int, theToRank
</db:programlisting></db:figure>
<db:para><db:xref linkend="fig.java-function-subject-domain"/> contains the same information as <db:xref linkend="fig.java-function-example"/>, but in a different structure. In this structure, however, the information can be easily accessed and processed through the publishing tool chain like any other content.</db:para>
<db:para>Any structured data source that consistently expresses the semantics of its data can be a source of subject-domain content. You just need to find a way to get at it.</db:para>
</db:section>
<db:section><db:title>The diversity of sources</db:title>


<db:para>When it comes to drawing content from diverse sources, the term <db:indexterm><db:primary>single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>single sourcing</db:secondary></db:indexterm>single sourcing can be misleading, because it can lead you to think that all source content is kept in a single place. Some vendors of content management systems would like to encourage this interpretation, but a better definition is that each piece of information comes from a single source. That is, there may be many sources, each containing different pieces of information, but each piece of information comes from only one source.</db:para>
<db:para>Ensuring that you store content only once means making sure that both the information and the repository that contains it meet an appropriate set of constraints. The constraints that establish the uniqueness of a piece of content are different for different types of content and different subject matter, so such constraints are best expressed and enforced by systems that are designed for a particular type of content and subject matter.</db:para>
<db:para>This is not to say that consolidation and standardization of sources is never appropriate. Often two departments will store substantially the same information with trivial differences in how it is structured and expressed. Combining the information from both departments into one source, or at least standardizing the way each department structures and expresses its data, makes data exchange simpler and more reliable. Most organizations have all kinds of isolated and ad hoc information that could potentially be managed much more efficiently and be more easily accessible with a degree of rationalization and centralization. But it does not follow that absolute centralization of all data into a single system or a single data model is appropriate, useful, or even possible.</db:para>
<db:para>The best way to ensure that information is stored only once is to store each type of information in a system with the right constraints and the right processes for the people who create and manage that information. By tightly constraining each source, you prevent it from accidentally accepting information that should be stored in another system. By contrast, a single central system that is loosely constrained may end up accepting many copies of the same information because neither the system nor the users can detect the duplication.</db:para>
<db:para>Preserving many tightly constrained information systems that serve the needs of different departments may mean that an integrated publishing system will have to draw from diverse sources of information and content. Therefore, the ability to extract content from these sources and merge it with other content for publication is central to effectively partitioning complexity and eliminating duplication and error.</db:para>
<db:para>Of course, a system that relies on drawing content from many different sources, even if all those sources are well-constrained and well-managed  introduces a lot of integration and maintenance complexity. Remember that the point of the exercise is to minimize the overall amount of unmanaged complexity in the system. Integrated systems can manage complexity in sophisticated ways, but they also introduce complexity that has to be factored into the calculation. Sometimes it may be less complex and less costly to allow some duplication of information between systems rather than try to manage the complex relationships required to eliminate all duplication. Sometimes the optimal solution is less than total integration.</db:para>
<db:indexterm class="endofrange" startref="idp1477140068"/><db:indexterm class="endofrange" startref="idp1477140068x"/></db:section>
</db:chapter>
