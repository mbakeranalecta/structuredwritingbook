<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.architecture"><db:title>Information Architecture</db:title><db:indexterm class="startofrange" significance="preferred" xml:id="idm1887111580"><db:primary>information architecture</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1887111580x"><db:primary>concept</db:primary><db:secondary>information architecture</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idm1887117084"><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1887117084x"><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm><db:indexterm class="startofrange" significance="preferred" xml:id="idm1887112988"><db:primary>top-down information architecture</db:primary></db:indexterm><db:indexterm class="startofrange" xml:id="idm1887112988x"><db:primary>concept</db:primary><db:secondary>top-down information architecture</db:secondary></db:indexterm>



<db:para>The overall goal of a content process it to create an effective information architecture. Information architecture is the arrangement of useful and effective content so that it can be found and navigated. An artful arrangement of awful content is of no good to anyone; information architecture is about both rhetoric and navigation.</db:para>
<db:para>The navigational aspects of information architecture deserve our particular attention, however. Artful content that on one can find does no good either. So far we have spoken about structured writing as a method for partitioning the complexity so that none of that complexity falls through to the reader. But finding the content you need is part of the complexity of the reader’s task, and information architecture is an attempt to transfer some of the complexity of information finding from the reader to the content provider.</db:para>
<db:para>But this dual nature of information architecture is often neglected. It is all too easy to think of it simply in terms of organizing things, but that can be a trap. An institution with a lot of content has its internal information finding problems to deal with, and often information architecture becomes an exercise in organizing the content for the convenience of the institution rather than the reader.</db:para>
<db:para>It is easy to think that organization is an absolute. Content is either organized or not. But this is not so. Organization is an orientation of content according to our knowledge and expectations. Things are organized for us if their location, or the means of retrieving them, match what we expect and know. But what the institution (and its staff) knows and expects is very different from what the reader knows and expects. What is organization for the institution can be chaos for the reader.</db:para>
<db:para>More than this, unless content follows an organizational scheme that the reader is already familiar with, or at least makes intuitive sense in terms of what they expect and know, few readers will be likely to spend much mental energy on trying to figure out a complex organizational scheme, even one that was designed with them in mind. Instead, they will <db:indexterm><db:primary>information foraging</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>information foraging</db:secondary></db:indexterm>forage for information, which, in the Web world, means that they will use search and will follow links as long as they believe that the scent of the information they are looking for is growing stronger. (We discussed <db:indexterm><db:primary>information foraging</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>information foraging</db:secondary></db:indexterm>information foraging in <db:xref linkend="chapter.linking"/>. For a more in-depth treatment of <db:indexterm><db:primary>information foraging</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>information foraging</db:secondary></db:indexterm>information foraging and it implications for <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture, see <db:indexterm><db:primary>Every Page is Page One: Topic-based writing for Technical Communication and the Web</db:primary></db:indexterm><db:indexterm><db:primary>citetitle</db:primary><db:secondary>Every Page is Page One: Topic-based writing for Technical Communication and the Web</db:secondary></db:indexterm><db:citetitle>Every Page is Page One: Topic-based writing for Technical Communication and the Web</db:citetitle>.)</db:para>
<db:para>It is a mistake, therefore, to think of information architecture simply in terms of organization. A building supply store organizes building materials. An architect takes those materials and uses them to construct a navigable edifice full of useful spaces with efficient passages between them. The organization and standardization of materials provided by the building supply store is highly important to the architect in their work, but organization and standardization are just starting points for the unique and useful edifice that the architect will design and build.</db:para>
<db:para>And for this reason, content auqality is indispensible to informaton architecture. You can have good organization of bad material, but you cannot build a good edifice of bad material. The architect is concerned as much with the quality of their materials as they are with the design which integrates them. One does not work without the other. Information architecture is not, therefore, a wrapper around content, it is the union of rhetoric and navigation in a single discipline.</db:para>
<db:para>If there is a temptation to regard information architecture as merely a form of organization, its origins may lie in the past. For centuries, the basic unit of information was the book and the “architecture” of the book was an integral part of the responsibility of the writer and editor. Larger sets of information were created by collecting and organizing books and that was the responsibility of the librarian or bookseller.</db:para>
<db:para>Those larger collections were simply forms of organization. If there was an architecture at that scale it was in the expertise of the librarian or book seller to make inferences from the client’s needs and create useful connections.</db:para>
<db:para>With the advent of online media, first in the form of large capacity electronic media such as CD-ROMs and then the <db:indexterm><db:primary>Internet</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>Internet</db:secondary></db:indexterm>Internet and the <db:indexterm><db:primary>Web</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>Web</db:secondary></db:indexterm>Web, this division of responsibilities was overthrown. The basic unit of information in electronic media is not the book but the page. Thanks to <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext linking, the relationships between pages in electronic media are much more complex than on paper. Information architecture is a response to this challenge.</db:para>
<db:para>Information architect, therefore, is not merely a new name for librarian, but the integration of roles that were formerly divided, or, rather, the result of a very different partitioning of roles in the content process. I have spoken several times about partitioning certain forms of content complexity away from writers and directing it to information architects, but now we see that this is not just about relieving writers of a burden, it is also about giving the information architect the visibility into and control over rhetoric that they need to do their job. By no means does this transfer all control of rhetoric from writer to information architect, for the information architect does not have the intimate knowledge of the subject matter to define rhetorical best practices for every type of content. Rather it means that writer and information architect must work together to define and implement those best practices.</db:para>
<db:para>Another way in which things are different today is that the architecture of online media has to account for the ability to add, modify, and delete individual bits of content at any time. It is possible to think of book or library architectures in largely static terms. It is a serious mistake to think of Web architectures as static.</db:para>
<db:para>This leads to the development of architectures of much smaller units with much more complex relationships to a much larger, more diverse, and more rapidly changing set of resources. These architectures include not only text and static graphics but active media: videos, animation, and dynamic feeds and information widgets. Given these factors, the old separation of roles between writer and librarian no longer works. Unless we find a way to partition the responsibility away from them, writers now have to be much more conscious of how their pages interact with other pages in the collection, including those created by others. The scale at which these small pieces of content relate with each other is much greater than the scale at which the pieces of a book related to each other. This constitutes a significant increase in complexity (more, and more difficult, decisions requiring greater knowledge or skill) and calls for a whole new approach to information architecture, and for the appearance of a function and a role that had no equivalent in the paper world.</db:para>
<db:para>However, information architecture still needs to support paper delivery of content, and to ensure that the design of content delivered on paper is as effective as it can be. In many case, content delivered on paper will be the same content that was delivered on the Web and will come from the same repository. However, if the roles of writer and information architect have been partitioned to support Web output, responsibility for paper output is also likely to fall to the information architect, and structured writing algorithms such as <db:indexterm><db:primary>differential single sourcing</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>differential single sourcing</db:secondary></db:indexterm>differential single sourcing are likely to become an important part of the information architect’s concerns.</db:para>
<db:para>I have spoken at many points about structured writing, particularly in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, being used to transfer complexity from the writer to the <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architect or the <db:indexterm><db:primary>content engineer</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>content engineer</db:secondary></db:indexterm>content engineer. It is the vast increase in the complexity of information architecture that makes this transfer necessary. But it also points out how much information needs to pass from the writer to the information architect for the information architect to do their job and not let any of the complexity slip through the cracks. Correct partitioning is essential to success in this area.</db:para>
<db:section>
<db:title>Top-down vs. bottom-up information architecture</db:title>
<db:para>How can structured writing structures and algorithms support information architecture? I’m going to start with making a basic distinction between two types of information architecture: <db:indexterm><db:primary>top-down information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>top-down information architecture</db:secondary></db:indexterm>top-down and <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up. Top down information architecture deals with navigational aids and organizing systems that stand apart from the content and point to it. A table of contents or a website menu system is a piece of top-down information architecture. Bottom-up information architecture deals with navigation and organization that exists within the content itself. A web site with a consistent approach to <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext <db:indexterm><db:primary>links</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>links</db:secondary></db:indexterm>links within its pages is an example of a bottom-up information architecture.</db:para>
<db:para>But <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture is not just about linking, it is about the way content is written. A page in a bottom-up information architecture is designed to be entered via search or links from almost anywhere (as opposed to being designed to be entered exclusively from a previous chapter). But it is also designed to help readers with onward navigation, to be a hub of its local subject space, offering readers many onward vectors according to their needs and interests.</db:para>
<db:para>This is a very different approach to information design because it unites rhetoric and navigation in a single design. Linking is not an afterthought, but part of the rhetorical design of the document. We are no longer dealing with an architecture in which navigation takes the reader to content and leaves them there. Navigation and rhetoric are intertwined and continuous, a design that is difficult to create and maintain without the use of structured writing.</db:para>
<db:para>I call this approach to information design <db:indexterm><db:primary>Every Page is Page One</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>Every Page is Page One</db:secondary></db:indexterm>Every Page is Page One, and it is described in my book, <db:indexterm><db:primary>Every Page is Page One: Topic-based Writing for Technical Communication and the Web</db:primary></db:indexterm><db:indexterm><db:primary>citetitle</db:primary><db:secondary>Every Page is Page One: Topic-based Writing for Technical Communication and the Web</db:secondary></db:indexterm><db:citetitle>Every Page is Page One: Topic-based Writing for Technical Communication and the Web</db:citetitle>. One of the key principles of Every Page is Page One is that a <db:indexterm><db:primary>topic</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>topic</db:secondary></db:indexterm>topic should follow a well defined <db:indexterm><db:primary>rhetorical structure</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>rhetorical structure</db:secondary></db:indexterm>rhetorical structure or type. Structured writing, particularly <db:indexterm><db:primary>subject-domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject-domain</db:secondary></db:indexterm>subject-domain structured writing, is very useful in developing Every Page is Page One content.</db:para>
<db:para>Bottom-up and top-down information architectures are not incompatible with each other. In fact almost every information architecture has both top-down and bottom-up elements. (Books, for instance, which are principally top-down, based on a table of contents, may also have internal cross references, which are a bottom up mechanism.)</db:para>
<db:para>Structured writing can be used to drive both the <db:indexterm><db:primary>top-down information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>top-down information architecture</db:secondary></db:indexterm>top-down and <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up aspects of information architecture.</db:para>
</db:section>
<db:section>
<db:title>Categorization</db:title>
<db:para>One of the key elements of top-down information architecture is <db:indexterm><db:primary>categorization</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>categorization</db:secondary></db:indexterm>categorization. An <db:indexterm><db:primary>information architect</db:primary></db:indexterm><db:indexterm><db:primary>role</db:primary><db:secondary>information architect</db:secondary></db:indexterm>information architect develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.</db:para>
<db:para>Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called <db:indexterm><db:primary>faceted navigation</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>faceted navigation</db:secondary></db:indexterm>faceted navigation. The easiest place to see faceted navigation in action is on a used-car site where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions.</db:para>
<db:para>Categorization of content require metadata to identify which category it belongs to. (Even if you just sort papers into piles, as soon as you put a label on each pile, you are adding metadata, and if you don’t add a label, you will soon forget which pile is which.) Categorization may involve the addition of new metadata or it may rely on existing metadata that is already attached to the content. This effectively means that your categories are expressed as query statements, and those queries do not have to operate on a single piece of metadata. They can create a category out of the conjunction of several pieces of metadata. For example, they can create a category of heart healthy recipes by looking at the salt, fat, and calorie metadata of a collection of recipes.</db:para>
<db:para>For content in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, therefore, the <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata required to assign a piece of content to a category may be inherent in its subject domain markup. It is the nature of the subject domain to describe the subject matter and any markup that describes the subject matter may already contain the fields that you need for categorization. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don’t need to create additional structures to support a new algorithm.</db:para>
<db:para>Relying on the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a <db:indexterm><db:primary>repository</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>repository</db:secondary></db:indexterm>repository so much easier for authors. But in some cases it can also avoid the need for a costly <db:indexterm><db:primary>content management system</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>content management system</db:secondary></db:indexterm>content management system, since it allows the <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>publishing algorithm</db:secondary></db:indexterm>publishing algorithm to categorize content at build time without the need of a separate metadata store or a separate system to manage categorization. I will look more at the role of the content management system in <db:xref linkend="chapter.management-domain"/>.</db:para>
</db:section>
<db:section>
<db:title>Linking</db:title>
<db:para>We have covered the <db:indexterm><db:primary>linking algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>linking algorithm</db:secondary></db:indexterm>linking algorithm already (<db:xref linkend="chapter.linking"/>), but linking is at the heart of a bottom up information architecture. In a bottom-up architecture, a page is not simply a leaf on a tree: the prize you find at the end of the search. It is a junction point in the exploration of an information space and the quest to understand a subject. In reading a page, a reader may discover new subjects that they need to understand and new options that they need to consider (<db:indexterm><db:primary>subject affinities</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject affinities</db:secondary></db:indexterm>subject affinities in the content). They may discover that what they thought they knew is wrong, or what they thought they wanted to do was not the right choice. They may find that their search or their traversal of the categorization system has led them to the wrong place, or they may discover whole new worlds they wish to explore. At a more mundane level, they may discover that they need additional information to complete their task, such as reference data.</db:para>
<db:para>These are all pointers to some next topic that the reader needs. Even the most prescient writer cannot have chosen all of them as the linear next topic in a linear narrative. To serve the reader they need to pave all of these possible paths for them, and the way you do that is with <db:indexterm><db:primary>hypertext</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>hypertext</db:secondary></db:indexterm>hypertext <db:indexterm><db:primary>links</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>links</db:secondary></db:indexterm>links.</db:para>
<db:para>This means that linking is not something that happens at arbitrary points where the author feels like adding a link. It is something that is planned for as part of the <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture. Whether you specify hard links in the <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain or the <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain, manage them with keys in the <db:indexterm><db:primary>management domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>management domain</db:secondary></db:indexterm>management domain, or generate them from <db:indexterm><db:primary>subject annotations</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>subject annotations</db:secondary></db:indexterm>subject annotations in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, they should be created in a disciplined and consistent manner according to a deliberate plan.</db:para>
</db:section>
<db:section>
<db:title>Tables of Contents</db:title>
<db:para><db:indexterm><db:primary>Tables of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>Tables of contents</db:secondary></db:indexterm>Tables of contents can serve various purposes depending on the nature of the work. Some describe a linear reading order for a work, some provide a <db:indexterm><db:primary>classification</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>classification</db:secondary></db:indexterm>classification scheme for random access to the content, some are simply a list of chapters that does not necessarily imply an intended reading order.</db:para>
<db:para>A <db:indexterm><db:primary>table of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>table of contents</db:secondary></db:indexterm>table of contents may seem like a <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain structure, but it is really more of a <db:indexterm><db:primary>media domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>media domain</db:secondary></db:indexterm>media domain structure, for two reasons. First, it contains specific links to specific resources at specific addresses, or specific page numbers in a paper or a virtual paper format such as <db:indexterm><db:primary>PDF</db:primary></db:indexterm><db:indexterm><db:primary>media</db:primary><db:secondary>PDF</db:secondary></db:indexterm>PDF. Secondly, it is virtually always factored out in <db:indexterm><db:primary>document domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>document domain</db:secondary></db:indexterm>document domain <db:indexterm><db:primary>markup languages</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>markup languages</db:secondary></db:indexterm>markup languages. Tables of contents are not written, they are generated.</db:para>
<db:para>From an <db:indexterm><db:primary>information architecture algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>information architecture algorithm</db:secondary></db:indexterm>information architecture point of view, what matters is how they are generated. In <db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DocBook</db:secondary></db:indexterm><db:indexterm><db:primary>DocBook</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DocBook</db:secondary></db:indexterm>DocBook, for instance, it is typical to write each chapter of a book in a separate <db:code>chapter</db:code> file and then pull them together into a book using a <db:code>book</db:code> file. The order of the table of contents is then determined by the order in which the chapters are listed in the <db:code>book</db:code> file. The TOC itself is generated by extracting chapter and section headings from the <db:code>chapter</db:code> files in the order they appear in the <db:code>book</db:code> file.</db:para>
<db:para>In <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA, the normal process is to assemble a book using a <db:code>map</db:code> file. A map file may assemble a book out of <db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>language</db:primary><db:secondary>DITA</db:secondary></db:indexterm><db:indexterm><db:primary>DITA</db:primary></db:indexterm><db:indexterm><db:primary>standard</db:primary><db:secondary>DITA</db:secondary></db:indexterm>DITA topics or other maps, and this may include assembling the chapters from topics as well. In the end, though, the <db:indexterm><db:primary>table of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>table of contents</db:secondary></db:indexterm>table of contents is generated in the same way, by traversing the document assembled by the <db:code>map</db:code>.</db:para>
<db:para>In both these cases, the order of the TOC is specified by hand by the person who creates the <db:code>book</db:code> or <db:code>map</db:code> file. But there are other ways to determine the order of content in a TOC. For instance, a reference work such as an API reference may be organized by listing each library in order by name, and each function in alphabetical order by name within its library, creating a table of content with two levels. There is no need to write a map or book file to create this table of contents. There is an algorithm for creating this table of contents. In fact, it is the algorithm stated in the first sentence of this paragraph, “listing each library in order by name, and each function in alphabetical order by name within its library”. Here is that algorithm expressed in pseudo code:</db:para>
<db:programlisting language="pseudo">

create toc
    for each library sorted alphabetically
        create toc-entry library name
        for each function in library sorted alphabetically
            create toc-entry function name
</db:programlisting>
<db:para><db:indexterm><db:primary>Tables of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>Tables of contents</db:secondary></db:indexterm>Tables of contents serve different purposes. Some describe a curriculum, a designed reading order. Others are simply a means of navigation, a way to select one topic out of a collection of many. If your content is written in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, the chances are that it already contains the structures on which such a classification could be based, and again the <db:indexterm><db:primary>table of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>table of contents</db:secondary></db:indexterm>TOC can be generated based on the <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata already in the content.</db:para>
<db:para>One advantage of this approach is that if a <db:indexterm><db:primary>table of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>table of contents</db:secondary></db:indexterm>TOC is assembled based on <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata in the content, that means that when new content is added, it is automatically included in the TOC the next time output is generated. This simplifies the task of adding new content to a collection by avoiding the need to update multiple files or systems when a update occurs. This makes life easier for authors as they do not need to know how the TOC is constructed. They only have to create an individual piece of <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conforming content and submit it to the right location. This also constitutes yet another example of the <db:indexterm><db:primary>avoiding duplication</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>avoiding duplication</db:secondary></db:indexterm>avoiding duplication, since the basis for the content’s inclusion at a particular point in the TOC is stored only in one place.</db:para>
</db:section>
<db:section>
<db:title>Lists</db:title>
<db:para>A major feature of a <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture is the <db:indexterm><db:primary>list</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>list</db:secondary></db:indexterm>list. Like <db:indexterm><db:primary>tables of contents</db:primary></db:indexterm><db:indexterm><db:primary>structure</db:primary><db:secondary>tables of contents</db:secondary></db:indexterm>tables of contents, lists are a catalog of resources. But while a TOC is a list of resources defined by their container (contents = things in a container) a list may have any principle of organization or inclusion.</db:para>
<db:para>For instance, you might want to have a list of all the movies starring each actor in a collection of movie reviews. Such a list is not only a useful piece of information, they are also an important aid for navigating around a site. Maintaining such a list by hand would be laborious and error prone, especially with new movies being added to the collection all the time.</db:para>
<db:para>If you have your movie reviews in a structured format that lists the actors in the movie in a format accessible to algorithms, like this:</db:para>
<db:programlisting language="sam">

movie: Rio Bravo
    starring:: actor
        John Wayne
        Dean Martin    
        Ricky Nelson    
        Angie Dickinson
        Walter Brennan
</db:programlisting>
<db:para>you can generate the filmographies for all your actors, like this:</db:para>
<db:programlisting language="pseudo">

create-filmographies
    for each unique actor in movie/starring/actor 
        create filmography named actor with link to actor
        for each movie where starring/actor = actor
            create entry named movie with link to movie
</db:programlisting>
<db:para>Tables of contents are a <db:indexterm><db:primary>top-down information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>top-down information architecture</db:secondary></db:indexterm>top-down information architecture device. You expect to find them at the top of the information set. List are a <db:indexterm><db:primary>bottom-up information architecture</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>bottom-up information architecture</db:secondary></db:indexterm>bottom-up information architecture device. You expect to find them as independent pages or as elements within a page. Thus if our collection includes the biographies of actors, and we want each biography to include the filmography, we can omit the filmography from the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain version of the biography and add it to the output in the <db:indexterm><db:primary>publishing algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>publishing algorithm</db:secondary></db:indexterm>publishing algorithm.</db:para>
<db:programlisting language="pseudo">

match actor-bio
    create html
        create h1 "Biography: " + actor-name
        continue
        create h2 "Filmography"
        for each movie-review where starring/actor = actor-name
            create li 
                create a with attribute href 
                 = address of movie-review
                    output movie-name
</db:programlisting>
<db:para>Note the close relationship between rhetoric and navigation here. The generated filmography is both content and navigation, both part of the individual topic and part of the overall navigation scheme – and example of how information architecture unites rhetoric and navigation.</db:para>
<db:para>It is also worth noting this kind of thing is a sophisticated example of the <db:indexterm><db:primary>reuse algorithm</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>reuse algorithm</db:secondary></db:indexterm>reuse algorithm. It takes a set of movies, each with a list of actors, and uses it to generate a list of movies for each actor, reusing existing information to create new content. This happens without any explicit reuse markup.</db:para>
</db:section>
<db:section>
<db:title>Personalized content</db:title>
<db:para>Another key feature of modern web architecture is personalized content, which means content that is generated in response either to what the site already knows about you (from your account information, or a transaction token such as a <db:indexterm><db:primary>cookie</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>cookie</db:secondary></db:indexterm>cookie, or the  selections or entries that you make on the page). For example, when you log into Amazon, the first page you see is crafted for you based on everything Amazon knows about your browsing and purchasing history. As you make selections, such as adding an item to your shopping cart or wish list, that information is used to shape the next page you see.</db:para>
<db:para>If you browse a used car site like Autotrader.com, you can select those features of a car that you are interested in (red convertibles with manual transmission under $20000, for instance) and the next page will be built based on that input.</db:para>
<db:para>The ability of a site to personalize pages depends on its ability to identify content that is <db:indexterm><db:primary>relevance</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>relevance</db:secondary></db:indexterm>relevant, based on everything it knows about the reader, and to assemble those pieces to form a page. For this to work, the content has to be easy to identify unambiguously, and it needs to be highly <db:indexterm><db:primary>composability</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>composability</db:secondary></db:indexterm>composable.</db:para>
<db:para>As we have seen, these properties are maximized when content is stored in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, both because the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain makes the relevant <db:indexterm><db:primary>metadata</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>metadata</db:secondary></db:indexterm>metadata available, and because working in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain helps authors produce more consistent content that works better with these algorithms.</db:para>
<db:para>The consistency of the content is most important in any personalized content application. There is no possibility for an author or editor to inspect the output of a personalized content publication before the reader sees it, since it is assembled in real time based on the unique things we know about each reader. This requires total confidence that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the content <db:indexterm><db:primary>conformance</db:primary></db:indexterm><db:indexterm><db:primary>process</db:primary><db:secondary>conformance</db:secondary></db:indexterm>conforms to its <db:indexterm><db:primary>constraints</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>constraints</db:secondary></db:indexterm>constraints</db:para>
</db:listitem>
<db:listitem>
<db:para>those constraints are completely and correctly expressed by its <db:indexterm><db:primary>markup</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>markup</db:secondary></db:indexterm>markup</db:para>
</db:listitem>
<db:listitem>
<db:para>the algorithm correctly processes and delivers the content</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All three of these requirements depend on the soundness and simplicity of the <db:indexterm><db:primary>markup</db:primary></db:indexterm><db:indexterm><db:primary>tool</db:primary><db:secondary>markup</db:secondary></db:indexterm>markup design. They require precise content structures with few alternatives, clear guidance for writers, and good <db:indexterm><db:primary>audit</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>audit</db:secondary></db:indexterm>audit capability. Without these properties, content and its markup will be inconsistent and reliable algorithms will be hard to write and test because of the wide variety of markup combination they may encounter.</db:para>
<db:para>Most personalized content applications model their content in relational database tables for these very reasons. However, with the correct markup design, almost certainly in the <db:indexterm><db:primary>subject domain</db:primary></db:indexterm><db:indexterm><db:primary>concept</db:primary><db:secondary>subject domain</db:secondary></db:indexterm>subject domain, there is no reason why you cannot use markup-based tools alone or in concert with database tools and solutions to achieve the same kind of thing.</db:para>
</db:section>
<db:section>
<db:title>Constraints enable processes</db:title>
<db:para>In the last few sections I have discussed the creation of the navigational elements that are a necessary part of an information architecture. But as I said at the beginning of the chapter, information architecture is bigger than this. It is the union of rhetoric and navigation. This means that while the information architect is responsible for the overall architecture, it is the writers who must execute every specific part of that that architecture, which makes information architecture a massively collaborative venture.</db:para>
<db:para>As we saw in <db:xref linkend="chapter.collaboration"/>, the key to successful collaboration is to use the right set of structures and constraints to limit the amount that individual contributors have to know about each other’s work. Writers and information architects need to collaborate face to face on the design of those structures and constraints so that the day to day work of creating and maintaining the information architecture can be carried out without an inordinate collaboration overhead.</db:para>
<db:para>In order to create a successful information architecture, therefore, it is necessary to partition this complexity so that writers can write their individual contribution confidently and correctly without requiring such comprehensive knowledge of the system and its contents. This kind of partitioning require a set of clear and precise constraints to govern the writer’s work and a set of sophisticated processes to <db:indexterm><db:primary>audit</db:primary></db:indexterm><db:indexterm><db:primary>algorithm</db:primary><db:secondary>audit</db:secondary></db:indexterm>audit and maintain the content and the content system over time.</db:para>
<db:indexterm class="endofrange" startref="idm1887111580"/><db:indexterm class="endofrange" startref="idm1887117084"/><db:indexterm class="endofrange" startref="idm1887112988"/><db:indexterm class="endofrange" startref="idm1887111580x"/><db:indexterm class="endofrange" startref="idm1887117084x"/><db:indexterm class="endofrange" startref="idm1887112988x"/></db:section>
</db:chapter>
