chapter:(#chapter.single-sourcing) Single Sourcing 
    <<<(annotations.sam)
    
    index:: type, term
        concept, single sourcing

    The need to publish the same document in more than one medium -- for example, print and Web -- is a common process problem and source of complexity. You might not suspect that it is also a rhetoric problem, but as I will show, it actually a significant and difficult rhetoric problem as well. The term _single sourcing_ is used to describe a variety of different ways to address this need, all of which involve using a single body of content to create output in more than one medium.

    Single sourcing adds complexity to the job of separating content from formatting because you are now separating content from not one but two or more sets of formatting. In other words, you are not simply separating content from formatting, you are separating a set of decisions about formatting from your content so you can make different decisions for each medium. If you don't get the partitioning correct, problems will show up when you try to apply two different sets of formatting to the same content. 
    
    Many organizations have unhandled complexity in this area -- complexity that can result in rhetorical problems. Often, their authoring techniques do not allow writers to sufficiently separate media-specific formatting from content. As a result, formatting for one medium gets applied to another medium, which means the content in that medium does not work as well as it could. By improving how you separate content from formatting, you can significantly reduce the amount of complexity that goes unhandled, resulting in a better experience for your readers.  
    
    section: Basic single sourcing 
    
        The basic single-sourcing algorithm is straightforward (see [#chapter.processing]). Basic single sourcing involves taking a piece of content in the {document domain}(concept) and processing its document-domain structures into different {media-domain}(concept) structures for each target medium. 
        
        Suppose you have recorded a recipe in the document domain (see [*fig.ssa-eggs-1]).

        pagination-tweak:
            min-space: 3in

        figure:(*fig.ssa-eggs-1) Document-domain recipe for hard-boiled eggs
            ```(sam)
                page: 
                    title: Hard Boiled Eggs
                    
                    A hard boiled egg is simple and nutritious. 
                    Prep time, 15 minutes. Serves 6.
                    
                    section: Ingredients
                        ul:
                            li: 12 eggs
                            li: 2qt water
                    
                    section: Preparation
                        ol:
                            li: Place eggs in pan and cover with water.
                            li: Bring water to a boil.
                            li: Remove from heat and cover for 12 minutes.
                            li: Place eggs in cold water to stop cooking.
                            li: Peel and serve.
        
               
        You can output this recipe to two different media by applying two different formatting algorithms. First you output to the Web by creating {HTML} (see [*fig.ssa-recipe2html]).

        figure:(*fig.ssa-recipe2html) Pseudocode to convert document-domain recipe to HTML output
            pagination-tweak:
                keep-together: auto
                
            ```(pseudo)
                match page
                    create html
                        stylesheet www.example.com/style.css
                        continue
                    
                match title
                    create h1
                        continue
                        
                match p
                    copy
                        continue
                        
                match section
                    continue
                        
                match section/title 
                    create h2
                        continue
                        
                match ul
                    copy 
                        continue
                        
                match ol
                    copy
                        continue
                
                match li
                    copy
                        continue
        
        
        In [*fig.ssa-recipe2html], paragraph and list structures have the same names in the source format as they do in the output format (HTML) so you just copy the structures rather than recreating them. This is a common pattern in structured writing algorithms.
        
        The algorithm in [*fig.ssa-recipe2html] transforms our source into HTML that looks like [*fig.ssa-html-recipe-output]. 

        figure:(*fig.ssa-html-recipe-output) Result of running the algorithm in [*fig.ssa-recipe2html]
            ```(html)
                <html>
                    <head>
                        <link rel="stylesheet" type="text/css"
                        href="//www.apache.org/css/code.css">
                    </head>
                    
                    <h1>Hard Boiled Eggs</h1>
                    
                    <p>A hard boiled egg is simple and nutritious. 
                    Prep time, 15 minutes. Serves 6.</p>
                    
                    <h2>Ingredients</h2>
                    
                    <ul>
                        <li>12 eggs</li>
                        <li>2qt water</li>
                    </ul>
                        
                    <h2>Preparation</h2>
                    
                    <ol>
                        <li>Place eggs in pan and cover with water.</li>
                        <li>Bring water to a boil.</li>
                        <li>Remove from heat and cover for 12 minutes.</li>
                        <li>Place eggs in cold water to stop cooking.</li>
                        <li>Peel and serve.</li>
                    </ol>
                </html>
        
        
        Outputting to paper (or to PDF, which is a kind of virtual paper) is more complex. On the Web, you output to a screen which is of flexible width and infinite length. The browser wraps lines of text to the screen width (unless formatting commands tell it to do otherwise), and there is no issue with breaking text from one page to another. For paper, however, you have to fit content into a set of fixed-size pages.   
        
        This introduces a number of formatting issues, including the following:
        
        * Where to break each line of text so the margins look neat and the text is not cramped or spread out too much. 
        * How to avoid placing a heading at the bottom of a page or the last line of a paragraph as the first line of a page.
        * How to handle a list or a table when you run out of space on the page.
        * How to create a cross reference to another page when you don't know the page number yet.
        
        Because of issues like this, you don't write a formatting algorithm for paper the same the way you write an algorithm for HTML. Instead, you use an intermediate typesetting system that already knows how to handle tasks such as inserting page-number references and handling line and page breaks. Rather than handling these things yourself, you give the typesetting system general guidance and then let it do its job.

        One such typesetting system is {XSL-FO}(language) (Extensible Stylesheet Language - Formatting Objects). Other typesetting systems include {TeX}(language) and newer versions of {CSS}(language). XSL-FO is a typesetting language written in {XML}(language). To format your content using {XSL-FO}, you transform your source content into {XSL-FO} markup, just the way you transform it into {HTML}(language) for the Web. But then you run the {XSL-FO} markup through an {XSL-FO} processor to produce your final output, typically {PDF}(language). 
        
        Here is a small example of XSL-FO markup:
        
        ```(XSL-FO)
            <fo:block space-after="4pt">
               <fo:wrapper font-size="14pt" font-weight="bold">
                 Hard Boiled Eggs
               </fo:wrapper>
            </fo:block>
        
        
        The {XSL-FO} code contains {media-domain}(concept) instructions for spacing and font choices. There is no division between content structures and formatting structures as there is with {HTML}(language) and {CSS}(language). Also, as a pure media-domain language, XSL-FO does not have document-domain structures such as paragraphs and titles. To XSL-FO, a document is simply a set of blocks with specific formatting properties attached to them.
        
        To limit the amount of detail, the algorithm in [*fig.ssa-fo-algorithm] shows only a portion of the pseudocode for handling recipe markup (The point here is not to teach {XSL-FO}, but to show how the algorithm works).

        figure:(*fig.ssa-fo-algorithm) Portion of the algorithm to generate XSL-FO from a recipe
            ```(pseudo)
                match title
                    output '<fo:block space-after="4pt">'
                        output '<fo:wrapper font-size="14pt" font-weight="bold">'
                            continue
                        output '</fo:wrapper>'
                    output '</fo:block>'
        
        The rule shown in [*fig.ssa-fo-algorithm] simply wraps the XSL-FO formatting structures around the text of the title. It unpacks the text from a {document-domain} structure and inserts it into a {media-domain} structure. 
        
        
    section: Differential single sourcing
    
        Basic {single sourcing} outputs the same document presentation to different media. However, each medium is different, and what works well in one medium does not always work as well in another. Thus the rhetoric that is appropriate to one media may not be appropriate to another, This is what I meant when I said at the beginning that single sourcing is a rhetoric problem as well as a process problem. 

        For example, online media generally support {hypertext}(concept) links, while paper does not. Suppose you have a piece of content that includes a link:
        
        ```
            In Rio Bravo, {the Duke}(link "http://JohnWayne.com")
            plays an ex-Union colonel out for revenge.
        
        
        In SAM syntax, the link markup (`link "http://JohnWayne.com"`) specifies the address to link to. In the algorithm examples below, I refer to this markup as the _specifically_ attribute using the notation `@specifically`.
        
        In HTML, you output this as a link using the HTML `a` element, so the algorithm looks like [*fig.ssa-specifically-1].

        figure:(*fig.ssa-specifically-1) Algorithm to generate HTML link from the `@specifically` attribute
        
            ```
                match p
                    copy
                        continue
                
                match link
                    create a
                        attribute href = @specifically 
                        continue
        
           
        The result of this algorithm is shown in [*fig.ssa-specifically-1-output].

        figure:(*fig.ssa-specifically-1-output) Output of the algorithm in [*fig.ssa-specifically-1]
            
            ```(html)
                <p>In Rio Bravo, <a href="http://JohnWayne.com">The Duke</a>
                plays and ex-Union colonel out for revenge.
                </p>
        
        
        But suppose you want to output this same content to paper. If you output it to PDF, you can still create a link as with HTML, but when that PDF is printed, all that's left is a slight color change in the text and maybe an underline. Readers cannot follow the link. 
        
        You can't print an active link on paper, but you can print the URL, so the reader can type it into a browser. Your algorithm can print the link inline or as a footnote. [*fig.ssa-specifically-2] shows the algorithm for printing the URL inline. (I dispense with the detailed XSL-FO syntax this time.)

        figure:(*fig.ssa-specifically-2) Algorithm to display the URL for a link in print
        
            ```(pseudo)
                match p
                    create fo:block
                        continue
                        
                match link
                    continue
                    output " (see: "
                    output @specifically
                    output ") "
            
        This will produce the output in [*fig.ssa-specifically-out]:

        figure:(*fig.ssa-specifically-out) Output of [*fig.ssa-specifically-out]
        
            ```(xml)
                <fo:block>
                In Rio Bravo, the Duke (see: http://JohnWayne.com) 
                plays an ex-Union colonel out for revenge.
                </fo:block>
          
        
        This works, but note that the effect is not the same in each medium. Online, the link to JohnWayne.com disambiguates the phrase "The Duke" for those readers who do not recognize it. A simple click on the link will explain who "the Duke" is. But in the paper example, such disambiguation exists only incidentally, because the words "JohnWayne" happen to appear in the URL. This is not how you would disambiguate "The Duke" if you were writing for paper. You would be more likely to do something like this:
        
        """
            The Duke (John Wayne) plays an ex-Union colonel.

        This provides readers with less information, in the sense that it does not give them access to all the information on JohnWayne.com, but it does a better job of disambiguation and in a more paper-like way. It is a rhetoric appropriate to the media. The loss of the reference to JohnWayne.com is probably not an issue here. Following that link by typing it into a browser is a lot more work than simply clicking on a Web link. Someone who wants more information on John Wayne is far more likely to type "John Wayne" into Google than type "JohnWayne.com" into the browser address bar.   
        
        As written, the source content provides no easy way to produce this preferred form for paper. The content is in the {document domain}(concept), which specifies the presentation of the content. Therefore, it is not a neutral format between media that require different forms of presentation. The choice to specify a link directly in the markup gives it a strong bias towards the Web and online media rather than paper. A {document-domain} approach that favored paper would similarly lead to a poorer online presentation by omitting the link. 
        
        Because different media require a different rhetoric, you need a _differential_ approach to single sourcing, one that allows you to differ not only the formatting but the presentation of the content for different media.
        
        One way to accomplish differential single sourcing is to record the content in the {subject domain}(concept), thus removing the prejudice of the document-domain presentation for one class of media or another. Here is how this markup might look:
        
        ```(sam)
            {The Duke}(actor "John Wayne") plays an ex-Union colonel.
        
        
        In this example, you annotate the phrase "The Duke" with subject-domain markup that clarifies exactly what the text refers to. That annotation says that "the Duke" is the name of an actor, specifically John Wayne.
             

        Our document-domain examples attempted to clarify "the Duke" for readers, but they did so in media-dependent ways. This subject-domain example clarifies the meaning of "The Duke" in a presentation-neutral way; it explicitly, formally, and unambiguously marks up what the phrase refers to. This markup is written for algorithms, not readers. It allows an algorithm to generate an appropriate clarification for the reader in any target medium (see [*fig.ssa-specifically-3-paper] and [*fig.ssa-specifically-3-web]). 


        figure:(*fig.ssa-specifically-3-paper) Algorithm to render paper from subject-domain markup
            
            ```
                match actor
                    continue
                    output " ("
                    output @specifically
                    output ") "
                        
        figure:(*fig.ssa-specifically-3-web) Algorithm to Web links from subject-domain markup

            ```
                match actor
                    create link
                        $href = get link for actor named @specifically
                        attribute href = $href
                        continue
        
        
        This assumes the existence of a system that can respond to the `get link` instruction and look up pages to link to based on the type and a name of a subject. I look at such a system in [#chapter.linking], which revisits this example in more detail.  
        
    section: Differential organization and presentation
    
        Differences in presentation between media can be broader than this. Paper documents sometimes use complex tables and elaborate layouts that don't translate well to online media. Effective table layout depends on knowing the width of the page you have available, and online you don't know that. A table that looks great on paper may be unreadable on a mobile device, for instance. 
        
        And this is more than a layout issue. Sometimes the things that paper does in a static way should be done dynamically in online media. For example, airline and train schedules have traditionally been printed as timetables on paper, but you rarely see them presented that way online. Rather, you see an interactive travel planner that lets you choose your starting point, destination, and desired travel times and then presents you with the best schedule, including when and where to make connections. If your single source is a timetable designed for print and PDF, you can't produce the kind of online presentation of your schedule that people expect, and that can have a direct impact on your business.
        
        To single-source schedule information for both paper and online media, you can't maintain that content in a document-domain table structure. You need to maintain it in a timetable database structure (which is in the {subject domain}, even though it looks like a database, not a document). 
        
        An algorithm can read such a database to generate a document-domain table for print publication. For the Web, however, you can create a web application that queries the same database dynamically to calculate routes and schedules for individual travelers. 
        
        # pix of timetable and routing widget ???

        In this scenario, you move content to the {subject domain} to partition the presentation from the information, which allows you to produce a different information design for different media (see [*ex.ssa-differential]). I examine these scenarios in more depth in [#chapter.wide]. 
        
        figure:(*ex.ssa-differential) Information design for single sourcing
            >>>(image ../graphics/Differential.xml)
        
        
    section: Conditional differential design
    
        You can also do differential single sourcing by using conditional {management-domain} structures in the document domain.
       
        For instance, if you are writing a manual that you intend to single source to a help system, you might want to add context setting information to the start of a section when it appears in the help system. The manual may be designed to be read sequentially, meaning that the context of individual sections is established by what came before. But help systems are always accessed randomly, meaning that the context of a particular help topic may not be clear if it was single sourced from a manual. To accommodate this, you could include a context-setting paragraph that is conditionalized to appear only in help output (see [*ex.ssa-conditional-1]):

        figure:(*ex.ssa-conditional-1) Differential single source example using management-domain structures
            ```(sam)
                section: Wrangling left-handed widgets
                
                    ~~~(?help-only)
                    
                        Left-handed widgets are used when wrangling 
                        counter-clockwise.
                        
                    To wrangle a left handed widget:
                    
                    1. Loosen the doohickey using a medium thingamabob.
                    2. Spin three times around under a full moon.
                    3. Touch the sky.            
        

        In [*ex.ssa-conditional-1], the SAM markup `~~~` creates a fragment structure to which conditional tokens can be applied. Content indented under the fragment marker is part of the fragment.
        
        To output a manual, you suppress the help-only content:
        
        ```(pseudo)
            match fragment where conditions = help-only
                ignore
        
        
        To output help, you include it:
        
        ```(pseudo)
            match fragment where conditions = help-only
                continue
        
     
    section: Primary and secondary media
        
        While differential single sourcing can help you output documents with the appropriate rhetoric in multiple media, there are limits to how far this approach can take you. 
        
        Books are a linear medium in which one chapter follows another in order. The Web is a {hypertext} medium in which every page is page one. Readers arrive at a page via search, and they navigate by following hypertext links. The linear and hypertext approaches are fundamentally different ways of writing that invite fundamentally different ways of navigating and using information.[*eppo] Even moving content to the {subject domain} as much as possible does not entirely factor out these fundamental differences in approach. 

        footnote:(*eppo)
            For a full examination of the differences, see my book {Every Page is Page One: Topic-based Writing for Technical Communication and the Web}(citetitle "Baker2013").
        
        When single sourcing content to both linear paper-like media and {hypertext} web-like media, you generally have to choose a primary medium. Single sourcing that content to other media will be on a best-effort basis. It may be good enough for a particular purpose, but it will never be as good as it could have been had you designed exclusively for that medium.
        
        Many of the tools used for single sourcing have a built-in bias towards one medium or another. Desktop-publishing tools such as {FrameMaker}(tool), for instance, were designed for linear media. Online collaborative tools such as {wikis}(tool) were designed for {hypertext} media. It is usually a good idea to pick a tool that was designed for the medium you choose as primary. Tools partition the complexity of content creation to best suit the primary medium they were designed for. 
        
        Often, the tools a group uses implicitly determine the primary medium. This usually means that the primary medium is paper, and paper often continues to be primary even after the organization stops producing paper, and their readers have moved to online formats. 
        
        Some organizations think they should not switch to tools that are designed primarily for online content until they have entirely abandoned paper and paper-like formats such as PDF. But once online becomes your primary media, your rhetoric should change to a rhetoric appropriate to online media (potentially a very large change, as discussed in [#chapter.architecture]). Thus it is appropriate to switch to a rhetoric and tool set that is optimized for online but that can still produce linear media as a secondary output format. 
        
        Changing your information design practices from linear, paper-based designs to {hypertext} designs is not trivial, but such designs better suit the way many people use and access content today. I discuss these design differences in depth in my book, {Every Page is Page One: Topic-based Writing for Technical Communication and the Web}(citetitle). Don't expect single sourcing, by itself, to successfully turn document-oriented design into effective hypertext. It is usually more effective to adopt an {Every Page is Page One}(concept) approach to information design and use structured writing and single-sourcing techniques as a best-effort method to create linear media for those of your readers who still need paper or paper-like formats -- or for those documents where linear organization still makes sense. 

        
    
        
        





