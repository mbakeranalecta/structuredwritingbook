chapter:(#chapter.composition) Composition 

    <<<(annotations.sam)

    A major source of complexity in content reuse is the need to write pieces of content that will work when combined with other pieces to form a larger work. This is the composition problem. But the composition problem does not only occur in reuse scenarios. It can also occur in any situation in which you want multiple writers to contribute to a single work. In these scenarios, you have partitioned the writing of certain pieces of content so that they occur only once, and so that, presumably, they are written by the person best qualified to write them. 
    
    But as we have noted before, successful partitioning requires that sufficient information be passed between the partitions so that each can do its own work completely without any complexity being dropped. When a writing task is divided among many authors, we need to make sure that their individual pieces will come together to form a coherent whole. The definition of what constitutes a coherent whole may vary. A collection of {Every Page is Page One} topics organized as a hypertext has a different definition of what constitutes a coherent whole than does a printed product manual designed to be read in linear order. But whatever the criteria, we have to make sure they are met in order to distribute authoring or practice reuse without allowing elements of complexity to fall through to the reader. 
    
    The composition algorithm deals with the problem of composing a larger work 
    out of smaller pieces. Many traditional writing tools produce files that are meant to encompass a whole work. If you take two {Word} files, for example, or two {FrameMaker} files and simply join them together, the result will not be a document that is the combination of the two files, it will be a corrupt file that will not open. 
    
    Both {Word} and {FrameMaker} have features that allow you to compose {Word} and FrameMaker documents out of smaller pieces. To a limited extent, they may even allow you to compose documents out of files other than their own. Some systems are specifically designed to allow you to compose document from many different source files. In many cases, though, some cleanup is required before the imported files can be used, particularly if they contain {media domain} formatting information. This cleanup requirement means that this is usually a one time import. You can't keep editing the original files and have the changes immediately reflected in the importing system.
    
    Organizations that require a high degree of composability, therefore, have often turned to structured writing for solutions to the composability problem. 
    
    There are several parts to the composability problem, each of which structured writing helps address in different ways. 
    
    section: Combining the pieces
    
        The first requirement of composability is that you must actually be able to combine the pieces at the file level. Many computer file formats won't let you make a bigger file just by appending one file to the next or dropping parts of one file into another. They are not designed to work that way. Many let you cut and paste content into the interface to add material to a file, but that is the method we are trying to avoid. We want to be able to have an algorithm do the composition and that means we need a format that lets you put the pieces together without turning the files into mush.   

        Most structured writing formats consist of a hierarchy of structures. Those structures tend to be self similar in form. For instance, all structures in an XML document are composed of XML elements. This means that you can take an XML document apart at any point in the structural hierarchy and insert, remove, or rearrange the structures at that level. To compose a larger structure out of smaller structures, you simply wrap new elements around them. Thus XML, and many other structured writing formats, provide a level of algorithmic composability often lacking in other formats.
        
    section: Combining structures
    
        The second requirement of composability is that the result of combining markup structures must be a valid document (must conform to the appropriate constraints for that document). The hierarchical nature of XML means that you could take a well-formed chunk of a {DocBook} file and drop in into the middle of a {DITA} file. The result would be well-formed XML, but it would not be structurally valid {DITA} or structurally valid {DocBook}. It would not obey the constraints of either language. You need to do composition in a way that creates a valid document in the target language. 

        The simplest way to assure this it to plan all of your pieces to fit the constraints of the documents they will be inserted into. The most obvious way to do this it to make sure that all of your pieces come from the same markup language. Thus DITA has good support for structural composability, but only for sources that are themselves DITA. 
        
        But belonging to the same markup language is not enough. Markup languages constrain where certain structures can occur and you must also make sure that the pieces go into a place where they are structurally allowed in that language. Just because all the pieces come from the same languages does not mean that every possible combination results in a valid document. Thus you cannot insert a DITA `steps` structure into a DITA concept or reference topic because `steps` are not permitted in those topic types. This requires planning and careful management to make sure the combinations you create are valid.
        
        However, it is not essential to composability that all the pieces you want to combine come from the same language as the document you are composing. You can also take content from different sources and with different structures, as long as you can transform their structures on input to match the structures of the destination document. In other words, you can transform as you compose. This can be a very powerful technique. For instance, you can use it to compose documents from content in a database. (Indeed, all database reporting systems are exactly this: systems that compose documents in one format from tabular data in another format.) At the structural level, composability depends on the semantic equivalence of structures, not common syntax.
        
        For this approach to work, however, it is important that all of the sources you draw from have a high level of {conformance} to their own constraints. If you don't know, or cannot rely on, the structure of the pieces you are drawing in, you cannot reliably combine them with an algorithm. Thus it is often better to focus on strategies for getting the most reliable sources rather that forcing everyone into a common format that they might not use reliably. For more on this, see [#chapter.conformance]. 
    
    section: Stylistic compatibility
    
        While composability of structures is vital, it is not always sufficient. You could have pieces in a {media domain} language that are structurally compatible but formatted differently. The resulting document would be valid and would publish successfully, but it would be a mess of competing styles and fonts.  

        For practical purposes, then, you should not try to create composable content in the {media domain}. You should at least use the {document domain}. The {document domain} {separates content from formatting}(algorithm) so you can compose a document in the {document domain} and then apply consistent formatting to the result.  
        
        This is true even if the pieces are in different {document domain} languages. All document domain languages essentially describe the same set of abstract document structures -- document are documents after all, they all have the same basic features which all document domain languages seek to represent. As long as you can recognize the same basic features in each of the source languages, you can use a transform and compose technique to compose a document from pieces in different document domain languages by converting to a common output language (which does not have to be the same language as any of the pieces you are composing it from). (Embedded {management-domain} markup may spoil the party, however, since there is not the same level of semantic equivalence between management system. For this reason you generally want to do composition after the resolution of management-domain structures, unless those structures are actually doing composition themselves.)

    section: Narrative flow
    
        Even if you can assemble pieces from different document domain sources and format them all with a single consistent look, that does not mean that the result will be a complete, correct, coherent narrative. You need to make sure that the pieces you are composing with form a coherent narrative in the resulting document. 
        
        This is not necessarily a matter of making the document sound like it came from a single person. Many business documents are the result of several different writers, sometimes working together, sometimes inheriting and maintaining a document over time. Truly making such a document sound like it was all written by one person is a tall order and usually not necessary to achieve its business purpose. 
        
        What does matter is that the document be cohesive and coherent. The {terminology} it uses should be consistent from beginning to end. The end should flow logically from the middle and the middle from the beginning. There should not be obvious duplications of content nor omissions (obvious or not). This clearly requires a number of constraints on the content affecting both composition and style. 
        
        There are a couple of approaches to narrative composition. One is the {information typing} approach that you find in systems like {DITA} or {Information Mapping}. In this approach, content is broken down into certain broad types such as procedure, process, principle, concept, structure, and fact (Information Mapping) or task, concept, and reference (DITA -- though DITA allows you to define others though specialization.) The idea here is that if you keep reference information in a separate chunk from a concept, for instance, the chunks will compose more reliably, since there will not be duplicate concept information in a reference chunk. (For more on these mechanisms, see [#chapter.heavyweight].)
        
        The difficulty with this approach is that these abstract categories don't always make a lot of sense to writers when they are writing about concrete subjects, and different writers may interpret the chunk types or their boundaries differently, resulting in material that does not compose as well as you might hope. 
        
        Also, this approach, while it has been shown to improve the quality of writing in some cases, can also impose an artificial clunkiness and lack of flow on the content, leaving it feeling choppy or disjointed. Breaking content into separate chunks of different types, after all, is inherently about weakening the narrative threads that bind them together. And if the chunks are intended to be reused in several different narratives, their attachment to the narrative thread of any one output must necessarily be weak. 
        
        If one of your aims is to impose a specific rhetorical style or structure for particular kinds of content, any composition that you do needs to be subject to the same rhetorical constraints as if the piece had been written as a whole. This is often difficult to achieve, not least because it is often difficult to authors to write material that conforms to a rhetorical structure when they can't see the whole structure. 

        The other approach to composing coherent narratives is to move content to the {subject domain}. A subject domain structure for a particular subject does not have to be structured as a collection of abstract chunk types. The structure is highly specific to the subject matter at hand and is therefore much more concrete and less susceptible to varying interpretation by writers. Also, you can use the subject domain to factor out many of the style issue that might otherwise compromise composability. (This is just like factoring out formatting issues by moving from the {media domain} to the {document domain}.) A narrative can then be composed algorithmically by arranging well-identifies pieces of information in a predetermined order.) In other words, a narrative thread can be introduced by the algorithm at the time of composition rather than by the author at time of writing. 

        Obviously, though, this technique can only work with a limited range of content. Not all material fits into obvious strongly typed {subject domain} structures. Content that is more conceptual or theoretical in nature does not have a strong {subject domain} structure because it does not approach its subject matter in such a systematic or regular way. Then again, the ability to compose such content out of existing pieces is limited anyway. By its very nature such content requires a continuous flow of exposition that is very hard to assemble from pre-written chunks.

        In short, then, composition is a useful tool in certain limited situations, but is is not a general technique that can be used across a broad range of content without doing serious damage to content quality. As I have stressed before, fixating on any one algorithm is dangerous. It is always possible to eke out more reuse from a system by pushing composition past the point at which quality can be maintained. But the point is not to drive up your reuse statistics. The point is to ensure that every part of the complexity of the content process is handled by the person or process that has the skills, time, and resources to handle it properly. When is comes to composing effective narratives, the writer, not an algorithm, is often the one who can do the job best.  
    
    
    
    