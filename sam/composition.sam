chapter:(#chapter.composition) Composable structures 

    <<<(annotations.sam)

    A major source of complexity in content reuse comes from the need to write pieces of content that work when combined with other pieces to form a larger work. This is the _composition_ problem. The composition problem doesn't occur only in reuse scenarios. It can also occur whenever multiple writers contribute to a single work. In these scenarios, you partition the writing so each piece of content is written only once and is assigned to the person best qualified to write it. Then, of course, you have to stitch the pieces together to create the whole work. This means that you need to create composable structures -- structures that can be combined with other structures to create larger structures. 

    The various methods of stitching pieces of content together are covered in other chapters, in particular [#chapter.processing], [#chapter.reuse], and [#chapter.merge]. But the mechanics of splicing content together are only half the story. Every algorithm has two parts, methods and data structures. Methods can only produce reliable results if they have reliable data structures to work with. Unfortunately, this is often overlooked in designing structured writing systems. Assembling documents out of small easy-to-manage pieces sounds wonderful and it can be made to work well under the right conditions, but it will not work for all types of content and it will only work reliably for any type of content if you design the structures of that content correctly.  
    
    As I noted earlier, successful partitioning requires that sufficient information be passed between the partitions so that each can do its own work completely without any complexity being dropped. When you divide an authoring task among many writers, you need to make sure that the individual pieces come together to form a coherent whole. The definition of what constitutes a coherent whole may vary. The criteria for evaluating whether a collection of {Every Page is Page One} topics organized as a hypertext is a coherent whole are different from the criteria you would use for a printed product manual designed to be read in linear order. But whatever the criteria, they must be met if you want to distribute authoring to multiple writers or reuse content without allowing elements of complexity to fall through to the reader. 
    
    Many traditional writing tools produce files that are meant to encompass a whole work. If you take two {Word} files, for example, or two {FrameMaker} files and simply join them together, the result is not a document that combines the two files, it is a corrupt file that will not open. 
    
    Both {Word} and {FrameMaker} have features that allow you to compose {Word} and FrameMaker documents out of smaller pieces. To a limited extent, they may even allow you to compose documents out of files other than their own. Some systems allow you to compose a document from many different source files. Usually, however, you must do at least some cleanup before you can use the imported files, particularly if they contain {media-domain} formatting information. This cleanup requirement usually means that this is a one-time import. You can't keep editing the original files and have the changes immediately reflected in the importing system.
    
    Therefore, organizations that require a high degree of composability often turn to structured writing to solve the composability problem. Structured writing can help several aspects of the composability problem.
    
    section: Combining the pieces
    
        The first requirement of composability is that you must be able to combine the pieces at the file level. Many computer file formats won't let you make a bigger file just by appending one file to the next or dropping parts of one file into another. They are not designed to work that way. Many let you add material to a file using cut and paste, but as discussed in [#chapter.reuse], you should avoid that method. You want an algorithm to do the composition, which means you need a format that lets you put the pieces together without turning the files into mush.   

        Most structured writing formats consist of a hierarchy of structures. Those structures tend to be self similar in form. For instance, all structures in an XML document are composed of XML elements. This means that you can take an XML document apart at any point in the structural hierarchy and insert, remove, or rearrange the structures at that level. To compose a larger structure out of smaller structures, you simply wrap new elements around them. Thus XML, and many other structured writing formats, provide a level of algorithmic composability often lacking in other formats.
        
    section: Combining structures
    
        The second requirement of composability is that the result of combining markup structures must be a valid document (must conform to the appropriate constraints for that document). The hierarchical nature of XML means that you could take a well-formed chunk of a {DocBook} file and drop in into the middle of a {DITA} file. The result would be an XML document that an XML parser could successfully parse, but it would not be conform to the constraints of either {DITA} or {DocBook}. The tool chains for either language would not be able to process it successfully. You need to do composition in a way that creates a document that meets the constraints of the target language. 
          
        The simplest way to assure this it to plan all of your pieces to fit the constraints of the documents they will be inserted into. The most obvious way to do this it to make sure that all of your pieces come from the same markup language. Thus DITA has good support for structural composability, but only for sources that are themselves DITA. 
        
        But belonging to the same markup language is not enough. Markup languages constrain where certain structures can occur and you must also make sure that the pieces go into a place where they are structurally allowed in that language. Just because all the pieces come from the same languages does not mean that every possible combination results in a valid document (just as you would not expect components of your car's exhaust system to bolt onto the steering column). Thus you cannot insert a DITA `steps` structure into a DITA concept or reference topic because `steps` are not permitted in those topic types. This requires planning and careful management to make sure the combinations you create are valid.
        
        However, it is not essential to composability that all the pieces you want to combine come from the same language as the document you are composing. You can also take content from different sources and with different structures, as long as you can transform their structures on input to match the structures of the destination document. In other words, you can transform as you compose. This can be a very powerful technique. For instance, you can use it to compose documents from content in a database. (Indeed, all database reporting systems are exactly this: systems that compose documents in one format from tabular data in another format.) At the structural level, composability depends on the semantic equivalence of structures, not common syntax.
        
        For this approach to work, however, it is important that all of the sources you draw from have a high level of {conformance} to their own constraints. If you don't know, or cannot rely on, the structure of the pieces you are drawing in, you cannot reliably combine them with an algorithm. Thus it is often better to focus on strategies for getting the most reliable sources rather that forcing everyone into a common format that they might not use reliably. For more on this, see [#chapter.conformance]. 
    
    section: Stylistic compatibility
    
        While composability of structures is vital, it is not always sufficient. You could have pieces in a {media-domain} language that are structurally compatible but formatted differently. The resulting document would be valid and would publish successfully, but it would be a mess of competing styles and fonts.  

        For practical purposes, then, you should not try to create composable content in the {media domain}. You should at least use the {document domain}. The {document domain} {separates content from formatting}(algorithm) so you can compose a document in the {document domain} and then apply consistent formatting to the result.  
        
        This is true even if the pieces are in different {document-domain} languages. All document-domain languages describe essentially the same set of abstract document structures -- document are documents after all, and they all have the same basic features. As long as you can recognize the same basic features in each of the source languages, you can compose a document from pieces in different document-domain languages by converting each piece to a common output language, which does not have to be the same language as any of the pieces you are composing it from. However, be aware that embedded {management-domain} markup may spoil the party because there is not the same level of semantic equivalence between management systems. Therefore, you generally should resolve management-domain structures before composition. One exception is if you use management-domain structures to control composition.

    section: Narrative flow
    
        Even if you can assemble pieces from different document-domain sources and format them all with a single consistent look, that does not mean that the result will be a complete, correct, coherent narrative. Creating a coherent narrative is not necessarily a matter of making the document sound like it came from a single person. Many business documents are created by several different writers, sometimes working together, sometimes inheriting and maintaining a document over time. Making such a document sound like it was written by one person is a tall order, but doing so is usually not necessary to achieve a desired business purpose. 
        
        What does matter is that the document be cohesive and coherent. The {terminology} should be consistent from beginning to end. The end should flow logically from the middle and the middle from the beginning. There should be no obvious duplication or omission of content. To achieve this requires constraints on the composition and style of your content.
        
        There are two approaches to narrative composition. One is the {information-typing} approach that you find in systems such as {DITA} or {Information Mapping}. In this approach, content is broken down into a set of broad types, such as procedure, process, principle, concept, structure, and fact (Information Mapping) or task, concept, and reference (DITA -- though DITA allows you to define other types though specialization). The idea behind the information-typing approach is that if you keep different types of information (for instance, conceptual and reference) in separate chunks, the chunks will compose more reliably, since you won't duplicate information between chunks of different types. (For more on these mechanisms, see [#chapter.heavyweight].)
        
        The difficulty with this approach is that these abstract categories don't always make a lot of sense to writers when they are writing about concrete subjects, and different writers may interpret the chunk types or their boundaries differently, resulting in material that does not compose as well as you might hope. 
        
        Also, this approach, while it has been shown to improve the quality of writing in some cases, can also impose an artificial clunkiness and lack of flow on the content, leaving it choppy or disjointed. Breaking content into separate chunks of different types, after all, is inherently about weakening the narrative threads that bind them together. And if you intend to reuse chunks in several different narratives, you must keep their attachment to any one narrative thread weak. 

        If you want to impose a specific rhetorical style or structure, any composition must be subject to the same rhetorical constraints as if the piece had been written as a whole. This is often difficult to achieve, not least because it is often difficult for writers to create material that conforms to a rhetorical structure when they can't see the whole structure. 

        The other approach to composing coherent narratives is to move content to the {subject domain}. A subject-domain structure does not have to be structured as a collection of abstract chunk types. The structure is specific to the subject matter and, therefore, is much more concrete and less susceptible to varying interpretation by writers. Also, you can use the subject domain to factor out many of the style issues that might otherwise compromise composability. (This is similar to factoring out formatting issues by moving from the {media domain} to the {document domain}.) A narrative can then be composed algorithmically by arranging well-identified pieces of information in a predetermined order, relieving the writer of that task.

        Obviously, though, this technique can only work with a limited range of content. Not all material fits into obvious, strongly typed {subject-domain} structures. Content that is more conceptual or theoretical in nature does not have a strong {subject-domain} structure because it does not approach its subject matter in such a systematic or regular way. Then again, the ability to compose such content out of existing pieces is limited anyway. By its very nature such content requires a continuous flow of exposition that is very hard to assemble from pre-written chunks.

        In short, then, composition is a useful technique in certain limited situations, but it cannot be applied across a broad range of content without doing serious damage to content quality. As I have stressed before, fixating on any one algorithm is dangerous. You can always eke out more reuse from a system by pushing composition past the point at which quality can be maintained. But the point is not to drive up your reuse statistics. The point is to ensure that every part of the complexity of the content process is handled by the person or process that has the skills, time, and resources to handle it properly. When it comes to composing effective narratives, the writer, not an algorithm, is often the one who can do the job best.  
    
    
    
    
