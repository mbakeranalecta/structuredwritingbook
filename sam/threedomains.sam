chapter:(#chapter.three-domains) How ideas become content

    <<<(annotations.sam)

    index:: type, term  
        concept, media domain
        concept, document domain
        concept, subject domain
        concept, structured writing domains

    To distribute complexity appropriately without overloading anybody or letting any of the complexity fall through to the reader, we must consider the content creation process as a whole. Let's start by looking at how content gets from ideas in a head to dots on a page or screen. 
    
    section: From ideas to dots

        The process of creating and delivering content consists of translating ideas (stuff someone thinks or knows) into a form that can be read (ink on a page, or pixels on a screen).

        >>>(image ../graphics/ideas2dots.xml)

        Structured writing applies a structured methodology to that process. It is a long road from ideas to dots, and structured writing techniques can be applied at many points along that road. Almost all writing done today uses structured writing techniques to one extent or another. The principles of structured writing apply across the spectrum, from the tools and techniques used in most offices today to the most sophisticated structured writing systems.
        
        All writing has structure in the literary sense of the word. Every comprehensible sentence has a grammatical structure. You may even have learned to diagram that structure in school.[*fn.sentence]

        footnote:(*fn.sentence)
            Copyright © 2012, Tjo3ya, CC BY-SA 3.0, [https://commons.wikimedia.org/w/index.php?curid=18312612]
        
        >>>(image ../graphics/sentence.xml)
        
        
        Just as all writing has at least a basic grammatical structure, all writing on a computer involves creating basic data structures. Thus, the only case in which no structured writing techniques are involved in the writing process is when an author writes down ideas with pen and paper and gives that paper directly to the reader. In this case, the entire writing process, from an idea to words on paper, takes place in the writer's head and hands.
        
        >>>(image ../graphics/ideas2dotsrecordend.xml) 

        Writers rarely record their ideas directly in the final physical form these days. For instance, the writer may write in a word processor, edit the text on screen, and press {Print}(guibutton) to send the content to a printer or {Send}(guibutton) to have the content rendered on a monitor. The point, along the journey from ideas to dots, where content is recorded has moved back just a little bit.
        
        >>>(image ../graphics/ideas2dotsrecordmid.xml) 

        Word processing, desktop publishing, and various approaches to structured writing all establish a point between ideas and dots where the content will be recorded and then provide algorithms to complete the journey from that point to dots on a page. 
        
        >>>(image ../graphics/ideas2dotsroles.xml)
        
    section: Algorithms

        I'm going to use the word {algorithm}(concept) a lot in this book. An algorithm is a formalized and consistent way to do something. If you give an algorithm the same inputs, it should always produce the same outputs every time you run it. A computer program is an encoding of an algorithm that a computer can execute. A program describes an algorithm to a computer, but you do not need to be a programmer to design an algorithm. 

        !!!(RLH)
            This point is critical, but it appears here out of the blue. You're getting started with domains, and then all of a sudden you're talking about algorithms. I think this introduction to algorithms should appear much earlier in the book, probably in the introduction. As a side note, There still isn't a section that says something like, "This book has five major sections: Domains: ... Algorithms ... Structures ... Languages ... and Design, along with a brief description of each section and how they fit together. That will help avoid having to insert a description of algorithms in this section, just as you should be getting to domains. Instead, you would already have introduced the term and you can refer to it as needed.

        Algorithms are fundamental to structured writing. Algorithms and structures work together, and you can't design one without the other. The reason you add structure is to enable algorithms. The heart of this book describes the principal structured writing algorithms and the structures that support them. The structures support the algorithms by constraining the content. 

        We also create structures to constrain the rhetoric of a document, but when we do so, we need algorithms to transform the rhetorically structured document into a form suitable for publication, so algorithm and structure still go hand in hand. 
        
        Algorithms apply rules to data that follows rules. If the data does not follow the rules, then the rules applied by the algorithms will not work. If you want algorithms to process your content, therefore, it has to follow the rules laid down for input to that Algorithm. If you want a browser to display your document, it needs to follow the rules of HTML. Structures constrain content to make sure it obeys the rules that the algorithms expect it to obey. But it is not sufficient to obey the rules, you also have to explicitly record that you have obeyed them. The algorithm uses that explicit recording to interpret the content so it can process it.  

        !!!(RLH)
            This is the second definition of structured writing in this book. You have another one back in the Preface.
        
        This leads us to a working definition of structured writing for purposes of this book:
            
        """
            Writing that follows a set of constraints and records that it has done so. 
            
        For instance, let's say that you have a constraint that every section must start with a title. You can follow this constraint in just about any tool you choose. You could even follow it when writing by hand on paper. But if you choose a structured writing format, such as {DocBook}, you can both follow this constraint and record that you have followed it:

        ```(xml)
            <section>
                <title>The quick brown fox</title>
                <para>The quick brown fox jumps over the lazy dog.</para>
            </section>
            
        This markup records that you have followed the constraint by identifying the title using the XML `title` element. This constrains the interpretation of the string "The quick brown fox" by algorithms. Algorithms can now do things such as:
        
        * Check that all sections start with titles (that is, check that the constraint has been followed)
        * Format all section titles the same way
        * Create a list of all the section titles in the document (perhaps to create a table of contents)
               
        Recording constraints is key because it allows information to be passed reliably from one person or process to another.
            
        Generally speaking, the more you constrain content with structure, the more accessible it becomes to algorithms and the more opportunities you gain to distribute complexity effectively. This means recording the content at a point nearer to ideas in your head and further from dots on a page. The nearer you are to ideas, the more you know about what the content says as opposed to what a page looks like and the more effectively you can constrain the creation and interpretation of the text. 
        
        We can describe this process of earlier recording in terms of three domains, each domain reflecting a stage in the progress from ideas to dots. The domains are the media domain (which is concerned with lines and dots on paper or screen), the document domain (which is concerned with the expression and organization of documents), and the subject domain (which is concerned with the subject matter that we write about). 
        
 
    section: The three domains

        Let's suppose you want to write a recipe for chicken noodle soup. You start out with the idea of a soup made with chicken and noodles. This is an idea about the subject matter and not yet any form of content. 

        >>>(image ../graphics/soup1.xml)

        You then decide to name the dish “Chicken Noodle Soup.” You figure out which ingredients to use and how to make the dish. This is all information about making chicken noodle soup but it is not yet part of a document. It is information in the {subject}+(italic) domain.  
        
        >>>(image ../graphics/soup2.xml)

        Then, you decide how to present this information to help other people make Chicken Noodle Soup. You decide to have a title, a picture, an introduction, a list of ingredients, and a set of preparation steps. At this point, you are no longer gathering information, you are focused on presenting the information you have gathered. These are decisions in the {document}+(italic) domain. Documents are how we organize and present information. (As we will see, however, some document types, such as recipes, are specific to a particular subject, and there is considerable overlap between document and subject domain considerations in their design, which may or may not be reflected in how they are recorded.)

        >>>(image ../graphics/soup3.xml)

        Then, you consider how the document will look on screen or on paper. What font will you use for the heading and the body text. How large will the heading and the body be. Will the quantity of the ingredients be flush right? Will there be leading dots? Will the presentation steps be numbered or just presented sequentially?  How big will the picture be? Will the text wrap around it? These are decision in the {media}+(italic) domain. 
        
        >>>(image ../graphics/soup4.xml)
       
        All content passes through the three domains. Content always begins with thinking about subjects in the real world. You decide to express ideas about those subjects in words. You collect those ideas and determine an order and structure to express them. Finally, you decide how they will be formatted in a particular medium. The question is, where in this process do you start recording the content? 
        
        Do you format your content as you write? Then you are working in the media domain. 
        
        >>>(image ../graphics/soup5.xml)
        
        
        Do you record presentation units such as lists, headings, and steps without associating formatting? Then you are working in the document domain. 
        
        
        >>>(image ../graphics/soup6.xml)
        
        Do you record the raw information as data, for instance, identifying ingredients as ingredients and quantity as quantities, rather than as list items? Then you are working in the subject domain. 
        
        
        >>>(image ../graphics/soup7.xml)
        
        If you recorded your content in the media domain, it is ready to publish. 
        
        
        >>>(image ../graphics/soup8.xml)
        
        If you recorded it in the document domain, then it needs to be formatted for each target medium before it can be published.
        
        
        >>>(image ../graphics/soup9.xml)
        
        If you recorded it in the subject domain, then it needs to be organized into a document before it can be published.
                
        >>>(image ../graphics/soup10.xml)
              
        At the beginning of this section I described the three domain in terms of the decisions that must be made in each domain. All of these decisions, from all three domains,  have to be made for every document that you produce. When you record content in the media domain, you make decisions in all three domain as you write. When you record content in the document domain, you make decisions in the subject and document domains and defer media-domain decisions to algorithms. When you record content in the subject domain, you make decisions in the subject domain and defer document- and media-domain decisions to algorithms. 

        Recording content earlier in the process reduces the number of decisions you have to make while writing (reducing the complexity of the writing task), while preserving the ability to make different decisions later. This shift can have profound effects on the efficiency of your process and the usefulness of your content. 

        That is the promise of structured writing. However, it is not always as clear and simple as that makes it sound, since structured writing introduces decision-making requirements and, therefore, complexity of its own. The next three chapters look at what it is like to write in each domain. In [#part.algorithms] and [#part.structures] we will look at the sources of complexity in structured writing itself and how best to manage them. 
