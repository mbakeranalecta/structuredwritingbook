!smart-quotes: on
chapter:(#chapter.subject-domain) Writing in the Subject Domain

    <<<(annotations.sam)
    
    index: type, term
        concept, subject domain

    If the {media domain} is concerned with what the content looks like and the {document domain} is concerned with how the content is organized into a document, the {subject domain} is concerned with the subject matter of the content. Subject domain structures tell you what the content is about. 
   
    A recipe is a useful example for illustrating the subject domain. [*ex.subj-restructured] is a recipe written in {reStructuredText}(language), a lightweight general purpose {document domain} markup language:
  
    figure:(*ex.subj-restructured) Recipe for hard-boiled eggs marked up in reStructuredText
        ```(reStructuredText)
            Hard-Boiled Eggs
            ================
            A hard-boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.

            Ingredients
            -----------
                ======  ========
                Item    Quantity
                ======  ========
                eggs    12
                water   2qt
                ======  ========
                
            Preparation
            -----------
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
    
    In {reStructuredText}, text underlined with equals signs is a major heading and text underlined with dashes is a minor heading. You create a table by using equals signs to mark the beginning and end of the table and the boundary between the table head and the table body. You place each row on a new line and mark columns by putting spaces in the rows of equals signs. You create ordered lists by putting numbers in front of lines of text. The equivalent HTML document to [*ex.subj-restructured] would look like [*ex.subj-html].

    figure:(*ex.subj-html) Recipe for hard-boiled eggs marked up in HTML
        ```(HTML)
            <html>
                <h1>Hard-Boiled Eggs</h1>
                
                <p>A hard-boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.</p>
                
                <h2>Ingredients</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>eggs</td>
                            <td>12</td>
                        </tr>
                        <tr>
                            <td>water</td>
                            <td>2qt</td>
                        </tr>
                    </tbody>
                </table>
                <h2>Preparation</h2>
                <ol>
                    <li>Place eggs in pan and cover with water.</li>
                    <li>Bring water to a boil.</li>
                    <li>Remove from heat and cover for 12 minutes.</li>
                    <li>Place eggs in cold water to stop cooking.</li>
                    <li>Peel and serve.</li>
                </ol>
            </html>
    
    The document shown in [*ex.subj-html] follows the normal rhetorical pattern of a recipe. That is, it has all the pieces of information a recipe normally has, in the order they normally occur in a recipe: introduction, list of ingredients, preparation steps. However, it does not record the fact that it follows this rhetorical pattern. There is nothing in the markup to say that this is not a novel, a car manual, or a knitting pattern. Nor does the markup constrain a writer to follow the normal rhetorical pattern of a recipe while writing.
    
    Moving this document to the subject domain allows you to impose these rhetorical constraints and requires the writer to record that they have followed them. Neither {reStructuredText} nor {HTML} gives you a way to do that, so you need a different markup language. [*ex.subj-sam] shows what that might look like:    

    figure:(*ex.subj-sam) Recipe for hard-boiled eggs marked up in a subject-domain language
        ```(sam)
            recipe: Hard-Boiled Egg
                introduction:
                    A hard-boiled egg is simple and nutritious. 
                    Prep time, 15 minutes. Serves 6.
                ingredients:
                    * 12 eggs
                    * 2qt water
                preparation:
                    1. Place eggs in pan and cover with water.
                    2. Bring water to a boil.
                    3. Remove from heat and cover for 12 minutes.
                    4. Place eggs in cold water to stop cooking.
                    5. Peel and serve.

    This structure breaks the document into a collection of named structures -- introduction, ingredients, and preparation -- which are contained in an overall structure called `recipe`. This is the basic rhetorical structure of a recipe. This markup clearly identifies this as a recipe (not a novel, a car manual, or a knitting pattern), and the writer is explicitly guided to follow this pattern. Also, the writer must present the ingredients as an unordered list and the preparation as a numbered list. ([#chapter.conformance] looks at how to express and enforce such constraints.)

    In other words, in this example, someone other than the writer has made certain basic rhetorical decisions about how to write a recipe -- let's call that person an {information architect}, though this is not always the responsibility of people with that title. By making this rhetorical structure explicit, the information architect communicates this requirement to writers, which simplifies their task because they no longer need to make this decision for each recipe they write. It also ensures that all recipes follow this pattern. 

    The subject domain overlaps with the document domain in that the the structure for discussing a particular subject is also a document type. That is, a recipe is a specific type of document. In fact, the word recipe is specifically a type of document. The word for the dish you make by following the recipe is "dish". A generic document domain language like {reStructuredText} lets you write a recipe or any other kind of document you like. A specific recipe markup language constrains the writer to follow a particular rhetorical pattern when writing about how to prepare a dish. Thus the use of the {subject domain} allows you to place specific rhetorical constraints on specific document types. 

    (I should note here that there are specific rhetorical structures that are not based on individual subjects but on other factors, like know-good methods of exposition that may be used with multiple subjects. I will look at these [#chapter.rhetorical_structure].) 

    This does not mean we are entirely in the subject domain, any more than moving from a {vector graphics} program to a {word processor} meant we were entirely in the {document domain}. This recipe markup language enforces a couple of basic rhetorical decisions about recipes, but leaves plenty of others to the writer. Few markup languages are entirely in one domain. Later, you'll see how to move this recipe markup further into the subject domain, capturing more rhetorical decisions in the markup language design.
                  
    But the subject domain is not just about enforcing rhetorical decision on writers. It is better to factor out a decision than to enforce it, and even this very simple subject domain markup factors out a couple of rhetorical decisions. This means that the writer neither makes nor implements those decisions. An {information architect} makes the decisions and then designs an algorithm to implement them.

    Suppose you decide that the ingredients and preparation sections of each recipe should be titled "Ingredients" and "Preparation." If your writers write recipes in the {document domain} using a language such as {Markdown}, they have to remember to execute this decision each time. But in this  {subject domain} example, the titles are factored out. Instead there are markup structures called `ingredients` and `preparation` that don't contain titles. A {publishing algorithm} adds the titles later.
    
    This partitioning of tasks requires the writer to record enough information for the publishing algorithm to do its job. Here the presence of the `ingredients` and `presentation` sections in the recipe structure provides the information the algorithm needs to insert the appropriate titles.
    
    By factoring out titles, you also factor out the constraint on what those titles must be. You don't need to remember the title text, and a whimsical writer can no longer decide to re-title these sections "Stuff you need," "Stuff you do," or some other variant. And you can change these titles across all recipes, including those that are already written, by changing the algorithm. 

    This illustrates why it is generally preferable, where possible, to factor out a decision rather than to enforce it. An enforced decision may be made correctly and consistently, thanks to the constraint, but it has still be made by the author and it is recorded in the content as a _fait accomplis_. It can only be changed by changing the content. A decision that has been factored out can be made and changed later without affecting the content, opening up a number of possibilities that we will explore in later chapters. 
           
    That said, enforcing constraints is a powerful tool. If you publish a lot of recipes, you probably have many more rhetorical decisions you would like to be made consistently. For instance, you might want every recipe to state its preparation time and the number of people it serves. In our subject-domain markup, we can enforce and record that constraint by moving that information from the introduction section to separate fields (see [*ex.subj-add-constraint]).

    figure:(*ex.subj-add-constraint) Recipe with preparation time and servings added
        ```(sam)
            recipe: Hard Boiled Egg
                introduction:
                    A hard boiled egg is simple and nutritious.
                ingredients:
                    * 12 eggs
                    * 2qt water
                preparation:
                    1. Place eggs in pan and cover with water.
                    2. Bring water to a boil.
					
                    3. Remove from heat and cover for 12 minutes.
                    4. Place eggs in cold water to stop cooking.
                    5. Peel and serve.
                prep-time: 15 minutes
                serves: 1

    Now, the writers no longer have to remember that this information is required and where it should appear. The information is partitioned off into separate fields. The system prompts the writers for those fields and will raise errors if they forget. And the decision about where to include this information in output formats has been transferred to an algorithm. 

    This does not mean that the prep-time and serves information must be displayed as separate fields in the output. You could display this information in separate fields so that readers can find it more easily, but you could also have the {publishing algorithm} construct sentences such as "Prep time, XX minutes. Serves YY." using the `prep-time` and `serves` field values for XX and YY. 

    And once again, factoring out a decision means that we gain the ability to make other rhetorical decisions down the road. But here the possibilities gained are much broader.  For instance, you can easily create a cookbook of recipes that take 30 minutes or less, because you can query your recipes and select just those where the `prep-time` field has a value of 30 minutes or less.
    
    Something interesting has happened here. To enforce a rhetorical constraint -- that you must specify prep time and number of servings -- we have moved away from markup that specifies presentation to markup that merely records data. In other words, `prep-time` and `serves` are data-oriented {subject-domain} structures that do not specify presentation at all. In enforcing one rhetorical decision (always include prep time and serves), we have factored out another rhetorical decision (how and where prep time and serves are expressed). Partitioning this required information from the presentation of the recipe shifts responsibility for conformance from the writer to the constraints imposed by the structures, making the design more testable and {repeatable}. 
    
    Factoring out a constraint rather than enforcing it can be a difficult idea to adjust to. Our natural first instinct when trying to achieve a  particular presentation is to specify it in detail. But this can be difficult, especially for rhetorical constraints such as requiring a recipe to contain certain pieces of information. Nor is it flexible if you want to vary the presentation. When you look at these kinds of problems, the first question should be, "Is there any way to factor out this constraint"? Impose a constraint only if you cannot factor it out. 

    When you _enforce_ a constraint, the information architect has made the decision, but the writer must execute that decision in the content. When you _factor out_ a constraint, the information architect has still made the decision, but an algorithm executes the decision, rather than the writer. Not only does this make the writer's job simpler, but it helps ensure conformance to the constraint and allows you to change the decision without changing the writer's content.

    However, there is another pattern here that we will see recurring in future chapters: in the act of factoring out one constraint, we often impose another. When we factored out list formatting we introducd a constraint on how to create lists in the document domain. When we factored the need to remember to include prep time in the introduction we created an additional required field in the recipe structure.  This makes designing a structured writing system something of an iterative process. So let's perform another iteration of this refactoring into the subject domain.
    
    The reStructuredText version in [*ex.subj-restructured] presents ingredients in a table, and the recipe structure in [*ex.subj-sam] uses a simple list. The block that contains the list is labeled "ingredients," but the list is just an ordinary unordered list. The ingredient list in a recipe has rhetorical constraints, but the markup doesn't impose or record those constraints.
     
    The rhetoric of an ingredient listing includes three pieces of information: the name of the ingredient, the quantity, and the unit of measure used to express the quantity. These can be presented as a list or a table. To factor out the presentation choice, you can create an ingredient structure that calls out each piece of information separately (see [*ex.subj-ingredient-1]).

    figure:(*ex.subj-ingredient-1) Subject-domain markup for ingredients
        ```(sam)
            ingredients:
                ingredient: 
                    name: eggs
                    quantity: 12
                    unit: each
                ingredient:
                    name: water
                    quantity: 2
                    unit: qt

    [*ex.subj-ingredient-2] shows a shortcut that makes this markup less verbose. (This is a markup syntax named {SAM} that I will talk about later).

    figure:(*ex.subj-ingredient-2) Subject-domain shortcut for ingredient markup
        ```(sam)
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt

    This markup turns the ingredients into a set of records with named fields: ingredient, quantity, and unit. This ensures that writers capture all three pieces of information and because the markup is independent of any one form of presentation, you are now free to use an algorithm to present them as a table, as a list, or in some other form. 

    But in the subject domain we get another set of benefits. The explicit markup of the subject matter lets us access this content as data and run algorithms on that data to produce new and different forms of content (something I will explore in more depth in [#chapter.generate]). For instance, it would allow us to convert measurements from imperial to metric units so we could publish our recipes in countries that use the metric system. 
    
  
    section: Using subjects to establish context

        In [#chapter.document-domain], I noted that you can use context to identify the role that structures play in a document, which allows you to get away with fewer structures. For instance, you can use a single `title` tag for all titles because you can differentiate different types of titles from the context in which they occur. The same is true with subject-domain structures. They can provide context that allows you to treat basic text structures differently. 
            
        Consider our markup language for recipes ([*ex.subj-recipe-sam]).

        figure:(*ex.subj-recipe-sam) Subject-domain markup for recipes
            ```(sam)
                recipe: Hard Boiled Egg
                    introduction:
                        A hard boiled egg is simple and nutritious.
                    ingredients:: ingredient, quantity, unit
                        eggs, 12, each
                        water, 2, qt
                    preparation:
                        1. Place eggs in pan and cover with water.
                        2. Bring water to a boil.
                        3. Remove from heat and cover for 12 minutes.
                        4. Place eggs in cold water to stop cooking.
                        5. Peel and serve.
                    prep-time: 15 minutes
                    serves: 6
        
        With the ingredients we saw that you need to add additional structure to factor out whether the ingredients would be presented as a list or a table. For the preparation, the steps are currently marked up as a numbered list.  Suppose you want to present the steps as steps, rather than just as a generic numbered list (for instance, by labeling them as *Step 1.*, etc, rather than just *1.*). Do you need to create an additional `step` structure to do this? Not necessarily. In this case, you can distinguish an ordinary ordered list from a set of preparation steps based on context and write a rule in the {publishing algorithm} that creates special formatting for ordered lists that are the children of `preparation` structures that are children of `recipe` structures. This uses the same method we used in [#chapter.document-domain] to format a nested list differently from its parent list based on context. This is another example of how structure creates context that you can use to simplify processing.
                
            
