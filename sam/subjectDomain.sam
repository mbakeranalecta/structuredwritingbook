chapter:(#chapter.subject-domain) Writing in the Subject Domain

    <<<(annotations.sam)
    
    index: type, term
        concept, subject domain

    The {subject domain} is concerned with the subject matter of a text. It includes both the rhetoric of a subject -- the particular way in which information on a subject is expressed and presented for a particular audience and purpose -- and with the identification of subjects expressed in the content. 

    Of course, a writer always has a particular rhetorical strategy in mind when they write a document. The difference between working in the {document domain} and working in the {subject domain} is that in the {subject domain} that rhetorical strategy (or the identity of subjects) is explicitly recorded whereas in the {document domain} it is not. 

    This is not necessarily an all or nothing distinction. A markup language may record some, but not all, or the rhetorical strategy and/or some, but not all, of the identity of subjects mentioned in the text. Few markup languages are entirely in the {document domain} or entirely in the {subject domain}, though most can be fairly identified as predominantly document domain or predominantly subject domain.  
    
   
    A recipe is a useful example for illustrating the use of the subject domain. Here is a recipe written in {reStructuredText}(language), a lightweight general purpose document domain markup language:
  
    figure:
        
        ```(reStructuredText)
            Hard Boiled Eggs
            ================
            A hard boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.

            Ingredients
            -----------
                ======  ========
                Item    Quantity
                ======  ========
                eggs    12
                water   2qt
                ======  ========
                
            Preparation
            -----------
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
    
    In {reStructuredText}, a line underlined with equals signs is a major heading and one underlined with dashes is a minor heading. A table is created by using equals signs to mark the beginning and end of the table and the boundary between the table head and the table body. Rows are separated by new lines and columns by spaces in the rows of equals signs. Numbered lists are created by putting numbers in front of lines of text. The equivalent HTML document would look like this:

    ```(HTML)
        <html>
            <h1>Hard Boiled Eggs</h1>
            
            <p>A hard boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.</p>
            
            <h2>Ingredients</h2>
            <table>
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>eggs</td>
                        <td>12</td>
                    </tr>
                    <tr>
                        <td>water</td>
                        <td>2qt</td>
                    </tr>
                </tbody>
            </table>
            <h2>Preparation</h2>
            <ol>
                <li>Place eggs in pan and cover with water.</li>
                <li>Bring water to a boil.</li>
                <li>Remove from heat and cover for 12 minutes.</li>
                <li>Place eggs in cold water to stop cooking.</li>
                <li>Peel and serve.</li>
            </ol>
        </html>
    
    This document follows the normal rhetorical pattern of a recipe. That is, it has the things a recipe normally has, in the order they normally occur in a recipe: introduction, list of ingredients, preparation steps. However, it does not record the fact that it follows this rhetorical pattern. There is nothing in the markup to say that this is not a novel, a car manual, or knitting pattern. Nor would the markup constrain an author to follow the normal rhetorical pattern of a recipe while writing.
    
    Moving this document to the subject domain would allow us to impose these rhetorical constraints, and to record that we have done so. Neither {reStructuredText} nor {HTML} give us a way to do that, so we will need a different markup language. Here's what that might look like:    

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.

    This structure breaks the document up into a collection of named structures. Those structures are "introduction", "ingredients", and "preparation" and they are contained in an overall structures called "recipe". This is the basic rhetorical structure of a recipe. This markup make it explicit that this is a recipe (not a novel, a car manual, or a knitting pattern). The author is explicitly guided to follow this pattern. They are also constrained to present the ingredients as an unordered list and the preparation as a numbered list. ([#chapter.conformance] will look at how such constraints are expressed and enforced.)
                
    One of the common patterns of structured writing is the partitioning out of invariants. One of the invariants of the recipe pattern is that it has sections titled "Ingredients" and "Preparation" (or words to that effect). Notice that these titles been partitioned out here. The titles are part of the rhetorical structure of a recipe, and since the markup now models the rhetorical structures, we can factor out the titles themselves by creating structures called `ingredients` and `preparation`. Since we need those sections to record the rhetorical pattern we have followed, the titles are redundant in our source and can be partitioned out and can be added back into the content by an algorithm at publishing time. 
    
    Partitioning requires that we pass enough information to the partition to do its job. Here the presence of the `ingredients` and `presentation` sections in the recipe structure provide the information that the algorithm needs to insert the appropriate titles.
    
    By factoring out titles, we factor out the constraint on what those titles must be. An author no longer has to remember the standard titles to use, and a whimsical author can no longer decide to title these sections "Stuff you need" and "Stuff you do", or any other variant of the standard that the organization has chosen. If we want to change these titles across all the recipes, on the other hand, we only have to change the algorithm.
           
    If your organization publishes a lot of recipes, you probably have a lot more constraints on the rhetorical structure of your recipes. For instance, you might have a constraint that every recipe must state its preparation time and the number of people it serves. In our subject domain markup, we can enforce and record that constraint by moving the information from the introduction section to separate fields:

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 1

    This approach changes the partitioning of the prep-time and serves information. Previously, writers had to remember the requirement to mention these facts in the text of the introduction. Now we have partitioned them off into simple fields that the writer is required to fill out. The writer no longer has to remember the presentation rules that dictate that this information is required and where it should appear. They are prompted for it directly and errors will be raised if they forget, and the decision about where to include it has been transferred to an algorithm. 

    Does this mean that the preparation time will now be displayed as separate fields in the output, rather than in-line? Not necessarily. It might be a good idea to call it out in separate fields so that readers can find the information more easily, but if you really wanted that information at the end of the introduction in every recipe, it would be a simple matter for the {presentation  algorithm} (see [#chapter.publishing]) to construct the sentences "Prep time, 15 minutes. Serves 6." from the `prep-time` and `serves` field values. 
    
    So, something interesting has happened here. In order to enforce a rhetorical constraint -- that prep time and number of servings must be specified -- we have moved away from markup that specifies presentation to markup that merely records data. In other words, `prep-time` and `serves` are data-oriented {subject domain} structures that do not specify presentation at all. We are now partitioning the presentation of the recipe from the information the recipe must contain. This allows us to shift responsibility for conformance to our requirements from the author to a {conformance algorithm}. This makes our design more testable and more {repeatable} -- a welcome redistribution of complexity. 
    
    This is a recurring pattern in structured writing, and one of the most important things to understand about how structured writing works. It is almost always better to factor out a constraint than to enforce it. This can be a difficult idea to adjust to. If we have a particular form of presentation we want to achieve, our first instinct naturally is to specify it in detail. But this is not always easy to do, especially if you want to specify that a paragraph should always contain certain pieces of information. Nor is it flexible if you want to vary the presentation for any reason (we will look at some reasons why you might in [#chapter.single-sourcing]). It is important to condition yourself so that when you look at these kinds of problem the first question you ask yourself is, is there a way I can factor out this constraint. Only resort to trying to impose a constraint if it is not possible to factor it out.  
    
    By the way, using data-oriented {subject-domain} markup like this also offers some interesting publishing possibilities. For instance, with this markup in place, you could easily query your set of recipes to create a cookbook of recipes you can make in 30 minutes or less because you can query your set of recipes and pull out just those in which the `prep-time` field has a value of 30 minutes or less.

    Are there other elements of presentation that we can factor out of the recipe structure? As we noted, the reStructuredText version above uses a table presentation for the ingredients. Our recipe structure currently specifies a simple list. The block that contains it is labeled "ingredients", but the contents of the block is just an ordinary unordered list. 
     
    There is a constraint here about how ingredients are expressed, one which authors need to follow, but one that our markup does not yet impose or record. The specification of ingredients in a recipe generally requires three pieces of information, the name of the ingredient, the quantity, and the unit of measure used to express this quantity. These can be presented as a list or a table. To factor out the presentation choice, we can create an ingredient structure that calls out each piece of information separately:

    ```(sam)
        ingredients:
            ingredient: 
                name: eggs
                quantity: 12
                unit: each
            ingredient:
                name: water
                quantity: 2
                unit: qt


    There are some shortcuts we can take to make this markup less verbose. (This is a markup syntax named SAM that I will talk about later):

    ```(sam)
        ingredients:: ingredient, quantity, unit
            eggs, 12, each
            water, 2, qt

    This markup turns the ingredients into a set of records with named fields for ingredient, quantity, and unit. This enforces and records that the constraint on ingredients is followed. And because the way they are recorded is independent of any one form of presentation, we are now free to use an algorithm to present them either as a table or as a list. 
    
    By adding and recording these constraints, we get similar benefits as before. We can better enforce any constraints we have about how ingredient lists are structured and formatted, and we gain access to the specific data involved, meaning, for example, that we could write an algorithm to convert our units from imperial to metric for publication in markets where metric units are preferred.
       
    section: The role of the subject domain
    
        We don't always use the {subject domain} for an entire document.         Sometimes the use of the subject domain is a minor part of a primarily {document domain} language. For example, {DocBook} includes subject domain tags like {GUILabel}(structure(DocBook)) for references to part of a computer display. 
        
        Conversely, most subject domain languages also contain some {document domain} text structures like paragraphs and lists. It is usually not possible to break your treatment of a subject down completely into named fields, after all, and the subject domain cannot represent the entire argument of a piece of content. For the rest we use text, and we organize that text in document domain structures. 
        
        When we do create a subject domain document, we may go to different lengths in factoring out content into subject-domain fields. Some subject domain document types are mainly focused on dictating the rhetorical structure to be used for handling a particular subject. It is defining the rhetorical construction of a recipe document. This is what we did in the first subject domain refactoring of our recipe example. This approach does not typically give us much access to the information in the document, it merely governs it shape. 
        
        When we start to pull out the prep and serves numbers and turn the ingredients list into a fielded data structure, however, we are factoring out the specifics of recipe presentation and focusing on the elements of recipe as data. This gives us presentation independence, but it also give us access to the data in the document. Getting access to the data in a document can be key to many of the structured writing algorithms, as we will see in subsequent chapters.
        

    

    section: Using subjects to establish context

        In [#chapter.document-domain], we noted that we can use context to identify the role that certain structures play in a document, which allows us to get away with fewer structures. For instance, we can use a single `title` tag for all titles because we can tell what kind of title each one is from the context in which it occurs. The same is true with subject domain structures. They can provide context that allows us to treat basic text structures differently. 
            
        Consider our markup language for recipes:

        ```(sam)
            recipe: Hard Boiled Egg
                introduction:
                    A hard boiled egg is simple and nutritious.
                ingredients:: ingredient, quantity, unit
                    eggs, 12, each
                    water, 2, qt
                preparation:
                    1. Place eggs in pan and cover with water.
                    2. Bring water to a boil.
                    3. Remove from heat and cover for 12 minutes.
                    4. Place eggs in cold water to stop cooking.
                    5. Peel and serve.
                prep-time: 15 minutes
                serves: 6
        
        With the ingredients, we saw that we needed to add additional structure to factor out whether the ingredients would be presented as a list or a table. For the preparation, the steps are currently marked up as a numbered list.  Suppose we want to present the steps as steps, rather than just as a generic numbered list (for instance, by labeling them as *Step 1.*, etc, rather than just *1.*). Do we need to create an additional `step` structure to do this? Not necessarily. In this case we can can tell the difference between an ordinary ordered list and a set of preparation steps based on context. We can write a rule in the {presentation algorithm} that creates special formatting just for ordered lists that are the children of `preparation` elements that are children of `recipe` elements (just as we could create rules to format a nested list differently from its parent list based on its context in [#chapter.document-domain]). This is another example of how partitioning creates context which simplifies various publishing functions.
                
            
