preface:(#preface) Preface

    Structured writing is often presented as the cure to content silos[*fn.silos] in an organization. But the world of structured writing is itself a world of silos, consisting of individual structured writing systems of various levels of complexity and capability, each with its own vocabulary, tools, and fan base.

    footnote:(*fn.silos)
        The term "content silo" is often used to describe a situation in which different divisions of an organization create content in isolation without sharing information, processes, standards, or tools with the rest of the organization. This sometimes results in discrepancies in content or style, or in redundant work.
 
    There are the heavyweights like DITA, DocBook, and S1000D; the lightweights like MarkDown, ReStructuredText, and ASCIIDoc; the niche players, like JavaDoc and LaTeX; the technical tools, like XML, YAML, and JSON, and the structural theories like Information Mapping. However, while there is certainly some commerce between these worlds, there is not a great deal of mutual understanding, and to many people working in the field, their particular silo is the whole of structured writing. For some, structured writing means DITA and nothing else. For others, it means Information Mapping and nothing else. 
    
    Almost nowhere will you find advocacy for structured writing in its own right. It will almost always be advocacy for one of its silos: one language or another, one standard or another, one tool or another, often presented as the panacea that cures all content ills. 

    This situation is a huge impediment to developing better content practices for organizations of all sizes.  The range of capability offered by structured writing as a whole greatly exceeds the capabilities of any one system. Of course, no actual working system ever can or should include every possible feature or capability. The problem with structured writing silos is that they constrain people's vision of what is possible. To create the right box you must first be able to think outside the box. The siloed nature of the structured writing space limits not only capability but the understanding of possibilities and thus the ability to make optimal choices.
  
    In this book, I break down the silos of the structured writing world by explaining what structured writing is and what it is capable of. I frame structured writing as a way to partition the complexity of any content process to make sure that everything is handled by the person or process with the skill, knowledge, and resources to handle it. And I frame this in terms of two key performance goals: the creation of consistent, high-quality content and the efficient use of time and resources.

    All too often, structured writing is presented or adopted as a cost-saving measure with little or no thought given to maintaining or improving quality. Often, the result is a breakdown of quality due to increased complexity and the pressure of constraints that are unrelated to quality and often inimical to it. Ironically, this often leads to the loss of the sought-for cost savings as writers work around the system to try to maintain the quality that has been lost. 

    The need to break down the silos of the structured writing world has never been more urgent. As information sets become larger, more integrated, more active, and more volatile, the ability to keep up, to manage everything, and, above all, to maintain quality while working at an ever increasing pace, becomes ever more important. 

    Despite these urgent requirements, there is disillusionment with structured writing in many quarters, often born of unhappy experiences in one of the structured writing silos. But if we look at structured writing as a whole, it is possible to create structured writing environments that handle the challenges of a modern content organization while enhancing quality and providing a greatly simplified authoring experience for all contributors and a more robust and effective management experience for content owners and managers. 

    My aim in this book is to break down the silos of the structured writing world, to provide a framework for understanding the possibilities and methodologies of structured writing as a whole, and to show where some of the major structured writing silos fit in that picture today. 

    Whether you are living and working in one of the structured writing silos today, are contemplating a move to structured writing or one of it silos, or are simply looking for a way to improve your content process and the quality of the content you produce, this book will show you what is possible, help you understand were your present tools and processes fit in the structured writing landscape, and help you figure out where you want to go next. 

    I have been in the structured writing industry for nearly 25 years. In that time I have worked in many of its silos, and broken out of them several times. I have built tools and systems myself (some of which I will talk about in this book), but my aim has never been to set up my own silo to rival the rest, but to show what is really possible. 

    One of the things I have learned over my career is just how much our minds tend to follow the ruts laid down by our familiar tools and processes. I can't count the number of requirements documents I have read over the years that insisted that any new system must work exactly like the old system in almost every particular. I don't believe this is so much a reluctance to change as simply a difficulty imagining how things can be done differently. Making sure that a new system does everything you need doing often means specifying that it does everything the way you are doing it now. 

    Every tool we use encapsulates a methodology, a set of choices about how a problem should be partitioned and addressed. If we learn a job using one tool, we tend to learn the partitioning and methodology of that tool as if it were the partitioning and methodology of the craft itself. This is how individual tools become silos for the mind, constraining our ideas about how things are done. 

    It has been my particular privilege and opportunity to work some of those rare people whose minds seem to be immune to such ruts, and who were able to jog me out of my own ruts, to help me see past the walls of the silos I had worked in. To name a dozen would be to neglect a score, but one name in particular deserves mention: Sam Wilmott, principle architect of the OmniMark programming language and all round markup language savant. Sam taught me to see the relationship of text and algorithms in a fundamentally new light and everything I have done in my career leading up to the writing of this book has been working out the implications of what I learned from Sam. The SAM markup language I use for most of the examples in this book is an homage to Sam, and not just in its name. 
