!smart-quotes: on
preface:(#preface) Preface

    All writing is structured. Writing without grammatical structure would be incomprehensible. All writing software is structured as well. Software that did not produce reliable, consistent data structures would be unreliable and unworkable. 

    What then does the structured writing community mean by structured writing? As a generality, it means approaches to writing that add a little more structure, over and above the basic requirements of grammar, to exercise some control over the rhetoric or processing of the content. And it also means the use of software that uses more specific data structures, either to support the rhetorical structures of a structured writing method or to support specific writing processes, such as publishing, single sourcing, or content reuse.

    So when the industry talks about structure writing methods and tools, it is actually talking about _differently structured_ methods and tools. But your won't find one agreed definition of structured writing across the industry. Differently structured writing methodologies are often tied to differently structured software tools. This often leads the marketers of these methods and tools to suggest that their particular methodology or tool is the very essence and definition of structured writing. Some definitions see it as a writing method with no software component at all. Others identify it with a single software tool or standard.

    This often leads people who see no virtue in these particular methods or tools, or who have had an unsatisfactory experience with them, to conclude that structured writing is bunk, or at very least that it is not for them, for their content, or for their company. 

    The truth is, it's all structured writing. Even the mainstream word processors and desktop publishing tools you use every day are structured writing tools. But not all structured writing methods and tools are equally effective for individual organizations. There are many ways to structure both the rhetoric and the process of creating content, and one of these may be vastly more productive for you and your organization than what you are doing now. 

    The purpose of this book is to present structured writing as a whole, to take a step back from the specific structures of individual tools and systems and show that all structured writing approaches share a few basic principles and operations. Understanding those principles and operations will help you choose the structured writing approach that is optimal for your content and your organization. 

    Whether you are considering a move to a differently structured writing system or trying to figure out why the one you have already implemented is not working as well as you hoped, this book will help you figure out how structured writing works, what is possible, and what is not possible, and it will help you figure out which techniques, structures, processes, and tools are going to work best for you. 

    In the age of the web, organizations produce and deliver ever more content on ever shorter deadlines. To keep up and maintain quality, they need tools and techniques that support rapid and reliable delivery of consistent, high-quality rhetoric. Many organizations are turning to structured writing solutions (that is _differently_ structured solutions) to keep up and meet demand. However, without a clear and comprehensive understanding of what is possible, they often choose solutions that are sub-optimal or even worse than what they were doing before.    

    I have been in the structured writing industry for nearly 25 years. In that time I have worked with and designed structured writing systems that improved both process and rhetoric. I have also built tools and systems myself (some of which I will talk about in this book), because I have often felt that existing approaches did not do enough to balance the demands of process and rhetoric or to fully exploit the capacity of structured writing to promote both.

    One of the things I have learned over my career is just how much our minds tend to follow the ruts laid down by our familiar tools and processes. I can't count the number of requirements documents I have read over the years that insisted that any new system must work exactly like the old system in almost every particular. I don't believe this is so much a reluctance to change as simply a difficulty imagining how things can be done differently. Making sure that a new system does everything you need often means specifying that it does everything the way you are doing it now. 

    Every tool encapsulates a methodology -- a set of choices about how problems should be partitioned and addressed. This can lead people using a particular tool to view that tool's methodology as if it were the methodology of the craft itself, rather than simply one set of choices about how problems should be partitioned and addressed. Thus, individual tools create ruts in the mind, constraining our ideas about how things could be done. 

    By separating the principles and practices of structured writing from the implementations of particular tools, this book seeks to break out of the ruts created by particular tools, so you can see how to accomplish your objectives using these basic principles and practices before you select or build a tool set to implement those principles and practices in your organization. 

    It has been my particular privilege and opportunity to work with some of those rare people whose minds seem to be immune to such ruts and who were able to jog me out of my own ruts and help me see how different approaches could be both simpler and more effective. To name a dozen would be to neglect a score, but one name in particular deserves mention: Sam Wilmott, principal architect of the OmniMark programming language and all round markup language savant. Sam taught me to see the relationship of text and algorithms in a fundamentally new light, and everything I have done in my career leading up to writing this book has been working out the implications of what I learned from Sam. The SAM markup language I use for most of the examples in this book is an homage to Sam, and not just in its name. 
