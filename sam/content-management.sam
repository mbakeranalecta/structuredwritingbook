chapter:(#chapter.content-management) Content Management

    <<<(annotations.sam)
    index:: type, term
        concept, content management

    There are many tools available to help you manage content where extensive collaboration is required. Collectively, they are called {content management systems}. They are quite varied in their concept and operation because they partition and redirect different parts of the complexity of content creation and delivery, and/or they partition and redirect complexity in different ways. 

    Some systems attempt to be all encompassing -- to be the only tool anyone in the organization ever uses to create and deliver content. Others are designed to work in concert with other tools. Some are more {frameworks} than tools, platforms on which you can construct your own content management functionality. All of them implement some form of structured writing for at least some of their functions, some in the media domain, some in the document domain with more or less of the management domain mixed in. Some work with, or at least support certain management functions for, the {subject domain}. 

    Some content management systems attempt to manage the whole of the content creation process, from design and authoring to work flow and publishing. Others focus on more limited aspects of the process. Some are mostly or entirely focused on a single media platform (usually the Web) while others may support multiple media. 
    
    If you use a {content management system}, it is important to understand how the partitioning and redistribution of complexity that the CMS is designed to do fits with the partitioning and redistribution that you are planning to do in your content system. If the two are not a good match, additional complexity will be created, and some of the complexity you are seeking to manage will be dropped and fall down to the reader. 

    Ultimately, your content management process is more important than your content management system. As tempting as it may be to simple go shopping for a content management systems, buying a CMS effectively means you are buying a complete process and partitioning, and that may not be the best fit for your organization. A far better approach is to design the partitioning of your system for yourself and then go shopping for the tools that will fit the process you have designed. Depending on how you have partitioned your process, and how and where complexity is directed in that process, you may not need a conventional content management system at all. 

    To explain this a different way, content management decisions, like all other decisions, consist of making the decision, which requires knowledge, and executing the decision, which requires skills. As we have seen, we can sometimes use structured writing techniques to transfer the execution of decisions to algorithms, while leaving the making of the decision to writers, or we can sometimes use them to remove both the making and the execution of the decision from writers.

    A content management system is a tool that transfers the execution of decisions away from writers (and managers) into algorithms provided by the system. But it mostly requires writers and managers to make the decisions and to record the metadata necessary to execute them. Many of the decisions you have to make in a large content system involve examining large volumes of content. Thus the main interface to many content management systems is a file system or database view of the content system. Whatever specific tasks the system is performing, the essence of its interface is that it allows you to view and apply metadata too large volumes of content. However, if you have used structured writing techniques to factor out the need to make certain classes of decisions by hand, the need for such an interface diminishes. You may still need the algorithms, but algorithms are just algorithms, and don't require a complicated interface to run.  

    To figure out what type of content management system you may need, if any, it is helpful to understand how content management systems work with metadata and where the metadata in question resides in your content. Essentially structured writing and content management systems both work to make metadata available to algorithms, so structured writing and content management systems are both working towards the same goal, and depending on your process you may want to assign more of that task to one or two the other.  

    section: Metadata is the foundation of management
    
        {Content management system} do their job largely through the collection and management of {metadata}. Partitioning and redirecting complexity requires a method to pass information between partitions in a reliable way, and that is what structure and metadata do. Metadata provides a record of the identity and status of content. Management actions are actions on metadata: either creating and updating metadata or performing actions (running algorithms) based on metadata. 
              
        The location of the {metadata} that records the identity and status of the content and the constraints it obeys, differs from one structured writing domain to another. The {media domain} captures virtually no {metadata} that is useful for {content management}, the {document domain} captures some, but not enough, and the {subject domain} often captures almost everything your may need, except perhaps for {workflow} information. (Though workflow information is {management domain} data and there is nothing to prevent you from adding those structures to your {document domain} or {subject domain} content if you want to.) 
        
        Where the content does not contain the metadata necessary for management, the {CMS} has to gather and store it separately. This naturally adds complexity to the CMS interface, a complexity that is a major source of pain for many users. This also illustrates that the kind of CMS you need for content in different domains can vary significantly. In the case of CMSs that are designed to be the only tool you use, this generally means that the structured writing format is baked in and can only be changed in limited ways, if at all. A transfer of metadata from the CMS to the structures of the content would involve a major reconfiguration of the entire CMS. If you buy this kind of system, therefore, you need to look at the total picture -- how it partitions and redistributes all of the complexity of the content systems, and what complexity, if any, it neglects and lets fall through. There will likely be little you can do to change the partitioning or distribution after the fact, so you better make sure it is what you want going in. 
        
        Most off-the-shelf {content management systems} are designed for {media domain} or basic {document domain} content. This makes sense from a commercial point of view because it allows them to develop their own {metadata} scheme and associated {management} algorithms independent of the content that will be stored. This means they can be sold to a wider variety of clients and also that they can advertise that they have simple editors or work with the editors that people already have. The problem with this model, in terms of developing a comprehensive solution for managing complexity across the content system, is that it draws a hard line between the {management} going on in the CMS and any type of {management} or constraint you may wish to impose on the {composition} process. This means that algorithms that depend on the consistency of content or its relationships with other content are largely unsupported by the CMS, and there is no integration between those algorithms and the algorithms preformed by the CMS. The result is often that a lot of complexity gets dropped due to this lack of integration and falls through to the reader.   
        
        Other CMSs are built for more complex {document }domain languages, which typically means that they are built to support the specific {management domain} features of those languages. By far the most common instances of such systems today are based on {DITA}. Typically, such systems are specific to the one language they support and are sold as such: a DITA CMS or an {S1000D} CMS.
        
        You might expect that the principal type of metadata contained in a CMS would be {management domain} metadata. After all, we described the management domain as an intrusion into the structured writing world, since it does not actually describe the structure of content. The reason for the intrusion of the {management domain} into content is to allow for the management of the content below the level of whatever file or chunk size you store in the CMS.[*XMLDatabase]
        
        footnote:(*XMLDatabase)
            In some CMSs, this distinction between the chunk stored in the {CMS} and the structures expressed inside that chunk is moot. A CMS based on a native {XML database}, for instance, makes no distinction between the chunk and the structure of the chunk, but treats the entire {repository} as a single XML resource that it can query and manage down to any level of granularity. Even with such a system, however, this distinction remains for the writer, who has to deal with the structure of whatever sized chunk of content they are being asked to write. 
        
        But while you will rarely find much in the way of {media domain} or {document domain} {metadata} stored at the {CMS} level, CMSs often contain a great deal of {subject domain} metadata. If you are managing a large volume of content, you will need some way to find content on a particular subject. If you are doing {content reuse}, for example, you will constantly be asking if content already exists on the subject you are preparing to write about. If your CMS is managing the delivery of content dynamically to the Web, it will need to respond to queries based on subject matter. And if you are optimizing your content for {search} you will need to provide the search engine with subject {metadata} in the form of keywords or {microformats}. All of this depends on {subject domain} {metadata}. Subject domain metadata is therefore central to CMS operations. 
        
    section: The location of metadata
        
        It is a very common pattern for a {CMS} to store {document domain} or {media domain} content and attach {subject domain} metadata to it as an external label. For instance, a CMS might store recipes written in {MarkDown} and attach separate {metadata} records to each recipe listing the key recipe metadata needed for retrieval and sorting of recipes. One of the things that writers often complain about with CMS systems is that they are not allowed to submit content to the system without filling out complicated metadata records. 
        
        An alternative approach would be to write recipes in a {subject domain} format in which all the recipe {metadata} is included in the content from the beginning. The {CMS} then requires no external metadata label, though it does obviously require a way to access and query the metadata embedded in the content. (CMSs based on {XML databases} often have this capability as a natural consequence of the XML database architecture.)
        
        Which approach is preferable? The conventional CMS approach arises because most CMS's are based on relational databases, which are good at storing metadata records and attaching them to blobs of text, but are not good at storing or querying the {hierarchical structure} of structured content. It has several disadvantages, all of which introduce complexity which is often not well handled.
        
        1. It can only record the characteristics of a chunk of content as a whole. It cannot look down into the content to find more fine grained {metadata}. One of the advantages of writing a recipe is the {subject domain} is that it allows you to do things like querying the collection of recipes for all those with a calorie count below 100. But unless the metadata record for the recipe includes that level of detail, the {CMS} cannot respond to that {query}. And if the CMS does store that level of detail, it is effectively asking the writer to write the entire content twice, once in the {document domain} and once in the {subject domain}. Not only is this more work, it is quite likely that the two versions will fall out of sync with each other. 

        2. It gives no support for {subject-domain} {validation} of the content. It does nothing to help improve content quality. By requiring {document-domain} content as the storage format, it precludes the use of the {subject domain} for writing and cuts you off from all the advantages it provides. 
        
        3. The system has no way of telling if the content {conforms} to its constraints. It records the content constraints in a separate record without ever validating that the content meets them. 
        
        4. It separates the {metadata} from the content is describes. This allows for drift between the content and the metadata. 
                
        But storing {metadata} in the content presents some challenges as well. Having each piece of content stored in the subject domain makes a lot of sense from a semantic point of view and makes it easy to submit content, since no additional metadata forms have to be filled out. The problem is how to retrieve it. A CMS is essentially a database, and the way you retrieve information from a database is to write a {query}. A query is different from a {search}. A search is fuzzy. A {search engine} takes a plain text question or search phrase and tries to figure out which documents are the best match. Search engines may be powerful and sophisticated, but their results are essentially a sophisticated mechanical guess, and sometimes they get it wrong. Ask a search engine for a list of recipes with less than 100 calories, and it will give you a bunch of guesses based mostly on the plain text of those documents. Chances are it will catch some, miss others, and give you some false hits. 
        
        >>>(image ../graphics/search.xml)
        
        A {query}, on the other hand, is a precise request for items whose {metadata} precisely matches specified criteria. If you write a query to return recipes for which the value of the field `recipe/nutrition/calories` is less than 100, it will return all the results, miss none, and give you no false hits. However, it will work only for content that is stored that way. To write that query, you will need to know exactly how recipes are stored in the system. 
        
        >>>(image ../graphics/query.xml)
        
        If you have many different content structures in your repository, you will need to know how each of them is structured in order to create the {queries} to return them. This is not the end of the world. {Information architects} and {content engineers} can save writers from having to remember how to do all of the queries by creating saved queries that they can run at any time. But is is still a complicating factor. 
                
        In the end there is no way around this. Accurate reliable {queries} depend on precise consistent {metadata}. Precise consistent metadata is specific to the object it belongs to. There is no such thing as a generic metadata record. They are always specific to the things they describe. Subject domain metadata is specific to its subject. If you want to be able to find all recipes with calorie counts less than 100, you need recipe-specific metadata that specifically records the number of calories in the recipe. If you want to find a used car listing for a blue convertible, you need metadata that specifically records the car color and body style. There is no generic metadata format that supports both these queries. The inherent variability of content means no generic query system is possible. The trick is to find the right balance and to make you content as queryable as possible. 

        Finally, to return to the point made earlier, structured writing and content management systems both work to make metadata available to algorithms. But as we noted in [#part.algorithms], the algorithms work differently, and therefore require a different class of meta, in each domain. In particular, CMSs tend to supply subject domain and management domain metadata to algorithms for use with document domain and media domain content. But subject domain content supplies the subject domain metadata itself, and, as we have seen, you can often factor out the need for management domain metadata by moving content to the subject domain. 

        This does not mean that if your content is in the subject domain you will never need for a CSM, but it does mean that you may not need one, or that you may require a less elaborate system because there will be less you need it to do. 
        
        
    section: Managing the content process     
        
        When we create an individual piece of content for one-time publication in a single media, there is really not much of a role for management in the process. {Content management} becomes a concern when you want to manage the production and {publishing} of many pieces of content, to manage the relationship between them, ensure consistency and quality, or to publish them many times in different ways.

        Of course, many of the reasons we have looked at for moving content from the {media domain} to the {document domain} or the {subject domain} have to do with managing the production and publishing process. But managing a body of content and the processes and tools that create and process that content, requires a whole set of {metadata} of its own. 

        Structured writing is about imposing constraints on content. Content management is about imposing constraints on the content process. But it is also about managing the constraints we impose on content. 

        Doing structured writing requires recording content in {media domain}, {document domain} or {subject domain} structures, factoring out invariants into separate files, expressing constraints, and creating algorithms to translate the content to the {media domain} for {publishing}. All of this creates a lot of artifacts to keep track of, and requires a process both for keeping track of them and for running the structured authoring and publishing {tool chain}. Thus there is a need to manage both the artifacts and the process. But don't fall into the trap of assuming that this is a generic processes. All these artifacts that require managing are the result of partitioning your content system, and how they should be managed is determined by how the partitions communicate with each other. This is specific to the overall partitioning strategy of your particular content system. You need to find a tool that fits that partitioning strategy.

        A common mistake is to focus on some {management} problem and simply push out the related complexity to some other function. For instance, the heavy use of {management domain} markup can solve a bunch of management problems, but it pushes a lot of management complexity onto the writer, which they may not be able to handle without compromising {quality}. Nowhere is it more important to take an holistic approach than in the selection of your approach to content management and the tools you choose to implement it. 

    
    section: Conflicting constraints
    
        The constraints you use to partition the content management problem may not always be the same as those you would implement to improve content quality. You may find your {management} goals at odds with your {rhetorical} goals. It is easier to manage content (or anything else) if it is more uniform. The constraints that you will naturally wish to impose to make content more manageable are those that make it more uniform. Thus a system like {DITA} which, as a starting point, proposes that there are just three types of content (concept, task, and reference) has an obvious appeal from a management point of view. Remember though, that it is the accomplishment of your {rhetorical} goals that serves your readers. Your management goals should logically be subservient to your rhetorical goals. 
        
        The constraints that you impose to improve content quality are those which make sure that a piece of content does just the job it is supposed to to. They are the kind of constraints that make sure that a recipe contains everything a recipe needs and is presented in the way a recipe should be presented. They are highly specific to the subject matter and to the audience. Three generic content types are not going to provide all the constraints we need to effectively manage content {quality}. Indeed, some of the constraints that are designed to facilitate content management may be positively damaging to content quality.
           
        But while uniformity might be the approach you would naturally choose if you merely set out to implement a content management system -- if improved content {quality} were not one of your business goals -- I would argue that managing {subject domain} content may actually lead to better content management in the long run.
        
        In any system that relies on constraints, on data that is known to meet certain constraints, it is necessary to make sure that the constraints are actually being met. This is the role of the {authoring algorithm}(algorithm) and the {conformance algorithm}(algorithm). And as we have seen it is often much easier to provide effective {guidance} and perform effective {validation} in the {subject domain}. Also, the subject domain allows you to factor out many constraints, which is the most effective way of making sure they are obeyed. The document domain provides far fewer opportunities for factoring out constraints and providing effective guidance and is much more difficult to {audit} correctly.
        
        Thus while a simple {document domain} system of concept, task, and reference {topics} meets the content management algorithm's desire for uniformity, it provides little opportunity for ensuring that the full range of constraints necessary to make content management and reuse work are actually followed. The result can be deterioration of the quality of the content set over time, a process that tends to be self perpetuating, as disorder in current content makes it harder to impose order on new content. (Just as you cannot put things away neatly in a messy drawer.)
        
        The variety of constraints and formats found in a {subject-domain} system may present a greater {content management} challenge initially, but it can go a very long way to ensuring that the necessary constraints are met. And, as we have seen, you can often use {subject domain} structures to factor out {management domain} concerns}[#chapter.management-domain], which can go along way to removing the conflict between {quality} structures and {management} structures in content. This not only leads to more effective management, but also to a simpler writing experience.  
    
        
    section: Creating manageable content

        We saw with the {conformance algorithm} that the key to conformance was to create structures that are easy to conform to. The {content management algorithm} relies heavily on the conformance algorithm. Successful management of content depends on knowing exactly what assets you are managing. The more you know about each asset, and the more reliable what you know about that asset is, the more confidently you can manage it, and the less likely the management system is to slowly descend into chaos. 

        What this means is that the content management algorithm depends on content that is easy to manage. It may seem like simple generic units of content would be the easiest to manage, but the problem with such generic units is that you know very little about them and what you do know is often unreliable. Generic units may be easy to create and easy to store, but they are not easy to manage. It may require more initial though and effort to plan for the management of highly specific well constrained content units, but such units will in fact prove to be the easiest to manage over time, especially as your content set grows.         
 