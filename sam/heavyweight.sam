!smart-quotes: on
chapter:(#chapter.heavyweight) Heavyweight markup languages

    <<<(annotations.sam)

    I use the term _heavyweight_ here as a contrast to the commonly used term _lightweight_, even though heavyweight is not used commonly for markup languages. Nonetheless, it fits. Both the abstract language {XML} and concrete languages such as {DocBook} and {DITA} are heavyweights in the sense that they provide a lot of capability at the expense of a large footprint. 
    
    Having said that, there is an important distinction between the heavyweight syntax of XML and the heavyweight semantics of a {DITA} or {DocBook}. You can represent the semantics of DITA or DocBook using a more lightweight syntax. And you can certainly create simple markup languages with lightweight semantics using the heavyweight syntax of XML. Despite this, there is a definite connection between heavyweight syntax and heavyweight semantics, perhaps because languages with more heavyweight semantics have a greater need for the heavyweight capabilities of XML and the processing tools that go with it. 
    
    This chapter contains a brief survey of some heavyweight languages. Heavyweight languages often contain structures from more than one domain. Their core is usually in the document domain, but they typically contain some {media-domain} structures for things such as tables that are hard to abstract from the {media domain} in a generic way. They also typically contain some subject-domain structures, typically related to technology, since many heavyweight languages originated for documenting technical products. Finally, most contain some management-domain structures, particularly for capabilities such as conditional text.   
    
    Why is the structured writing landscape dominated by a few large and loosely constrained markup languages? Here are a few reasons:
    
    * Big, loosely constrained document-domain markup languages are the smallest step into the document domain from {word processors} and {desktop publishing} applications. Thus, they represent a relatively small conceptual change for writers. However, this also means that they do relatively little to partition and redirect complexity away from writers. They exchange some formatting complexity for structural complexity, which may or may not be an overall win, but they do nothing to enhance rhetorical repeatability or drive information architecture. 
    
    * Too often, reducing the amount of complexity that goes unhandled in the content system is not the main driver in the adoption of structured writing. Instead, adoption is typically driven by a desire to improve some aspect of content management, particularly {content reuse}. While you can do these things without resorting to structured writing, structured writing formats make it easier to integrate individual pieces of content and help ensure that your content doesn't get locked into a vendor's system.

    * Constraints are onerous if you don't get them right, and the benefits of getting them right are often under-appreciated, especially in content management applications where the consequences of a lack of constraint show up years down the road, when it becomes all too easy to blame any problems on human failure rather than poor system design.   

    For all these reasons, it is worthwhile to look at where the big public languages fit in the structured writing picture.
    
    This chapter is not a buyer's guide; large systems like DocBook, DITA, and S1000D would take too much space in this book to do them full justice. Rather, this chapter, and the book as a whole, attempt to provide a framework that allows you to understand your structured writing requirements independently from any system and to evaluate, compare, and contrast systems in more or less neutral terms. 
    
    section: DITA
    
        index:: type, term
            tool, DITA
    
        There are two ways of looking at {DITA}. You can look at it as a complete structured writing system that can be used more or less out of the box.[*fn.pkg] Alternatively, you can look at DITA as its name proclaims: an information typing architecture. The acronym DITA stand for Darwin Information Typing Architecture, with the word "Darwin" representing DITA's approach to the {extensibility} of markup: {specialization}.
        
        footnote:(*fn.pkg)
            I say "more or less" because even packaged applications such as Word or FrameMaker are not used completely out of the box for serious content creation: you need to customize styles and output formats to some extent, and the same is true of DITA.
        
        Out of the box, the DITA specification gives you a fixed set of topic types. The DITA information typing architecture gives you the capability to create a wide variety of information types (though not necessarily all the types you might want). I discuss DITA as an information typing architecture in [#chapter.extensible]. Here I look at out-of-the-box DITA. 
        
        Out-of-the-box DITA comes in two main forms: 
        
        1. *The DITA Open Toolkit:* You can download the open-source {DITA Open Toolkit}(tool) for free and use it to produce content. The {formatting} stylesheets that come with the toolkit are basic, but they can be customized, which you will likely want to do.
        
        2. *Packaged DITA tools:* There are a variety of tools that package DITA. Some are XML editors that include support for editing and processing DITA. Others are content management systems of one degree of sophistication or another. These tools may add capabilities beyond what is supplied by the DITA Open Toolkit and also may hide the underlying DITA structures. Evaluating these tools is beyond the scope of this book.
                        
        If you are evaluating how well DITA fits your needs, the key features of out-of-the-box DITA to consider are its topic model and its focus on the {reuse algorithm}. The description of the {document-domain}/{management-domain} approach to reuse in [#chapter.reuse] is based on the DITA model, which provides comprehensive support in those domains.
        
        As described in [#chapter.blocks], the DITA topic model is based on the idea that you can break down {information} into different abstract types and that there is value in separating the different types. One of the problems with this theory, and consequently with the application of DITA's topic model, is that it is not clear how big an information type is and whether an information type constitutes a rhetorical block or just a semantic block. Specializing DITA allows you to be more specific on this point, but with out-of-the-box DITA, you are probably using three topic types: concept, task, and reference.[*fn.oobdita] These topic types do not unambiguously constitute semantic blocks or rhetorical blocks; in practice they are used both ways.
        
        footnote:(*fn.oobdita)
                Out-of-the-box DITA also includes other topic types, including machine-industry and troubleshooting tasks, which provide additional document-domain structures. However, the existence of these types does not alter my point.
        
        The principal thing that sets out-of-the-box DITA apart from other approaches to structured writing is its {map} and topic architecture. In most other systems, the unit that the writer writes and the unit that the reader reads are the same. For long works, you may choose a mechanism for breaking up and assembling pieces, but the content is still described by a single schema. For instance, in {DocBook}, you can write a book using a `book` document type in which you can include various `chapter` document types to create a complete book out of multiple files. In other words, a DocBook `book` is a single document structure that just happens to be made up of individual files. 

        But DITA partitions this document assembly function into a separate file type, the map. A DITA map file is an independent structure. It does not create a single logical document structure. It does not usually contain any actual content, and you can't write an entire book in a single map file. Instead, a map file is an instruction to a publishing tool chain about how to assemble a larger work out of component pieces.
        
        This distinction is critical. In the {DocBook} model, there is a continuity of constraint between the book and its chapters. In DITA, the constraints on the map and the constraints on the topics in the map are completely separate. This means that in DITA, the topic is the largest unit of content to which content constraints can be applied (at least in the conventional way). This partitioning leaves the responsibility for the rhetoric of larger units entirely with the writer.
              
        Maps are structured like a tree, so you can construct arbitrarily deep hierarchies. This means you can choose which parts of your structure you create using a map and which parts you create inside a topic. If you have a list of four items, each of which needs two or three paragraphs of description, you can create one topic with the list of four items in it, or you can create one topic for each item and then tie them together using a map. Since the topic is the largest unit of content constraint in DITA, if we break content down to this level, we lose the ability to apply constraints to the content as a whole. On the other hand, we can {reuse} each item separately.
        
        This presents a dilemma. In [#chapter.blocks] we characterized structured writing as dividing content into blocks, and we made a distinction between {semantic blocks} and {rhetorical blocks}. In the design of a markup language, we build rhetorical blocks from semantic blocks, which may be made up of smaller semantic or structural blocks. This works fine for developing the structure of a rhetorical block, which is the work that will be presented to the reader. In that scenario, writers write rhetorical blocks. The semantic blocks are just elements of the model.
        
        But things become more difficult when you attempt to do fine-grained {reuse} of content. In that case, you may need to write independent semantic blocks and combine them to produce rhetorical blocks. DITA lets you do this in two ways. The first (which is frequently discouraged) is to nest one topic inside another. The second is to combine topics using a map, with the map representing the rhetorical block. However, DITA does not provide a high-level way to constrain the structure of a rhetorical block built this way.  
        
        If you want a constrained {rhetorical block}, you have to model it as a single {DITA} topic type. You can certainly do this by specializing from the base `topic` topic type. However, in doing so you probably need to move away from the information-typing idea of separating different types of information, because a full rhetorical block, such as our recipe example, often requires different types of information. 
        
        This leads to the confusion about whether a DITA topic is a {semantic block} or a {rhetorical block}. For people who use out-of-the-box DITA this can be a problem because, by default, the DITA Open Toolkit creates a separate Web page for each topic. This is not an appropriate presentation if your individual DITA topics are not {rhetorical blocks}. If your rhetorical block is made up of multiple DITA topics strung together by a map, and you want that rhetorical block to appear on a single page, you need to use a procedure called _chunking_, which is not as straightforward as it should be.[*fn.ditachunking]

        footnote:(*fn.ditachunking)
                Chunking is on the agenda to be fixed in DITA 2.0.[http://docs.oasis-open.org/dita/dita-1.3-why-three-editions/v1.0/cn01/dita-1.3-why-three-editions-v1.0-cn01.html#future-of-dita]

        The idea that blocks are reusable is attractive, but you need to think through exactly what the reusable unit of content is. It is one thing to reuse complete {rhetorical blocks} (perhaps with some variations in the text). It is quite a different thing to reuse {semantic blocks} below the level of the {rhetorical block}, particularly if you need to constrain the {rhetorical block} or apply any of the other structured writing algorithms at the level of the {rhetorical block}.
        
        Rhetorical quality should be a serious concern with this model. If you assemble {rhetorical blocks} out of smaller reusable units without paying attention to the rhetorical integrity, completeness, and consistency of the result, quality can be seriously affected. It is difficult to maintain rhetorical quality if writers no longer see, think, or work in the context of the {rhetorical block} and if the structure of the {rhetorical block} is not constrained. 
        
        DITA, as a technology, does not prevent you from working in whole {rhetorical blocks} or from constraining your blocks in any way you want -- DITA's information typing capabilities make this possible. However, the block-and-map model, whether implemented by DITA or any other system, creates an inherent tension between creating smaller {semantic blocks} to optimize for reuse and creating constrainable {rhetorical blocks} to optimize for rhetorical quality. And because it provides no facilities for imposing constraints above the topic level, DITA makes it difficult to partition and redirect this complexity away from the writer.
                
        However, you do not require either document-level or topic-level constraints to reuse content blocks. When used correctly, constraints may improve quality and reliability, but you don't need them to compose larger blocks out of smaller blocks. This has led many organizations to select DITA for its reuse capabilities without taking advantage of its constraint capabilities or its information typing roots. People taking this approach will sometimes write their content in the base `topic` topic type rather than a more constrained specialization. Quite simply, they don't find DITA's information typing to be useful, so they ignore it. 
        
        The growing popularity of this approach to reuse has led to the development of alternatives to DITA that provide the same reuse-management capabilities but remove the constraint mechanisms. One example of this trend is {Paligo}(tool), a reuse-focused component content management system that uses {DocBook} as its underlying content format, specifically for the purpose of minimizing constraints on the content.[http://idratherbewriting.com/2016/08/01/paligo-the-story-xml-ccms-in-the-cloud/] Such systems can reduce the up-front complexity of component-based {content reuse}, though possibly at the expense of costs down the road if the failure to manage and constrain rhetoric, and thus to capture subject metadata, result in poor rhetoric and inefficient process. 
         
    section: DocBook
    
        index:: type, term
            language, DocBook
    
        {DocBook} is an extensive, largely {document-domain} language with a long history and an extensive body of processing tools and support. As we have noted, {DocBook} is not a tightly constrained language. Instead it provides broad capabilities for describing document structures. In other words, it is mainly concerned with partitioning the document domain from the media domain in as comprehensive manner as possible. It does not constrain the rhetoric of content in any significant way and, therefore, makes no attempt to partition and distribute any part of the creative aspects of the content system. 
        
        Unlike {DITA}, {DocBook} was not created to support any particular information typing theory. It does not reflect any methodology for writing or organizing content. DocBook supports the structure of books but does not constrain the {rhetorical structure} of a work; in fact, the developers of DocBook made every attempt to avoid constraining rhetorical structure, leaving that task to the writer. The downside of this hands-off approach is that DocBook is a complex system, and the writer must deal with this complexity without the benefit of having other aspects of their task, such as information typing, partitioned and directed away. 
        
        Of course, this is not to say that using DocBook is any more complex than using a publishing tool such as FrameMaker. It may well be less so. Nonetheless, DocBook and its tool chain can be challenging to learn and use. Because of this, writers often use simplified subsets of DocBook. (Where DITA is sometimes customized by the addition of elements, DocBook is often customized by their subtraction.) However, DocBook remains popular with many for its lack of constraints combined with its rich feature set. 
        
        Because of its lack of constraints, {DocBook} does not fit well with the idea of structured writing as a means to partition and redirect complexity nor does it fit the model of intimate connection between process and rhetoric explored in this book. However, it can play a useful role in a structured writing tool chain as a language for the {presentation algorithm}. This is exactly how it was used in the production of this book. The book was written in a small, constrained language based on {SAM} and transformed by the presentation algorithm into DocBook, which was then fed into the publisher's standard DocBook based publishing tools. The Publisher's specific requirements are far more precise than the generic DocBook spec, but the DocBook created by this method matches the publisher's specifications exactly. 
        
        In using this approach, I partitioned the complexity of meeting the Publisher's DocBook requirements from my task of writing the book and gave myself a much simpler authoring interface, both syntactically and semantically. Of course, I transferred that complexity to myself in another role ({information architect} or {content engineer}), since I had to write the algorithm that transformed my SAM source into the publisher's preferred form of DocBook. But this was a big win for me, because writing that algorithm was a separate activity that did not impinge on my attention when I was writing the book. Another benefit was that because my little book-writing language is highly constrained, maintaining conformance was much easier and the DocBook produced by my algorithm was more consistent and conformed more closely to the publisher's requirements than if I had written in DocBook directly. 

        I wrote my previous book {Every Page is Page One}(citetitle) directly in DocBook (an experience that contributed to my decision to develop SAM), but it took a lot of revision to get my DocBook content into the form that the publication process required. The publishing process has a set of constraints that are not enforced by DocBook itself. Instead, they have to be imposed by the writer while writing. But in the SAM-based markup language I used for the book, all those constraints were factored out, which enabled me to translate content reliably into a DocBook instance that met the publisher's requirements. In addition, I didn't need to remember any of those constraints.
        
    section: S1000D
    
        index:: type, term
            language, S1000D

        {S1000D} is a specification developed in the aviation and defense industries specifically for the complex documentation tasks of those industries. It supports the development of the {Interactive Electronic Technical Manuals} (IETMs) that are typically required in that industry. Although S1000D has {subject-domain} structures, it also has {media-domain} structures targeted at the production of IETMs and extensive {management-domain} structures designed to support the common source database (CSDB), the content management architecture that is part of the S1000D specification. S1000D is much more than a structured writing format. It specifies a complete document production system for a specific industrial sector. In other words, S1000D represents a particular partitioning of the content system designed for a particular industry.

    section: HTML
    
        index:: type, term
            language, HTML
    
        {HTML} is widely used as an authoring format for content. For the most part, HTML is used in the {media domain}: people writing for the web in its native format, often using a {WYSIWYG} HTML editor. 
        
        But HTML is still a {document-domain} language, and efforts have been made over the years to factor out the media-domain aspects of HTML and leave the formatting to {CSS} stylesheets. This makes HTML a legitimate {document-domain} markup language. In particular, people interested in using HTML this way often use {XHTML}, a version of HTML that follows the constraints of XML. Being an instance of XML is important because it means you can write XHTML in an XML editor and process it with XML processing tools. This means that you can potentially publish content written in XHTML by processing it into other formats or by modifying its structure for use in different HTML-based media such as the {Web} and {ebooks}. 
        
        
    section: Subject domain languages
    
        There are hundreds of public {subject domain} languages written in XML. Most of these are more data oriented than content oriented, but you might be able to derive content from some of them using the {extract} and {merge} algorithms. Wikipedia maintains an extensive list at {https://en.wikipedia.org/wiki/List_of_markup_languages}(url). However, most subject domain languages used for content are developed in house to suit a particular subject matter and reader base. Examples of XML-based subject-domain languages include the following:

        
        * Auto-lead Data Format: for communicating consumer purchase requests to automotive dealerships.

        * BeerXML: for exchanging brewing data

        * Keyhole Markup Language: for geographic annotations

        * RecipeML: for recipes
