!smart-quotes: on
chapter:(#chapter.processing) Processing Structured Text
    <<<(annotations.sam)
    subjects:: type, term
        task, processing structured text

    [#chapter.separating] looked at separating content from formatting. Separating them is necessary to achieving certain rhetorical and process goals. But of course they cannot stay separated. Content must be formatted before you present it to the reader. So let's look at the algorithm for putting content and formatting back together again.

    Understanding how to put things back together is a big part of understanding how to separate them. Indeed, describing how you would put them back together is the only way to know for certain that you didn't lose anything when you did the separation. This is essential to ensuring a clean partitioning that does not allow any complexity to fall through the cracks. 
    
    section: Two into one: reversing the factoring out of invariants
    
        Moving content from the {media domain}+(index "media domain;factoring out invariants in the") to the {document domain}+(index "document domain;factoring out invariants in the") or the {subject domain} involves progressively factoring out invariants in the content. Each step in this process creates two artifacts: the structured content and the {invariant}+(index "invariants;reversing the factoring out of") piece that was factored out. 
        
        Processing structured text is about putting the pieces back together -- combining the structured content with the invariants that were factored out. But processing structured text is also about making and/or executing the decisions that were partitioned away from the writer. These decisions may be invariant, such as applying approved corporate style, or they may be variable, such as presenting content differently in different media or for different audiences. 

        If factoring out the invariants moves content toward the document or subject domains, recombining the content with the invariants moves it in the opposite direction, toward the {media domain}. This could mean moving the content from the subject domain to the document domain or from the document domain to the media domain, or simply from a more abstract form in the media domain to a more concrete form, which is our first example.

        pagination-tweak:
            min-space: 1.5in
            
    section: Restoring style information
        
        In [#chapter.separating], the first example of {separating content from formatting} factored out the {style information}+(index "style information, restoring") from this structure:
        
        ```
            {font: 10pt "Open Sans"}The box contains:
            {font: 10pt "Open Sans"}[bullet][tab]Sand
            {font: 10pt "Open Sans"}[bullet][tab]Eggs
            {font: 10pt "Open Sans"}[bullet][tab]Gold
        
        
        The style information was replaced with style names:
        
        ```
            {style: paragraph}The box contains:
            {style: bullet-paragraph}Sand
            {style: bullet-paragraph}Eggs
            {style: bullet-paragraph}Gold
        
        
        And then the styles were defined as follows:

        ```
            paragraph = {font: 10pt "Open Sans"}
            bullet-paragraph = {font: 10pt "Open Sans"}[bullet][tab]
        

        To unite each paragraph with the correct style, you can write a set of search-and-replace rules:
        
        ```
            find {style: paragraph}
                replace {font: 10pt "Open Sans"}
            
            find {style: bullet-paragraph}
                replace {font: 10pt "Open Sans"}[bullet][tab]
        
        
        This algorithm combines two sources of information: the structured text and the style definitions. Usually, the style definitions are embedded in the rules, as in this example. In some cases, however, the rules may pull content from a separate file. I show examples of this later. 
        
        Applying these rules brings back the original content:
        
        ```
            {font: 10pt "Open Sans"}The box contains:
            {font: 10pt "Open Sans"}[bullet][tab]Sand
            {font: 10pt "Open Sans"}[bullet][tab]Eggs
            {font: 10pt "Open Sans"}[bullet][tab]Gold
        

        pagination-tweak:
            min-space: 1in
            
        If you want to change the styles, you can apply a different set of rules (in other words, make a different set of decisions):
        
        ```
            find {style: paragraph}
                replace {font: 12pt "Century Schoolbook"}
            
            find {style: bullet-paragraph}
                replace {font: 12pt "Century Schoolbook"}[em dash][tab]
        
            
        Applying these new rules gives you the following:
        
        ```
            {font: 12pt "Century Schoolbook"}The box contains:
            {font: 12pt "Century Schoolbook"}[em dash][tab]Sand
            {font: 12pt "Century Schoolbook"}[em dash][tab]Eggs
            {font: 12pt "Century Schoolbook"}[em dash][tab]Gold
        
    
    section: Rules based on structures

        subjects:: type, term
            concept, structural rules
    
        The tools that do this sort of processing do not literally use search and replace like this. Rather, they parse the source document to pull out the structures and allow you to specify your processing {rules}+(index "rules;processing") by referring to those structures.  
        
        The mechanism by which a processing tool recognizes structure is not the focus here. You just tell the tool what to do when it finds a structure. So, the next set of rules match structures rather than looking for literal strings in the text:
        
        ```
            match paragraph
                apply style {font: 12pt "Century Schoolbook"}
            
            match bullet-paragraph
                apply style {font: 12pt "Century Schoolbook"}
                output "[em dash][tab]"

        The result of applying these rules is the same as before:
                
        ```
            {font: 12pt "Century Schoolbook"}The box contains:
            {font: 12pt "Century Schoolbook"}[em dash][tab]Sand
            {font: 12pt "Century Schoolbook"}[em dash][tab]Eggs
            {font: 12pt "Century Schoolbook"}[em dash][tab]Gold
                
        
        
        The way I have written these rules is an example of {pseudocode}. Pseudocode is a means for sketching out an algorithm so you understand what you are trying to do before you write actual code. There is no formal syntax for pseudocode. It is intended for humans, not computers, and you can use whatever approach you like as long as it is clear to your intended audience. However, pseudocode should lay out a set of logical steps for accomplishing something and make it clear how the steps go together.  

        Writing an algorithm in pseudocode is a great way to make sure you understand the algorithm without worrying about the details of code -- or even learning how to code. And pseudocode algorithms are a great way to tell programmers what you need a program to do.  
        
    section: The order of the rules does not matter
        
        You may have noticed that these rules do pretty much exactly what {style sheets}+(index "style sheets;processing rules for") do in applications such as {Word}+(index "Microsoft Word;style sheets in") or {FrameMaker}+(index "FrameMaker;style sheets in"). If you understand style sheets, you understand a good deal of how structured writing algorithms work. 
        
        One important thing to notice is that when you create a style sheet in {Word}+(index "Microsoft Word;style sheets in") or {FrameMaker}+(index "FrameMaker;style sheets in"), you don't specify the order in which styles are applied to the document. The same is true when you create a CSS style sheet. The style sheet is just a flat list of rules. The order in which the rules are applied to the document depends entirely on the order in which the various structures occur in the document.[*fn.priority]

        footnote:(*fn.priority)
            Actually, there is a wrinkle to this. It is possible to have more than one rule that could match a particular structure. In this case the language in which the rules are implemented has to decide which rule to pick. There are various mechanism that a language can use to decide which rule to choose, for example, choosing a more specific rule over a more general one. But in some cases, the selection may be based simply on which rule comes first (or last) in the rule set. But this is a minor detail and does not distract from the idea that rules are fundamentally unordered and rule selection is  fundamentally document driven.  

        To put it another way, rather than being a set of steps to follow, style-sheet rules define a set of decisions to be made when certain events occur. If you see X, do Y. The structure of the source document determines the order in which the processor applies the rules; the order of the rules in the style sheet doesn't matter.
        
        This may seem obvious, but it is key to understanding how structured text is usually processed. This can be confusing even to skilled programmers, because style sheets are processed differently from the way most programmers learn to write computer programs.    
        
        Things get more complex when you move into processing the nested structures of the {document domain}+(index "document domain;processing nested structures in the") and {subject domain}+(index "subject domain;processing nested structures in the"), but the basic pattern of a set of unordered rules to describe a transformation algorithm still applies.

        pagination-tweak:
            min-space: 1.5in
        
    section: Applying rules in the document domain

        Suppose you have a piece of {document-domain}+(index "document domain;applying rules in the") structured text that contains this `title` structure:
        
        ```(sam)
            title: Moby Dick
        

        You want to transform this document into HTML. When a rule matches a structure in the source document, the processor outputs the equivalent HTML structure. Here is the pseudocode for this rule (it is in a slightly different format from the pseudocode above):
        
        ```(pseudo)
            match title
                create h1 
                    continue
        
        
        This says, when the processor sees a `title` structure in the source, it creates an `h1` structure in the output and then continues applying rules to the content of the title structure.
        
        The `continue` instruction is indented under the `create h1` instruction to indicate that the results will appear inside the `h1` structure. Another way of expressing this would be:

        ```(pseudo)
            match title
                <h1>
                    continue
                </h1>

        Again, it does not matter what form you use for your pseudocode as long as you clearly express the decision to make when the event in question occurs. 

        In this example, the processor outputs the text content of the structure automatically (as is the case in many tools), so the output of this rule (expressed in HTML) is:
        
        ```(html)
            <h1>Moby Dick</h1>
        
        
        But suppose there is another structure inside the title? In this case that structure is an {annotation}(concept) of part of the title text:
        
        ```(sam)
            title: Review of {Rio Bravo}(movie)
        
        
        Here the annotated text is set off with curly braces and the annotation itself is in parentheses immediately after it. (This is a feature of the {SAM}+(index "SAM;annotations in") markup syntax that I use for most of the examples in this book.) This annotation says that the words _Rio Bravo_ refer to a movie. The annotation is a content structure, just like the title structure, and is nested inside the text of the title. 
        
        So what do you need to do to your `title` rule to make it handle `movie` annotations embedded in the title text? Absolutely nothing. Instead, you write a separate rule for handling `movie` annotations no matter where they occur:
        
        ```(pseudo)
            match movie
                create i
                    continue
        
     
        When the processor hits `continue` in the `title` rule, it processes the content of the title structure. In doing so, it encounters the `movie` structure and executes the `movie` rule. The result is output that looks like this:
        
        ```(html)
            <h1>Review of <i>Rio Bravo</i></h1>
              
        The `continue` instruction is all you need to add to your rules to allow them to deal with nested structures. The rules remain an unordered collection, just like a style sheet. (In fact, {XSLT}, a language that implements this model, calls a set of processing rules a "stylesheet.")
        
    section: Processing based on context
        
        When you move to the {document domain}+(index "document domain;processing based on context"), you use {context}+(index "context;processing based on") to reduce the number of structures you need. For example, where {HTML}+(index "HTML;processing based on context") has six different heading structures (`H1` through `H6`), {DocBook}+(index "DocBook;processing based on context") has only one (`title`), which can occur in many different contexts. So how do you apply the right formatting to a title based on its context? You create a different rule for the `title` structure in each context. You express the context by listing the parent structure names separated by slashes:
        
        ```(pseudo)
            match book/title
                create h1 
                    continue

            match chapter/title
                create h2
                    continue

            match section/title
                create h3 
                    continue

            match figure/title
                create h4
                    continue
            
            
        Now here is the clever bit. You don't have to change the `movie` rule to work with any of these versions of the `title` rule. Suppose your title is the title of a section, like this:
        
        ```(sam)
            section:
                title: Review of {Rio Bravo}(movie)
            
        
        When the content is processed, the processor will execute the `section/title` rule to deal with the title structure and the `movie` rule when the `movie` structure occurs in the course of processing the content of the `title` structure. The results are as follows:
        
        ```(html)
            <h3>Review of <i>Rio Bravo</i></h3>
            
        
        Here is the basic pattern for most structured writing {algorithms}+(index "algorithms;basic pattern for structured writing"):
        
        * For each input structure, create a rule that says how to transform that structure into the new structure you want.
        
        * For each rule, specify the new structure(s) and where to place the content in the new structure(s).
        
        * For each rule, specify where to process any nested structures. In my pseudocode, I use the term `continue` for this function.
        
        * If you want a different rule for a structure that occurs in different contexts, write a separate rule for each context.
        
        Why is it important to understand this pattern? Because when you abstract out invariants to move content to the {document domain} or {subject domain}, understanding how those invariants will be factored back in can help you recognize them in your source and give you the confidence to factor them out. Writing pseudocode helps you validate that you have factored out invariants correctly, that the structures are easy to process, and that the processing rules are clear, consistent, and reliable. 
        
        Obviously, building a complete processing system is much more complex, and I won't go into all the details here, but let's look at a few common cases.
        
    section: Processing container structures
        
        When you move content to the {document domain}+(index "document domain;processing containers in the") or the {subject domain}+(index "subject domain;processing containers in the"), you often create container structures to provide context. These container structures have no media-domain analog, so what do you do with them when you publish? The containers provide context for the rest of your processing rules, but what do you do with the containers themselves?
        
        In the previous example the content was contained in a `section` structure. So how does the `section` structure get processed? 
                
        ```(pseudo)
            match section
                continue
            
        Yes, it's that simple. You don't output any new structure in its place. The section container has done its work at this point so you simply discard it. You still want what's inside it, so you use the `continue` instruction to make sure the contents get processed. But the container is just a box; you unpack the contents and discard the box.  
        
    section: Restoring factored-out text

        Sometimes when you factor out {invariants}+(index "invariants;restoring factored-out"), you not only factor out styles, you also factor out text. To process the content, you need to restore the text (obviously you can restore different text if you need to, which is why you factored it out in the first place). 
        
        As we saw in [#chapter.separating], a simple example of factoring out text is numbered and bulleted lists, where you factor out the text of the numbers and bullets. Let's look at how you create rules to put them back. 
        
        Suppose you have a document that contains these two different kinds of {lists}+(index "lists;restoring factored out invariants in"):
        
        ```
            paragraph: To wash hair:
            ordered-list:
                list-item:Lather
                list-item:Rinse
                list-item:Repeat
                
            paragraph: The box contains:
            unordered-list:
                list-item:Sand
                list-item:Eggs
                list-item:Gold
            
        
        Let's write a set of rules to deal with this document. Converting this to HTML lists isn't very interesting, since HTML handles list numbering and bullets itself. Instead, let's create instructions for printing on paper. Real printing instructions get tediously detailed, so let's use the same style specification shorthand used earlier. The `paragraph` rule is simple enough:
        
        ```
            match paragraph
                apply style {font: 10pt "Century Schoolbook"}
                continue
            
        
        Now let's deal with the `ordered-list`. The {ordered list}+(index "ordered lists") structure is just a container, so you don't need to create an output structure for it. But because this is an ordered list, you need to start a count to number the items in the {list}+(index "lists;numbering in ordered"). That means you need a variable to store the current count. The `$` prefix indicates that you are creating a variable:
        
        ```
            match ordered-list
                $count=1
                continue
            
        
        Then, the rule for each ordered list item outputs the value of the variable `$count` and increments it by one:
         
        ```    
            match ordered-list/list-item
                apply style {font: 12pt "Century Schoolbook"}
                output $count
                output ".[tab]"
                $count=$count+1
                continue
            
        
        Every time the `ordered-list/list-item` rule is executed, the count increases by one, numbering the list items sequentially. 
        
        When the processor encounters a new numbered list, it executes the `ordered-list` rule, which resets `$count` to 1.
        
        This rule does not match `list-item` elements that are children of an `unordered-list` element, so you need a separate set of rules for unordered lists:
        
        ```(pseudocode)
            match unordered-list
                continue
                
            match ordered-list/list-item
                apply style {font: 12pt "Century Schoolbook"}
                output "[em dash][tab]"
                continue
            
        
        Applying the combined set of rules produces output like this:
        
        ```
            {font: 10pt "Century Schoolbook"}To wash hair:
            {font: 10pt "Century Schoolbook"}1.[tab]Lather
            {font: 10pt "Century Schoolbook"}2.[tab]Rinse
            {font: 10pt "Century Schoolbook"}3.[tab]Repeat           
            {font: 10pt "Century Schoolbook"}The box contains:
            {font: 10pt "Century Schoolbook"}[em dash][tab]Sand
            {font: 10pt "Century Schoolbook"}[em dash][tab]Eggs
            {font: 10pt "Century Schoolbook"}[em dash][tab]Gold
            

        This process flattens the structure and removes the document-domain containers. You are back in the media domain, with a flat structure that specifies formatting and text. 
        
    section: Processing in multiple steps

        You may not always want to apply final formatting to your content in a single step. When you separated content from formatting, it took several stages. You may want to put them back together in several stages. This not only results in simpler, easier-to-maintain algorithms, it allows you to reuse some of the downstream steps (nearer the media domain). So far, the examples have come from the media and document domains. Here is a {subject-domain}+(index "subject domain;multi-step processing example") example based on [#ex.separate-1]. 
        
        ```(sam)
            address:
                street: 123 Elm Street
                town: Smallville
                country: USA
                code: 12345
            
        
        Moving this content back to the document domain should make it look like this:
        
        ```(sam)
            labeled-list:
                list-item:
                    label: Street
                    contents: 123 Elm Street
                list-item:
                    label: Town
                    contents: Smallville
                list-item:
                    label: Country
                    contents: 123 USA
                list-item:
                    label: Code
                    contents: 12345
            

        Here is the set of rules to accomplish this transformation:
        
        ```
            match address
                create labeled-list
                    continue
                
            match street
                create list-item 
                    create label 
                        output "Street"
                    create contents
                        continue
                            
            match town
                create list-item 
                    create label 
                        output "Town"
                    create contents
                        continue

            match country
                create list-item 
                    create label 
                        output "Country"
                    create contents
                        continue

            match code
                create list-item 
                    create label 
                        output "Code"
                    create contents
                        continue
            
        
        Notice that the label text, which you factored out when you moved to the subject domain, is being factored back in and is specified in the processing rules. As you moved the content from the media domain to the document domain to the subject domain, you first factored out invariant formatting and then invariant text. Here, you restore the text and the formatting, each at a different processing stage. Of course, you can choose different label text, too.
        
        Processing content in multiple steps can save you a lot of time. The {subject-domain}+(index "subject domain;address structure in the") `address` structure is specific to a single subject, and you might have similar structures for different subjects in your subject-domain markup. However, you might choose to present those different subjects using the same `labeled-list` structure. Since a labeled list is a {document-domain}+(index "document domain;labeled-list structure in the") structure that can be used to present all kinds of information and formatted for many different media, you don't have to write any code to format the `address` structure -- or any of the similar structures -- directly. You can format them all correctly for multiple media using the existing `labeled-list` formatting rules. 
        
    section: Query-based processing

        subjects:: type, term
            concept, query-based processing

        The rule-based approach shown here is not the only way to process structured writing. There is another approach that I call the query-based approach.[*1] In this approach, you write a query expression that reaches into the structure of a document and pulls out a structure or a set of structures from the middle of the document. 
        
        This is a useful technique if you want to radically rearrange the content of a document or if you want to pull content out of one document to use in another. Any reference in these pages to using an algorithm to go through a content set and pull out certain pieces of data is an example of the query-based approach. You will see more examples of this in future chapters.
        
        footnote:(*1)
            The rule-based and query-based approaches are often called "push" and "pull" methods respectively, but I sometimes find it hard to remember which is which. I find rule-based and query-based more descriptive.
            
        This chapter does not by any means describe the full range of available content processing techniques or all the ways in which algorithms can recognize and manipulate structures in content. The point of introducing structured writing algorithms and the basics of content processing is to enable you to think about structures with an eye to how they can be processed. Often when you look at structures in this way you can see how you can use a simpler structure and how that simpler structure can be processed to achieve the same result as a more complex structure. 

        Don't be afraid to write your algorithms in pseudocode to make sure you have a clear idea of the processing you intend for your structures, and don't feel confined by the algorithms or pseudocode used in this book. Choose a format for pseudocode that is clear to you and that communicates clearly to whoever implements the code. Working with that person can help you improve your ability to create useful algorithms and express them in pseudocode. 

        Learning to write code can help you write pseudocode, but it is not essential. What is essential is to think about how you can distribute parts of your system to algorithms and to be able to describe them well enough that a programmer can implement them. 

          
