!smart-quotes: on
chapter:(#chapter.management-domain) The Management Domain: an Intrusion

    <<<(annotations.sam)
    
    subjects:: type, term
        concept, management domain
        

    So far I have talked about three domains: the media domain, the document domain, and the subject domain. But there is a fourth domain that intrudes into this picture: the {management domain}.

    Why do I call the management domain an intrusion? Because while the subject, document, and media domains are about recording the content itself, the management domain is not about the content itself; it's about the process of managing content.         
    
    Suppose you run a company that publishes magazines, and you want to create a common store of recipes for use in all the magazines. However, different magazines have different requirements. _Wine Weenie_ magazine needs to have a wine match with every recipe. _The Teetotaler's Trumpet_, naturally, wants a non-alcoholic suggestion. 

    [*ex.md-1] shows how you could handle this in the {document domain}+(index "document domain;conditional text in the"):

    figure:(*ex.md-1) Conditional text markup (XML)
        ```(xml)
            <section publication="Wine Weenie">
                <title>Wine match</title>
                <p>Pinot Noir</p>
            </section>
            <section publication="The Teetotaler's Trumpet">
                <title>Suggested beverage</title>
                <p>Lemonade</p>
            </section>
    

    This is an example of {conditional text}. The `publication` attribute on the `section` element says, display this text only in this publication. Conditional text structures are management {metadata}, which means they are in the {management domain}. They do not specify the formatting, organization, or subject matter of the document. They specify which publication the content should appear in, which is a content management decision.

    Content management decisions are always external to the writer's core task. They are not decisions about subject matter or rhetoric. They are decisions imposed on writers from elsewhere in the process. As such, the {management domain} is an intrusion not only into the content but also into the writer's time and attention. Some management-domain decisions should be made by writers, but putting the burden on writers increases the complexity of the writing process and the knowledge and skills required to write successfully. Wherever you can, look for alternatives to the {management domain}.

    Any decision imposes two burdens: making the decision, which requires knowledge, and executing the decision, which requires skills. A conditional text system removes the execution of the decision (including or excluding the text at build time), but leaves the decision making (where and what to include) with the writer. But it also introduces new knowledge and skill requirements, since the writer has to know how to apply conditions and apply them correctly, which is not always a simple matter. 

    This is a common pattern with management-domain structures; the knowledge requirements they introduce are often greater then the ones they factor out. When we factored out list formatting in the {document domain}+(index "document domain;lists in the")+(index "lists;document-domain"), it was a simple reduction in requirements. Writers still had to decide whether to create a list and record the fact that they were creating a list, but we removed the requirement to format the list and added nothing new to learn. But in this case, writers must learn something new: conditional markup and its logic and behavior. Let's look at another example that exhibits the same pattern.
   
    section: Including boilerplate content
    
        subjects:: type, term
            concept, boilerplate content

        Suppose you must include a standard {warning statement}+(index "warning statements, boilerplate") with any content that describes a dangerous procedure. Structured writing partitions complexity by factoring out invariants, and the invariant here is that this warning statement must appear whenever you describe a dangerous procedure. 
        
        Just as you extracted formatting information into a separate file to move content from the media domain to the document domain, you now extract the invariant warning from the document and place it in a separate file. Any place you want this warning to occur, you insert an instruction to include the contents of the file at that location. (see [*ex.md-2]).

        figure:(*ex.md-2) Include a warning in a dangerous procedure (SAM markup)
            ```(sam)
                procedure: Blow stuff up
                    <<<(files/shared/admonitions/danger.sam)
                    step: Plant dynamite.
                    step: Insert detonator.
                    step: Run away.
                    step: Press the big red button.
        
        In the SAM markup in [*ex.md-2], `<<<` is a command that includes the content of the file located at `files/shared/admonitions/danger.sam` in the source file replacing the `<<<` command.
        
        The equivalent in XML would look something like [*ex.md-3].

        figure:(*ex.md-3) Include a warning in a dangerous procedure (XML markup)
            ```(XML)
                <procedure>
                    <title>Blow stuff up</title>
                    <xi:include href="files/shared/admonitions/danger.xml"/>
                    <step>Plant dynamite.</step>
                    <step>Insert detonator.</step>
                    <step>Run away.</step>
                    <step>Press the big red button.</step>
                </procedure>
        
        
        Why is this operation part of the {management domain}+(index "management domain;inclusions in the"), rather than the {document domain}+(index "document domain;inclusions in the")? Because it deals with a system operation: locating a file in the system and loading its contents. If you were purely in the document domain, the writer would perform this operation by finding the file with the warning in it, opening it, and copying the contents into the document. The `include` instruction is just that: an instruction. It is not a declaration about the subject matter or structure of a document, such as you would find in subject-domain or document-domain markup. It is an instruction to a machine to perform an operation. The {management domain} consists of either instructions or the declaration of data required to perform specific management instructions. It requires the writer to understand these instructions and other features of the content management system, such as the location of files. 

        Different structured writing systems have different instruction sets for handling the situation described above. In {DITA}+(index "DITA;conref"), for instance, this use case is handled using something called a {conref}(element (DITA)) or a {conkeyref}(element (DITA)). {DocBook}+(index "DocBook;XInclude in") uses a generic XML facility called {XInclude}, which is shown in [*ex.md-3]. Thus writers need to learn the specific management features of the languages and tools they are using.

        One downside of the management-domain include instruction is that writers must have system knowledge to use it correctly. However, the use of conditional expressions or include instructions is not just a problem for writers, it also complicates change management and content management by distributing management-domain structures such as conditions and file paths throughout your content. Management-domain structures encode management decisions in the content itself. Changing those decisions means changing management structures all over the content set. 
        
        Is there a way to partition management complexity from authoring and keep management decisions out of the content? In many cases this can be accomplished using the subject domain.

    section: An alternative approach in the subject domain
        
        [*ex.md-4] shows how you might approach the two-magazines problem in the {subject domain}+(index "subject domain;conditional text in the").

        figure:(*ex.md-4) Subject-domain alternative for conditional content
            ```(xml)
                <wine-match>Pinot Noir</wine-match>
                <beverage-match>Lemonade</beverage-match>

        This markup says nothing about which documents should contain either of these pieces of information. Nor does it contain the subheadings that would introduce either of them in the appropriate publication. All these decisions are now left to algorithms. This allows you to do far more with this content without having to rewrite the source files in any way. Writers don't have to understand how the conditional text systems works. They just record two pieces of information. 

        I noted in [#chapter.subject-domain] that the subject domain can factor out rhetorical decisions by simply recording facts about the subject. This is another example of this. By recording two different beverage matches, you can make different rhetorical decisions for two different audiences. The management-domain markup also attempted to capture two different rhetorical alternatives, but rather than factor them out, it embedded both alternatives into a single file. This approach not only makes the writer responsible for making the decision, it also means that changing the decision requires the writer to reopen the file and every file in which a similar decision is made. Thus the subject-domain approach not only makes the writer's life easier, it makes the change management process much simpler. (I will look more at change management in [#chapter.change].) 

        Every time you move a decision out of the content and into an algorithm, you accomplish two things: you make authoring easier, and you preserve the ability to make different decisions without changing content. Factoring out the management domain is a big win on both fronts. 
        
        Let's factor out the decision involved in including a warning in dangerous procedures. As described in [#chapter.subject-domain], factoring out {invariant content}+(index "invariants;factoring out") is a feature of the subject domain. In this case, the invariant content comes from the rule: A dangerous procedure must have a standard warning. 

        The management-domain approach allows writers to insert a standard warning that is stored in one place.[*fn.md-reuse] Notice that the management-domain markup does not encapsulate the invariant rhetorical rule that dangerous procedures must have a standard warning. It simply provides a generic mechanism for inserting content from an external file. The writer must still remember and execute the rule about dangerous procedures.  

        footnote:(*fn.md-reuse)
            This approach is a form of {content reuse}, an algorithm discussed in [#chapter.reuse].
        
        The subject-domain approach, on the other hand, is all about the rhetorical rule itself. Specifically, it expresses the aspect of the subject domain that triggers the rule: whether a procedure is dangerous or not. [*ex.md-5] shows how you might mark up this information.

        figure:(*ex.md-5) Subject-domain markup for a warning notice
            ```(sam)
                procedure: Blow stuff up
                    is-it-dangerous: yes
                    step: Plant dynamite.
                    step: Insert detonator.
                    step: Run away.
                    step: Press the big red button.
        
        
        This markup identifies the procedure as dangerous, a fact about the subject matter that your rhetorical standards require you to mention. Rather than making the writer remember that a warning is required, locate the warning file, and include a reference to the file, you delegate those decisions to the {publication algorithm}. The algorithm, not the writer, must remember to include the material in `files/shared/admonitions/danger` when the value of the `is-it-dangerous` field of a `procedure` structure is set to `yes`. Algorithms are much better at this sort of task than humans are.

        Of course, writers still must remember to set `is-it-dangerous` to `yes` when they write a procedure (another example of creating a new constraint when we factor out an old one). But you can make it much easier for them to remember this requirement by making `is-it-dangerous` a mandatory field in the procedure structure and raising an error if the field is not included. This transfers the complexity of remembering the requirement and fulfilling it from the writer to the conformance and publication algorithms. 

        With this approach, writers cannot complete a procedure without supplying the required information. This removes a decision, simplifying the writer's job. In addition, writers don't need to know how the content management system works, what warning text is required, or where the text is located. They simply record a fact about the subject -- factoring out the complex rhetoric and all of its permutations.
        
        One the other hand, this approach only factors out the reuse of one particular piece of content -- the warning for dangerous procedures. If you have multiple invariant rhetorical rules about different kinds of subject matter, you need a separate subject-domain structure for each of them, whereas a single management-domain include instruction would let the writer handle them all. 
        
        On the other other hand, if you have many invariant rules, and you expect writers to remember all of them, you are asking your writers to carry an awful lot of rhetorical constraints in their heads, and you are going to limit your pool of writers to a few highly trained individuals. And those individuals are still likely to miss some instances, leading to omissions -- rhetorical failures -- that can have dangerous consequences for the reader.

    section: Hybrid approaches
    
        It is not always an either/or decision to use pure management-domain or pure subject-domain approaches. Management-domain structures tend to be used in generic document-domain languages, since such languages are not designed to be specific to any particular subject matter. Nonetheless, such languages often have roots in particular fields and sometimes include subject-domain structures from those fields. Both DocBook and DITA, for instance, originated in the field of software documentation, and both include structures, such as code blocks, that are related to the subject of software. 
        
        Some languages mix subject-domain structures into their management structures. One example is the {product}(attribute (DITA)) attribute, which is part of DITA's conditional-text processing system. 
        
        DITA lets you add the {product} attribute to a wide variety of elements. Your build system can then include or exclude elements in a particular output based on the value of that attribute. [*ex.md-7] shows an example of the DITA {product} attribute.

        figure:(*ex.md-7) DITA product attribute example
            ```(DITA)
                <p>
                The car seats <ph product="CX-5">5</ph><ph product="CX-9">7</ph>
                </p>
        
                
        DITA can afford to use this bit of subject-domain markup because product variations are a common reason for using conditional text processing in technical communication, the area for which DITA was created.[*fn.md-specialize]

        footnote:(*fn.md-specialize)
            DITA can add other subject-domain attributes for conditional processing through a process called {specialization}+(italic). [#chapter.extensible] has additional information about DITA specialization.
        
        I call this a hybrid approach because the DITA {product} attribute does not exist merely to declare that a piece of text applies to a particular product. It is a {conditional-processing attribute}+(index "conditional processing in DITA")+(index "DITA;conditional processing in"). That is, it is an instruction, even though it is phrased as a subject-domain declaration. 

        To appreciate the difference, consider another approach to documenting multiple versions of a product. Rather than generating a separate document for each product variant, you could create a single document that covers all product variants and highlights the differences. Pure subject-domain markup would support either approach by simply recording the data for each variant:
        
        ```(sam)
            seats:
                CX-5: 5
                CX-9: 7
        
        This information could be presented as data similar to its source format or it could be used to algorithmically construct a sentence like this:
        
        """
            The CX-5 seats 5 and the CX-9 seats 7.
        
        The product attribute does not provide this flexibility:
        
        ```(DITA)
            <p>The car seats 
            <ph product="CX-5">5</ph><ph product="CX-9">7</ph>
            </p>
        
        This markup is designed to produce only a CX-5 or a CX-9 specific document. It is not designed to produce a document that covers both cars at once, because it does not specify that the values 5 and 7 are numbers of seats. That information is in the text, but not in a form that a publishing algorithm could reliably locate and act on.

        Also, no writer would expect this management-domain markup to be used to create a single document covering both cars. No writer would interpret the markup to mean this. Rather than declaring facts about each car, this markup was designed to produce a document about one car or the other, not both. It is conditional-text markup and, therefore, an instruction.

        While the introduction of subject-domain names into {management-domain} structures provides an appropriate bit of semantic sugar for writers, this hybrid approach really remains firmly in the management domain.
            
        The following chapters contain many more examples of the management domain, including cases where there is and is not a {subject-domain}+(index "subject domain;alternatives to the management domain") alternative.
