!smart-quotes: on
chapter:(#chapter.separating) Separating Content from Formatting
    
    <<<(annotations.sam)
    
    subjects:: type, term
        concept, separating content from formatting

    If there is one phrase that most people associate with structured writing, it is "separating content from formatting." This basic, well-known structured writing algorithm can be used to achieve a number of process and rhetorical goals. It is a useful place to start the study of algorithms because it illustrates the strategies used for all the other algorithms. Separating content from formatting separates decisions about the appearance of a document from decisions about its content.
    
    section: Separate out style instructions
    
        Let's start with a piece of text that includes a description of its format. I use {CSS}+(index "cascading style sheets (CSS);list formatting using")+(index "lists;CSS formatting for") syntax to describe the format because CSS is easy to understand and helps illustrate the separation, but don't focus on the syntax, it is just there to illustrate the principle. I also represent certain characters (bullets and tabs) by their names, so you can see exactly where everything is going:
        
        ```
            {font: 10pt "Open Sans"}The box contains:
            {font: 10pt "Open Sans"}[bullet][tab]Sand
            {font: 10pt "Open Sans"}[bullet][tab]Eggs
            {font: 10pt "Open Sans"}[bullet][tab]Gold
        
        
        This file contains content and formatting, so let's separate the two. Of course, when you remove the formatting, you need to add something in its place so you can add the formatting back later. The simplest method is to replace the formatting with a named style:
        
        ```
            {style: paragraph}The box contains:
            {style: paragraph}[bullet][tab]Sand
            {style: paragraph}[bullet][tab]Eggs
            {style: paragraph}[bullet][tab]Gold
        
        
        Then, you need to record the style information. You aren't removing that information; you're just separating it from the text:
       
        ```
            paragraph = {font: 10pt "Open Sans"}
                    
        Once you separate the style information, you can change the formatting without changing the text; for example, you could choose a different {font}+(index "fonts;factoring out"):
        
        ```
            paragraph = {font: 12pt "Century Schoolbook"}
        
    
    section: Separate out formatting characters
       
        Cool, but suppose you need to change the style of the bullets. The bullet style is certainly formatting, but bullets are text characters. To change them you can't just change the font, you have to change the characters themselves. Some characters in your text are part of the content, and some are part of the formatting. Therefore, a style may include characters as well as formatting directives, as shown here:
        
        ```
            paragraph = {font: 12pt "Century Schoolbook"}
            bullet-paragraph = {font: 12pt "Century Schoolbook"}[bullet]
        
        Now the content looks like this:
        
        ```
            {style: paragraph}The box contains:
            {style: bullet-paragraph}[tab]Sand
            {style: bullet-paragraph}[tab]Eggs
            {style: bullet-paragraph}[tab]Gold
        
        
        However, you still must begin the bulleted lines with a tab, which is awkward and error prone, so let's move that character to the style as well:
     
        ```
            paragraph = {font: 12pt "Century Schoolbook"}
            bullet-paragraph = {font: 12pt "Century Schoolbook"}[bullet][tab]
        
        Now the content looks like this:
        
        ```
            {style: paragraph}The box contains:
            {style: bullet-paragraph}Sand
            {style: bullet-paragraph}Eggs
            {style: bullet-paragraph}Gold
        
        And now you can change the bullet style:

        ```
            bullet-paragraph = {font: 12pt "Century Schoolbook"}[em dash][tab]
        
               
        Because the style now uses an em-dash, rather than a bullet, the name `bullet-paragraph` may not be the best choice. The content still contains a style named for a particular piece of formatting, which means writers are still making the formatting choice "bullet" when it would be better for them to focus on the content choice "list."
        
    section: Name your abstractions correctly
        
        The names you choose for styles and other {abstractions}+(index "abstractions;naming") matter. The wrong name sets up a false expectation, which can lead to writers using a style incorrectly. So the first lesson about separating content from formatting is that naming matters. You are creating an abstraction, so you need to figure out what that abstraction is and name it appropriately.
        
        What is the abstraction here? Sand, Eggs, and Gold are list items. So maybe you do this:
        
        ```
            {style: paragraph}The box contains:
            {style: list-item}Sand
            {style: list-item}Eggs
            {style: list-item}Gold
        
        
        and
        
        ```
            list-item = {font: 12pt "Century Schoolbook"}[em dash][tab]
        

    section: Make sure you have the right set of abstractions

        But then, of course, you run into lists like the following:
        
        ```
            {style: paragraph}To wash hair:
            {style: list-item}Lather
            {style: list-item}Rinse
            {style: list-item}Repeat
        
        
        These list items should have numbers, not dashes or bullets. So the abstraction does not cover all list items. If you look at the different kinds of list items, group them into abstract types, and come up with names for those types, you probably come up with `ordered-list-item` and `unordered-list-item`. Then you have:
        
        ```
            {style: paragraph}The box contains:
            {style: unordered-list-item}Sand
            {style: unordered-list-item}Eggs
            {style: unordered-list-item}Gold
        
        
        and
       
        ```
            {style: paragraph}To wash hair:
            {style: ordered-list-item}Lather
            {style: ordered-list-item}Rinse
            {style: ordered-list-item}Repeat
        
       
        The style for ordered-list-items now looks something like this:
        
        ```
            ordered-list-item = {font: 12pt "Century Schoolbook"}<count>.[tab]
        

        But you need a way to increment the count and reset it to 1 for a new list, which leads to:
        
        ```
            {style: paragraph}To wash hair:
            {style: first-ordered-list-item}Lather
            {style: ordered-list-item}Rinse
            {style: ordered-list-item}Repeat
        
        
        and 
        
        ```
            first-ordered-list-item = 
                {font: 12pt "Century Schoolbook"}<count=1>.[tab]
            ordered-list-item = 
                {font: 12pt "Century Schoolbook"}<++count>.[tab]
        
        
        (`++count` here means add one to `count` and then display it.)

        This is pretty much how {FrameMaker}, {Microsoft Word}+(index "Microsoft Word;lists in")+(index "lists;Microsoft Word"), and many other tools handle lists. The reason for going through this example in such detail is to point out how much is involved in even this simple bit of partitioning. You began by removing formatting commands, followed by characters, which forced you to include characters in the style definitions. And then you had to calculate the value of characters. At each step, you had to consider all possible cases and create abstractions to handle them. 
        
    section: Create containers to provide context
        subjects:: type, term
            structure, containers

        block-index:
            {context}+(index "content;structure as a way to define")
       
        One problem with this approach to creating lists is that you have to apply a different style to the first item of a list. It would be better if you could use the same style for each list item and have the numbering just work. However, this is hard to do because nothing in the content says where one numbered list ends and the next begins. For this you need a new abstraction. So far, you have {abstractions}+(index "abstractions;list") for ordered and unordered list items, but you don't have an abstraction for {lists}+(index "lists;containers for") themselves. 
        
        Up to this point, everything has been purely in the {media domain}+(index "media domain;lists in the")+(index "lists;media-domain"). You replaced direct formatting definitions with indirect definitions through styles. But now it's necessary to venture into the {document domain}+(index "document domain;lists in the")+(index "lists;document-domain"), creating the abstract idea of a list and inserting that abstract idea into your content.
        
        ```
            paragraph: To wash hair:
            list:
                ordered-list-item:Lather
                ordered-list-item:Rinse
                ordered-list-item:Repeat
        
        
        There are two significant changes here. First, the structure is no longer flat. Previously a list was a series of paragraphs with different styles attached. Now there is a container, `list`, that, as far as the formatting is concerned, never existed in the original.[*fn.indentation] The writer and reader knew that the sequence of bulleted paragraphs formed a list, but that was an interpretation of the formatting. Now that interpretation is recorded explicitly in the content itself.

        footnote:(*fn.indentation)
            The SAM markup in this example uses indentation to identify hierarchy. The `list` container contains three instances of `ordered-list-item`.
            
        By creating the idea of a list, you further separate list formatting from the list content. Now, an algorithm can recognize a list and make formatting decisions based on that knowledge. 
        
        The second important thing is that the content no longer refers to style names. Instead you have structures. `list` is a structure and so are `paragraph` and `ordered-list-item`. You can give the same structure a different style depending on where it is in the document. The {formatting algorithm} can determine which `ordered-list-item` is first and format it accordingly; this is {how list formatting works in CSS.}[https://css-tricks.com/numbering-in-style/]
        
        Now, writers no longer apply {styles}+(index "styles;using structure to apply") directly to content, even styles with abstract names. Rather they place content in structures and allow the formatting algorithm to apply styles appropriately. This separates the content even more from the formatting.
        
    section: Move the abstractions to the containers
        
        But what if a writer inadvertently does this:
        
        ```
            paragraph: To wash hair:
            list:
                ordered-list-item:Lather
                unordered-list-item:Rinse
                ordered-list-item:Repeat
        
       
        To avoid this type of error, move the {abstraction}+(index "abstractions;moving to containers") outward. Instead of creating ordered and unordered list items, create ordered and unordered lists:
        
        ```
            paragraph: To wash hair:
            ordered-list:
                list-item:Lather
                list-item:Rinse
                list-item:Repeat
        
        
        and 
        
        ```
            paragraph: The box contains:
            unordered-list:
                list-item:Sand
                list-item:Eggs
                list-item:Gold
        

        Now, you have a single `list-item` structure that you can use in either an unordered list or an ordered list; the {formatting algorithm} determines the formatting based on which type of list the list-item belongs to. The name `list-item` describes a role in the document that is entirely separate from formatting.
        
        Moving the abstraction out to the {container}+(index "containers;moving abstractions to") is an important part of the algorithm for separating content from formatting. It partitions ordered and unordered lists, making the construction of each simpler and more reliable. This helps keep things consistent and reduces the number of things writers have to remember. (Notice that this requires writers to decide whether a list is ordered or unordered, but they had to decide this anyway; the decision is implicit in the rhetoric of the piece.)
        
        Some markup languages take better advantage of containers than others. For example, {HTML}+(index "HTML;containers in") and {Markdown}+(index "Markdown;containers in") both provide six different heading levels. However, content under an `H2` or an `H5` heading is not in any container. The content simply comes after the heading. This means that is it perfectly possible and legal to use heading elements in any order you want. Writers must select the heading level and ensure that it fits the structure of their document.
          
        By contrast, {DocBook}+(index "DocBook;containers in") has a {section}(element (DocBook)) structure. Like a list, a section records your interpretation of what you are creating in the document. The {section} structure instantiates the concept of a section. And once you have the instantiation of a section, you don't need six levels of heading. You can have one structure called {title}(element (DocBook)). Sections can be nested inside other sections, and the formatting algorithm applies the correct style to the title based on {context}+(index "context;processing based on").

        This eliminates decisions about which heading element to use; there is just one: `title`. This ensures that {headings}+(index "headings;hierarchy in") in output consistently reflect the document's section and subsection structure.[*fn.signposts] 
               
        ```
            section: 
                title:
                paragraph:
                section:
                    title:
                
        footnote:(*fn.signposts)
            Not everyone holds to the view that headings in a text must reflect a hierarchy of sections. Instead, headings may be simply signposts along the way, where the size of the sign reflects some quality -- size of the town or the importance of the section -- other than a strict hierarchy. If that is how you look at document structures, you should choose a different way to separate content from formatting.
        
    section: Separate out abstract formatting
        
        To separate content from {formatting}+(index "formatting;separating out abstract") for ordered and unordered {lists}+(index "lists;labeled"), you must separate out some of the content as well. Specifically, you must separate out some of the characters. The distinction between content and formatting is not the same as the distinction between characters and the styles applied to them. Sometimes characters are part of the formatting rather than the content. Consider the following labeled-list structure:        

        
        >>>(image ../graphics/labeled-list.xml)
        
        The generic structure of a labeled list might look like this:
        
        ```(sam)
            labeled-list:
                list-item:
                    label: Street
                    content: 123 Elm Street
                list-item:
                    label: Town
                    contents: Smallville
                list-item:
                    label: Country
                    contents: USA
                list-item:
                    label: Code
                    contents: 12345
        
        
        But what if you have hundreds of addresses, all with the same labels? Are the labels content or are they presentation? Since the labels don't change from one list to another, you could look at them as being part of the presentation rather than the content. So let's look for a way to separate them from the content. 
        
        As always, when you separate something from your content, you have to replace it with something else. In [#ex.separate-1], named structures reflect the subject matter of the entries, which moves this content into the {subject domain}+(index "subject domain;lists in the")+(index "lists;subject-domain").

        figure:(#ex.separate-1) Address markup in the subject domain
            ```(sam)
                address:
                    street: 123 Elm Street
                    town: Smallville
                    country: USA
                    code: 12345
        
        
        Here, once again, it is important to distinguish {formatting}+(index "formatting;presentation versus") and {presentation}+(index "presentation;formatting versus"). {Formatting}-(index)+(italic) refers to the precise details of a text's appearance: the font chosen, the width of the text column, the size of the characters, the spacing between lines, the size and shape of the bullet characters, and so forth. {Presentation}-(index)+(italic) refers to the organization of text.

        Deciding to use a list for a certain piece of information is a presentation decision, which is independent of the formatting details applied to lists. When you move content from the {media domain}+(index "media domain;moving from the document domain to the") to the {document domain}+(index "document domain;moving content to the"), you separate the formatting of the content from its presentation. The decision to present the information as a list remains; the decision about what that list looks like is separated out.

        In contrast, moving content from the {document domain}+(index "document domain;moving content to the subject domain from the") to the {subject domain}+(index "subject domain;moving content from the document domain to the") separates the {information}+(italic)+(index "information, separating presentation from") from the {presentation}+(italic). The subject-domain structure in [#ex.separate-1] is not a labeled list. It is a data record that can be turned into many different forms of {presentation}+(index "presentation;separating information from"). 
        
        Turning such structures into a specific form of presentation is the job of the presentation algorithm (see [#chapter.publishing]). The presentation algorithm could turn it into a labeled list, a table, a paragraph, or an address label.
        
        In the {subject domain}+(index "subject domain;moving content from the document domain to the") separates the {information}+(italic)+(index "information, separating presentation from") from the {presentation}+(italic). The subject-domain struct, with the content separated from both formatting and presentation, you also gain the ability to query and reorganize the content in various interesting and useful ways (which I explore in later chapters). 
        
        This is as far as you can go in separating content from formatting, and you can't separate all content from formatting to quite this extent. Separating content from formatting is not a binary operation. There are various degrees of separation that you can apply for various reasons. It is important to understand exactly which degree of separation best serves your needs. 
        
    
