chapter:(#chapter.partitioning) Partitioning the Complexity of the Content System

    <<<(annotations.sam)

    index:: type, term
        concept, partitioning

    All modern content systems are partitioned. Not all modern content systems are partitioned in a way that fully handles the complexity of the content development and delivery process. As a result, many organizations produce content of poor or variable quality, and loose money as a result. 

    Why is it difficult to correctly partition your content process? Much of the difficulty lies in the interfaces between partitions. The job of the interface is to transfer information from one partition to another. You can't effectively partition a system unless you create an effective interface between the partitions you are creating. If the interfaces don't work correctly, complexity will go unhandled and quality will suffer.  

    Like all modern authoring tools, word processors and desktop publishing systems represent a partitioning of the content process, and they have interfaces that reflect that partitioning. For instance, in this class of tools, you format a piece of text by applying a style to it. The style is selected from a predefined list of styles. This interface partitions the formatting of text from the creation of text. The styles are the interface between the writing of text and the formatting of text. To use this interface, the author must apply a style to the text they are creating, rather than formatting it directly. 

    A good interface provides feedback to the user to let them know if they have given the next partition the information it needs to do its job. In a desktop publishing application, when you apply a style to a piece of text, the interface responds by showing you a preview of the formatted text. The interface essentially say, if it looks right, it is right. This is known as a WYSIWYG interface (What You See Is What You Get).

    This partitioning does not remove all formatting issues from the writer's concerns or their control. It does not guarantee, for instance, that the writer will alway apply the correct style to each part of the document. Different writers (or even the same writer at different times) may have different ideas about how a document should be designed. And writers looking at the WYSIWYG feedback may not notice from the formatted text that is shown on screen that they have actually applied incorrect style for that document element.  

    The problem is that this class of authoring tools partitions the writing of the content from the formatting of content, but not from the overall design of the document. Document design remains on the author's side of the partition. The style sheet restricts the formatting pallet available to the author for designing documents, but does not tell them how to use the items on that pallet to achieve an overall effective document design. And since writers are not document designers by trade, they may not always do this well, and multiple writers working on a common projects will almost certainly do it differently.

    Independent of the question of whether writers can do document design consistently or well is the problem that document design is an addition responsibly in addition to the writer's core responsibilities of research and writing. Being responsible for document design divides their attention, leaving them less attention to focus on their core responsibilities.  

    Many organization use style guides to tell the writer how they are suppose to use the style pallet to design the overall document. But the style guide only provide instructions, it does not partition the task away from the writer. The style guide, and many of them are very long and complex, merely adds to the complexity on the writer's side of the partition. 

    Yes another problem with this particular partitioning is that it ties both the content and the writer to the particular tool that is used to create it. To add to or edit your content set, writers needs a license for and knowledge of the particular desktop publishing or word processing tool that was used to create it, as well as any special instructions your organization may have for the use of these tools. Any tool that is indispensable to the partitioning of your content system in a sense owns a piece of your process and your content.  

    section: Choosing a different partitioning

        It you want to ensure document design consistency, and relieve writers of the responsibility for document design, you need to partition the content system in a different way, one that partitions document design to the document designer and away from the writer. This requires a different interface. A typical word processor or desktop publishing applications only knows about two basic document structures: paragraphs and tables. Document designers care about far more document structures, things like ordered lists, sections, definition lists, chapters, titles, bibliographies, and index entries. An interface that does not specify such structures cannot partition document design from writing. 

        WYSIWYG interfaces are not always the best interfaces for these other approaches to partitioning the content system. They tell the writer, if it looks right, it is right, but, as we have seen, that is not always the case. In fact, the idea that, if it looks right, it is right, can be downright destructive of content quality, for many of the most important aspects of content quality -- its rhetoric, its consistency, its accuracy, its completeness, its choice of terminology -- have nothing to do with what the displayed content looks like.  

        Two other types of interfaces are commonly used in structured writing to create different kinds of interfaces that support different methods of partitioning the content system. One of these is a forms based interface, which is commonly used on many WebCMS and blogging platforms, usually backed by a relational database. The other is markup languages. 

        A markup language is a system for indicating the structure of a text via marks directly in the text itself. {HTML} is probably the single most widely used markup language in the world today, but there are thousands of different markup languages, and people create new markup languages for specific purposes all the time. Each of these languages represents a specific interface between partitions in a content system.

        Markup languages are by far the most general type of content interface and can be used to represent just about any kind of partitioning of the content system. In fact, markup languages are usually found behind the scenes in WYSIWYG and forms-based interfaces. However, markup languages can also stand alone as interfaces in their own right. {Markdown}, for instance, has become a very popular markup language for writing simple Web content. 

        There can be (and usually are), multiple partitions in a content system. The interfaces between those partitions are frequently markup languages, including the partitions that writers never interact with themselves. For instance, an organization may use {Markdown} for authoring for at least part of their content. But {Markdown} is converted to {HTML} for publishing, and a CSS stylesheet (another markup language) is used to specify the formatting of that content. Thus three markup languages, at least, as being used as the interfaces or partitions in that content system.  

        Most of the discussion in this book will focus on the use of markup languages for interfaces, as it is markup languages that provide the greatest range of possibilities for effectively partitioning the content system. Some of the markup techniques we will discuss here can be effectively hidden behind WYSIWYG or forms-based interfaces and some cannot. But here we will use markup to illustrate them all, as this provides the clearest view of the structure and of the interface that it provides between partitions. This approach should give you the clearest idea of how you can effectively partition the various elements of your content system.

    section: Desktop publishing and the changing face of content systems

        One of the biggest changes in the partitioning of the content system was ushered in by the desktop publishing revolution of the 1980s. Prior to the introduction of desktop publishing, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, the preparation of proofs by a printer, correction of proofs, and the final printing. This was a complex and time consuming process that cost a lot of money and had many points where failure could occur or error be introduced. The various function were well partitioned from each other, but the overhead of passing information from one to another was cumbersome and time consuming. 

        Desktop publishing eliminated much of that overhead by putting all the tools of document creation -- writing, design, layout, proofing -- in the hands of a single operator. The problem with this model are twofold. First, it put too much of the complexity on one person: the writer. The writer's attention is divided between multiple tasks, and since attention is a finite resource, this meant the quality of writing, design, layout, and proofing all suffered. The fact that desktop publishing skill became a major hiring criteria for writers (and remains so today) shows how the focus was taken off writing and knowledge of subject matter and placed on the ability to manage the complexity of the publishing process.   

        Secondly, while it removed a lot of complexity of vertical communication between writer, designer, and typesetter, desktop publishing left every writer on an island, making no provision for any kind of horizontal coordination between writers. Everyone worked on their own book as a separate project. The division of the writer's attention and the lack of horizontal coordination meant the huge amounts of complexity were going unhandled in large content systems. Duplication, omissions, and inconsistencies were very difficult to detect and fix, while providing effective navigation between books was virtually impossible. All this unhandled complexity was dumped on the reader in the form of poor quality content. Desktop publishing did not create this problem, but it did nothing to fix it.   

        Content management system have tried very hard to partition and redirect the complexity of that horizontal coordination, but with results are are, at best, incomplete. Meanwhile, the advent of the Web had brought a new set of challenges. A modern website is not a library of independent volumes but a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how readers seek and use content. Many organizations are trying to deliver content to both the paper model and the Web model simultaneously. 

        Content creation and delivery has got a lot more complex and reader's expectations far more demanding. The desktop publishing model is fundamentally unsuited to handling this complexity. We need a new partitioning of the content system, one that handles both the horizontal and vertical integration issues better, and which providing better support the rhetorical aspects of content quality that no previous technology has seriously addressed. 


    section: Quality and value

        The increasing complexity and speed of content delivery in the age of the Web means that we need an increase emphasis on the rhetorical quality of writing as well as its physical and design qualities. The emergence of the discipline of content strategy shows that organizations are feeling the impact of poor content quality and are seeing content quality as a strategic value. Still, content quality can only be achieved in a repeatable and sustainable way if we can partition the content system in such a way that all the complexity of content creation is directed to people with the skill, time, and resources to handle it properly. Content quality -- not merely process efficiency -- has to be at the heart of any effort to redesign the content system to meet modern requirements.  

        In the age of physical typesetting, we had no tools to help with the rhetorical quality of content, and the desktop publishing revolution was mostly concerned with digitizing the previously mechanical design and layout process. The partitioning of the content system was largely dictated by the limits of the tools, thus forcing organization to partition their process in ways that did not always handle the full complexity of content creation properly, resulting in the creation of much poor-quality content. Modern structured writing tool, however, have the capacity to allow us to partition the content system in ways that significantly enhance content quality. This includes methods that free the writer to focus on quality, methods that positively support the writer in creating consistent quality, methods that improve our ability to validate and audit content quality, and methods that allow us to create content structures and products that would not be possible with other methods. 

        The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in the content field. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in the area of content quality. Where structured writing tools have replaced desktop publishing or word processing tools it has largely been in pursuit of process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both.

        The first priority in any partitioning of the content system, therefore, is to maximize content quality. Poor content quality is the result of unhandled complexity in the content system, therefore the goal of content system design must be to ensure that every piece of the complexity of the content system is directed to a person or process that has the skills, the time, and the resources to handle it. This means that no part of the complexity of the system can be dropped in the interface between partitions, or within the operation of any partition. Nor can the interface of any partition be made so complex that the interface itself introduces complexity that cannot be handled adequately by the person working in that partition. 


    section: The central role of writing

        There are many reasons to change the partitioning of a content system. Different partitioning can allow us to automate various aspects of the process, which can improve efficiency and consistency, and can even allow us to produce outputs that could not be produced at all without automation. But in pursuit of these goals, we can sometimes lose site of where the fundamental value of all content comes from: the writing. 

        Writing well is an activity that requires the whole of the writer's attention. Any part of the complexity of the content creation process that divides the writer's attention makes it more difficult for them to write quality content. Every partitioning requires the creation of an interface that passes information from one partition to another. Sometimes the interface to a new partition that enables some new form of automation can turn out to be more complicated than the interface to the old partition. 

        This ends up making the writer's life more complex rather than less. If the writer ends up with more complexity than they can comfortable handle, the result is dropped complexity, which means diminished content quality. Sometimes that unhandled complexity also derails the attempts to make the process more efficient because the information coming through the complex interface is not reliable enough for the new process to work correctly.

        The sad truth is that many content systems have never  seriously attempted to minimize the amount of complexity they dump on the writer. Writing and publishing have largely been treated as separate concerns, as if the publishing process and its demands had no influence, for good or bad, on the quality of content that the system  produced. The result has been widespread dissatisfaction with content tools and systems, and with their results. Lack of attention to where complexity falls in a system also typically results in breakdown and failure of the system over time, particularly as new features are added to address specific needs without adequate thought given to the impact of complexity they introduce, a process content strategist Joe Golner calls the "barnacalization of systems". 

    section: The role of algorithms

        There are two fundamental and often complementary reason to partition the content process. One is to offload excessive complexity from a particular person or group, and the other is to direct an operation (and its complexity) to an algorithm. In many cases these are complementary aims because we partition the complexity away from a person and direct it to an algorithm. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted a certain way, chances are many similar pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.  
        
        Writing an algorithm to do a repetitive task redistributes complexity from the person who used to do the task to the algorithm, but also to the person who writes and maintains the algorithm. For example, using a CSS stylesheet to format lists redistributes the task of designing list formatting from the writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.  
        
        Using CSS partitions the complexity of formatting a page so that we can distribute the complexity of formatting away from the writer.  Now the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This simplifies the writer's life, allowing them to focus on writing. It also simplifies the designers life, allowing them to concentrate on design. The result is better writing and better, more consistent, design.  

    section: The role of tools

        However, while this transfer of responsibility improves quality by allowing both designer and writer to focus on what they do best, it also introduces a new kind of complexity into the system. CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS in to our process means introducing new complexity. 

        All tools introduce new complexity into the processes they serve. People have to design the tools and build the tool and learn to use the tool, and maintain the tool. All this is new complexity that did not exist before. We accept this new complexity into our processes because a good tool allows us to distribute our existing complexity more efficiently, so that less of the complexity falls on the people and more on the tools, and so that each person in the system only has to deal with the complexity that they are able to cope with. Managing where the complexity falls is ultimately much more effective than merely minimizing total complexity. 
        
        Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or a text message is staggering, but its directs the complexity of communicating over distance away from the users towards systems, and the people who maintain them, for a huge net gain in productivity. 
        
        The content creation stack is similarly complex. Yet the content creation stack does not do such a good job of partitioning and distributing all of the complexity of content creation, often focusing far more of that complexity on writers than they can reasonably be expected to handle, with the result that complexity is pervasively being dumped on the reader in the form of poor quality content. 

    section: Towards a more effective partitioning of the content system
        
        The impact of poor quality content goes straight to the bottom line of revenue and profitability. To address it, we need a new partitioning of the content creation process. This book is not a prescription of a single new vision of content partitioning for all organizations. The attempt to create a single system to meet all needs has been a large factor in the poor partitioning of many content systems. Each organization has different needs and different audiences. They face different source and degrees of complexity and they need to partition their content system accordingly. Rather than prescribe any one partitioning, therefore, this book seeks to describe how various approaches to structured writing enable different ways of partitioning the content system, and to suggest how you might go about figuring out which approach to partitioning will work best for your organization. 

        