chapter:(#chapter.partitioning) Partitioning the Complexity of the Content System

    <<<(annotations.sam)

    index:: type, term
        concept, partitioning

    Partitioning a process requires creating an interface between the partitions. The job of the interface is to transfer information from one partition to another. Structured writing is a means of creating an interface between partitions in a content process. Because there can be multiple partitions in a content process, and because the author's task, in particular, can be partitioned in different ways, there are many forms of structured writing, and quite often more than one form is present in any given content system. 

    Most computerized authoring tools -- word processors and desktop publishing systems for instance -- represent a partitioning of the content process, and they have interfaces that reflect that partitioning. For instance, in some applications you format a piece of text by applying a style to it. The style is selected from a predefined list of styles. This interface partitions the definition of styles from the creation of text. The application of the style to the text is the interface between the partitions of the writer and the style designer. 

    A good interface provides feedback to the user to let them know if they have given the next partition the information it needs to do its job. In a desktop publishing application, when you apply a style to a piece of text, the interface responds by showing you that style applied to the text. 

    This is not perfect feedback. It does not guarantee, for instance, that you have applied the correct style. You may or may not notice from the formatted text that is shown on screen is not actually the correct style for that document element.  

    This problem is not the fault of the interface. This class of authoring tools partitions the text from the formatting of content, not from the overall design of the document. Document design remains in the author's hands. The style sheet restricts the design pallet available to the author, but does not tell the how to use the items on that pallet to achieve an overall effective document design. And since writers are not document designers by trade, they may not always do this well, and multiple authors working on a common projects will almost certainly do it differently. 

    It we want to ensure document design consistency, and relieve authors of the responsibility for document design, we need to partition the content system in a different way, one that partitions document design to the document designer and away from the writer. This requires a different interface. A typical word processor or desktop publishing applications only knows about two basic document structures: paragraphs and tables. Document designers care about far more document structures, things like ordered lists, sections, definition lists, chapters, titles, bibliographies, and index entries. An interface that does not specify such structures cannot partition document design from writing. Structured writing allows us to define such an interface. 

    Or rather, the set of tools and techniques that we commonly refer to as "structured writing" allow us to define such an interface. But the word processors and desktop publishing systems that we have used for a long time are also structured writing tools according to my earlier definition of structured writing as a means to create an interface between partitions of the content process. So lets make a distinction. The set of tools that allow us to create alternative interfaces, and thus alternative partitioning of the content system, are markup languages. Markup languages are tools for creating content interfaces that can't be adequately expressed by the WYSIWYG (What You See Is What Your Get) interface of a word processor or desktop publishing system because that type of interface does not transfer the required information or feedback between the partitions we want to establish. (Some markup tools do hide markup behind something that looks like a WYSIWYG interface, but that is never the whole of the interface, nor is it ever truly a WYSIWYG representation of the the output.)

    Desktop publishing and word processing tools are definitely part of the structured writing spectrum (I will talk about exactly where they fit on that spectrum in the next few chapters) but partitioning complexity at different points in the process requires transferring different types of information between processes, which means you need different interfaces, and markup languages are one of the most common tools we use to build those interfaces. Different interfaces require different feedback mechanisms, and with markup languages the feedback is typically provided by a markup validator rather than by a WYSWYG representation of output. This means we need different tools to implement those interfaces, tools that change how writers and other actors in the content system do their work.

    section: Quality and value

        The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in content. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in content itself. Where structured writing tools have replaced desktop publishing or word processing tools it has largely been in pursuit of process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both.

        There are only four reasons for an organization to create content:

        * To meet regulatory requirements
        * To ensure the correct performance of internal processes
        * To generate leads and support the sales process
        * To improve customer retention through post-sales support

        Each of these goes straight to the bottom line of revenue and profitability, and each depends directly on the quality of content. To create a content process with any goal in mind other than to maximize content quality is foolish, shortsighted, and almost certainly guaranteed to have negative effects on revenue and profitability (even if it reduces costs in a particular division).

        The first priority in any partitioning of a the content system, therefore, is to maximize content quality. Poor content quality is the result of unhandled complexity in the content system, therefore the goal of content system design must be to ensure that every piece of the complexity of the content system is directed to a person or process that has the skills, the time, and the resources to handle it. This means that no part of the complexity of the system can be dropped in the interface between partitions, or within the operation of any partition. Nor can the interface of any partition be made so complex that the interface itself introduces complexity that cannot be handled adequately by the person working in that partition. 

        One of the biggest changes in the partitioning of the content system was ushered in by the desktop publishing revolution of the 1980s. Prior to the introduction of desktop publishing, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, the preparation of proofs by a printer, correction of proofs, and the final printing. This was a complex and time consuming process that cost a lot of money and had many points where failure could occur or error be introduced. The various function were well partitioned from each other, but the overhead of passing information from one to another was cumbersome and time consuming. 

        Desktop publishing eliminated much of that overhead by putting all the tools of document creation -- writing, design, layout, proofing -- in the hands of a single operator. The problem with this model are twofold. First, it put too much of the complexity on one person: the writer. The writer's attention is divided between multiple tasks, and since attention is a finite resource, this meant the quality of writing, design, layout, and proofing all suffered. The fact that desktop publishing skill became a major hiring criteria for writers (and remains so today) shows how the focus was taken off writing and knowledge of subject matter and placed on the ability to manage the complexity of the publishing process.   

        Secondly, while it removed a lot of complexity of vertical communication between writer, designer, and typesetter, desktop publishing left every writer on an island, making no provision for any kind of horizontal coordination between writers. Everyone worked on their own book as a separate project. The division of the writer's attention and the lack of horizontal coordination meant the huge amounts of complexity were going unhandled in large content systems. Duplication, omissions, and inconsistencies were very difficult to detect and fix, while providing effective navigation between books was virtually impossible. All this unhandled complexity was dumped on the reader in the form of poor quality content. Desktop publishing did not create this problem, but it did nothing to fix it.   

        Content management system have tried very hard to partition and redirect the complexity of that horizontal coordination, but with results are are, at best, incomplete. Meanwhile, the advent of the Web had brought a new set of challenges. A modern website is not a library of independent volumes but a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how readers seek and use content. Many organizations are trying to deliver content to both the paper model and the Web model simultaneously. Content creation and delivery has got a lot more complex and reader's expectations far more demanding. The desktop publishing model is fundamentally unsuited to handling this complexity. We need a new partitioning of the content system, one that handles both the horizontal and vertical integration issues better, which providing better support the rhetorical aspects of content quality that no previous technology has seriously addressed. 

    section: The central role of writing

        There are many reasons to change the partitioning of a content system. Different partitioning can allow us to automate various aspects of the process, which can improve efficiency and consistency, and can even allow us to produce outputs that could not be produced at all without automation. But in pursuit of these goals, we can sometimes lose site of where the fundamental value of all content comes from: the writing. 

        Writing well is an activity that requires the whole of the writer's attention. Any part of the complexity of the content creation process that divides the writer's attention makes it more difficult for them to write quality content. Every partitioning requires the creation of an interface that passes information from one partition to another. Sometimes the interface to a new partition that enables some new form of automation can turn out to be more complicated than the interface to the old partition. 

        This ends up making the writer's life more complex rather than less. If the writer ends up with more complexity than they can comfortable handle, the result is dropped complexity, which means diminished content quality. Sometimes that unhandled complexity also derails the attempts to make the process more efficient because the information coming through the complex interface is not reliable enough for the new process to work correctly.

        The sad truth is that many content systems have never  seriously attempted to minimize the amount of complexity they dump on the writer. Writing and publishing have largely been treated as separate concerns, as if the publishing process and its demands had no influence, for good or bad, on the quality of content that the system  produced. The result has been widespread dissatisfaction with content tools and systems, and with their results. Lack of attention to where complexity falls in a system also typically results in breakdown and failure of the system over time, particularly as new features are added to address specific needs without adequate thought given to the impact of complexity they introduce, a process content strategist Joe Golner calls the "barnacalization of systems". 

    section: The role of algorithms

        There are two fundamental and often complementary reason to partition the content process. One is to offload excessive complexity from a particular person or group, and the other is to direct an operation (and its complexity) to an algorithm. In many cases these are complementary aims because we partition the complexity away from a person and direct it to an algorithm. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted a certain way, chances are many similar pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.  
        
        Writing an algorithm to do a repetitive task redistributes complexity from the person who used to do the task to the algorithm, but also to the person who writes and maintains the algorithm. For example, using a CSS stylesheet to format lists redistributes the task of designing list formatting from the writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.  
        
        Using CSS partitions the complexity of formatting a page so that we can distribute the complexity of formatting away from the writer.  Now the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This simplifies the writer's life, allowing them to focus on writing. It also simplifies the designers life, allowing them to concentrate on design. The result is better writing and better, more consistent, design.  

    section: The role of tools

        However, while this transfer of responsibility improves quality by allowing both designer and writer to focus on what they do best, it also introduces a new kind of complexity into the system. CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS in to our process means introducing new complexity. All tools introduce new complexity into the processes they serve. People have to design the tools and build the tool and learn to use the tool, and maintain the tool. 

        All this is new complexity that did not exist before. We accept this new complexity into our processes because a good tool allows us to distribute our existing complexity more efficiently, so that less of the complexity falls on the people and more on the tools, and so that each person in the system only has to deal with the complexity that they are able to cope with. Managing where the complexity falls is ultimately much more effective than merely minimizing total complexity. 
        
        Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or a text message is staggering, but its directs the complexity of communicating over distance away from the users towards systems and the people who maintain them for a huge net gain in productivity. 
        
        The content creation stack is similarly complex. Yet the content creation stack does not do such a good job of partitioning and distributing all of the complexity of content creation, often focusing far more of that complexity on the writer than they can reasonably be expected to handle, with the result that complexity is pervasively being dumped on the reader in the form of poor quality content. 

    section: Towards a more effective partitioning of the content system
        
        The impact of poor quality content goes straight to the bottom line of revenue and profitability. To address it, we need a new partitioning of the content creation process. This book is not a prescription of a single new vision of content partitioning for all organizations. The attempt to create a single system to meet all needs has been a large factor in the poor partitioning of many content systems. Each organization has different needs and different audiences. They face different source and degrees of complexity and they need to partition their content system accordingly. Rather than prescribe any one partitioning, therefore, this book seeks to describe how various approaches to structured writing enable different ways of partitioning the content system, and to suggest how you might go about figuring out which approach to partitioning will work best for your organization. 

        