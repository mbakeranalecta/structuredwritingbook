!smart-quotes: on
chapter:(#chapter.translation) Translation

    <<<(annotations.sam)
    
    subjects:: type, term
        algorithm, translation
        
    Translation is a major source of complexity for organizations that deliver content in multiple languages. Complexity comes not only from the translation process but also from integrating the  translated content back into your {publishing} process.

    Translation is a huge subject in its own right, and I have neither the space nor the expertise to do it full justice. Therefore, I will make just a couple of points about how structured writing can help partition and transfer certain aspects of the complexity of translation. 
     
    section: Avoiding trivial differences
    
        Trivial differences in how the same thought is worded make little difference to a reader, but they can run up translation costs. Structuring content to avoid these trivial differences can reduce translation costs. 
        
        There are two principle ways you can do this with structured writing:

        * {Reuse} the same piece of content every time the same thought is expressed. However, as we have seen, this approach comes with complexities of its own. The smaller you make the pieces of content, the more reuse you can get, but the more pieces you have to manage, the more pieces writers have to look through to find reusable content. And it is hard to constrain and maintain rhetorical quality when writers write in tiny fragments. 
        
        * Factor out the content that repeats the thought. We have seen several examples in this book. When we moved the recipe example into the {subject domain}, we factored out the titles of the recipe sections, eliminating any trivial differences in the titles that writers might introduce. In [#chapter.reuse] we factored out a repeated safety warning by adding an `is-it-dangerous` field to the `procedure` structure. This removed the need for writers to think about reusing the warning, and it also factored out any issues regarding the file name for the different language versions. (Something similar could be achieved using the {keys} approach described in the same chapter.)
    
    section: Isolating content that has changed
    
        When you revise text, such as when you bring out a new version of a product, some of the text changes, but much of it remains the same. You can save time and money on translation if you only translate the content that has changed. However, to do this you need a way to isolate the content that has changed from that which has not, and you need a way to integrate the changed material back into your content after it has been translated.  Structured writing allows you to clearly define structures in your content set and deliver just those structures that have changed.
        
    section: Continuous translation
    
        If you write a book and then send it for translation, the translated version will be ready to release long after your first language version is ready. This delay can result in missed opportunities. To bring out first language and translated versions simultaneously, or close to it, you need translation to occur simultaneously with the development of the first language content. 
        
        {Continuous translation} is not just about getting all versions of a book released at the same time. On the web, you may be releasing new pieces of content every day. If you maintain translated versions of that content, you want them to go out at the same time. You may also want to provide links between the different language versions of the same content because searches and links do not always send readers to content in their preferred language. A structured approach to {publishing} and {information architecture} can accommodate these requirements.
    
        
