!smart-quotes: on
chapter:(#chapter.generate) Generated Content

    <<<(annotations.sam)

    index:: type, term
        task, generating content

    I have mentioned that one of the advantages of the {subject domain}+(index "subject domain;generating content in the") is that it allows you to generate different types of rhetoric from a base of subject-domain data. Here, I look at the {content}+(index "content;generating") generation algorithm in greater depth. 

    There is nothing new about generating content. Word processors and desktop publishing programs can generate indexes and tables of contents, for instance, and the {content reuse}+(index "content reuse;generating content for") algorithms in [#chapter.reuse] generate content by combining smaller pieces of content or data to form larger units of content. 

    The fundamentals of content generation are pretty simple. You take separate pieces of content and data and combine them to form new content. Thus, when I spoke earlier about storing the ingredients of a recipe as a data structure and using an algorithm to present them as either a table or a list, that was an example of content generation.
    
    [*fig.generate-pseudocode] shows an algorithm to turn that data into a list (again, in pseudocode).

    figure:(*fig.generate-pseudocode) Algorithm to turn a recipe data structure into a list
        ```(pseudo)
    
            match ingredients
                create ul
                    continue
                
            match ingredients/record
                create li
                    output name
                    output [tab]
                    output quantity
                    if unit is not 'each'
                        output [space]
                        output unit
                    
    [*fig.generate-w-prep] shows an algorithm for interpolating the serving and preptime fields into the introduction of a recipe.

    figure:(*fig.generate-w-prep) Algorithm to interpolate serving and preptime into a recipe
        ```(pseudo)
            match description
                continue
                output 'Preparation time is '
                output /recipe/preptime
                output '. Serves '
                output /recipe/serves
                output '.'
            
            match preptime
                ignore
            
            match serves
                ignore
            
    But this kind of content generation does not have to confine itself to working within a single document. It can pull content from several files or assemble different collections of content to serve a common rhetorical purpose, such as compiling a low-calorie cook book based on nutrition information in a collection of recipes. And it can generate many of the elements required to build a top-down or bottom-up information architecture. 
            
    
    section: Categorization
    
        One of the key elements of top-down information architecture is {categorization}. An {information architect}+(index "information architect;categorization tasks") develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.  
        
        Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called {faceted navigation}+(italic). The easiest place to see faceted navigation in action is on a used-car site, where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions. 
        
        Categorization of content requires metadata to identify which category it belongs to. (Even if you just sort papers into piles, as soon as you put a label on each pile, you are adding metadata, and if you don't add a label, you will soon forget which pile is which.) Categorization may involve the addition of new metadata or it may rely on metadata that is already attached to the content. This effectively means that your categories are expressed as query statements, and those queries do not have to operate on a single piece of metadata. A query can create a category out of the conjunction of several pieces of metadata. For example, you could create a category of heart-healthy recipes by writing a query that looks at the salt, fat, and calorie metadata of a collection of recipes.  
        
        For content in the {subject domain}+(index "subject domain;metadata"), the {metadata} required to assign a piece of content to a category may be inherent in its subject-domain markup. It is the nature of the subject domain to describe the subject matter. Therefore, any markup that describes the subject matter may already contain the fields you need for categorization. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don't need to create additional structures to support a new algorithm.
        
        Relying on the {subject-domain}+(index "subject domain;metadata") {metadata} already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a repository so much easier for writers. But, in some cases, it can also avoid the need for a costly {content management system}+(index "content management system;avoiding the need for a"), since it allows the {publishing algorithm}+(index "publishing algorithm;categorization and the") to categorize content at build time without needing a separate metadata store or a separate system to manage categorization. I look more at the role of the content management system in [#chapter.content-management].
            
    section: Tables of Contents (TOCs)
        index:: type, term
            concept, table of contents
    
        If you are creating a top-down information architecture, your structured writing system needs to generate {tables of contents}+(index "table of contents;generating a") just as a word processor or desktop publishing application does. 

        Tables of contents can serve different purposes, depending on the nature of the content and the form of the output. Some describe a linear reading order, some provide a {classification} scheme for random access to the content, and some simply provide a list of chapters that does not necessarily imply an intended reading order. 
        
        A table of contents may seem like a {document-domain}+(index "document domain;table of contents in the") structure, but it is really more of a {media-domain}+(index "media domain;table of contents in the") structure, for two reasons. First, it contains specific links to specific resources at specific addresses, or specific page numbers in a paper or a virtual paper format such as {PDF}+(index "PDF;table of contents in"). Second, it is virtually always factored out in document-domain markup languages. Tables of contents are not written, they are generated. 
        
        From a structured writing point of view, what matters is how they are generated. In {DocBook}+(index "DocBook;generating a table of contents in"), for instance, it is typical to write each chapter of a book in a separate `chapter` file and then pull them together into a book using a `book` file. The order of the table of contents is then determined by the order in which the chapters are listed in the `book` file. The table of contents is generated by extracting chapter and section headings from the `chapter` files in the order they appear in the `book` file. 
        
        In {DITA}+(index "DITA;generating a table of contents in"), the normal process is to assemble a book using a `map` file. A map file may assemble a book out of DITA topics or other maps, and this may include assembling the chapters from topics as well. In the end, though, the {table of contents} is generated in the same way, by traversing the document assembled by the `map`.
        
        In both cases, the order of the TOC is specified by hand by the person who creates the `book` or `map` file. But there are other ways to determine the order of content in a TOC. For instance, a reference work such as an API reference may be organized by listing each library in order by name and each function in alphabetical order by name within its library, creating a table of content with two levels. You don't need to write a map or book file to create this table of contents. There is an algorithm for creating this table of contents. In fact, it is the algorithm stated earlier in this paragraph: "listing each library in order by name and each function in alphabetical order by name within its library." [*fig.generate-create-toc] shows this algorithm in pseudo code.

        figure:(*fig.generate-create-toc) Generate a TOC for an API reference
            ```(pseudo)
                create toc
                    for each library sorted alphabetically
                        create toc-entry library name
                        for each function in library sorted alphabetically
                            create toc-entry function name
    
        {Tables of contents} serve different purposes. Some describe a curriculum, a designed reading order. Others are simply a means of navigation, a way to select one topic out of a collection of many. If your content is written in the {subject domain}, the chances are that it already contains the structures on which such classifications could be based, and again, the TOC can be generated based on the {metadata} already in the content. 
        
        One advantage of this approach is that if an algorithm assembles the TOC based on {metadata}+(index "metadata;building a table of contents using"), new content is automatically included in the TOC the next time you generate output. This simplifies the task of adding new content by avoiding the need to update multiple files or systems. This makes life easier for writers because they do not need to know how the TOC is constructed. They only have to create individual pieces of conforming content and submit them to the right location. This also avoids duplication, since the metadata the TOC generation algorithm uses is stored only in one place.  
        
    section: Lists
        index:: type, term
            concept, lists

        A major feature of a {bottom-up information architecture} is the {list}+(index "lists;bottom-up information architecture and"). Like TOCs, lists are a catalog of resources. But while a TOC is a list of resources defined by their container (contents = things in a container), a list may have any principle of organization or inclusion. 
        
        For instance, in a collection of movie reviews, you might want to include a filmography for each actor. Such a list is not only a useful piece of information, it is also an important aid for navigating a site. Maintaining such a list by hand would be laborious and error prone, especially with new movies being added to the collection all the time. 
        
        If you have your movie reviews in a structured format that lists the actors in the movie in a format accessible to algorithms, like this:  
        
        ```(sam)
            movie: Rio Bravo
                starring:: actor
                    John Wayne
                    Dean Martin    
                    Ricky Nelson    
                    Angie Dickinson
                    Walter Brennan
                    
        you can generate the filmographies for all your actors, like this:
        
        ```(pseudo)
            create-filmographies
                for each unique actor in movie/starring/actor 
                    create filmography named actor with link to actor
                    for each movie where starring/actor = actor
                        create entry named movie with link to movie
                        
        Tables of contents are a {top-down information architecture} device. You expect to find them at the top of the information set. Lists are a {bottom-up information architecture} device. You expect to find them as independent pages or as elements within a page. Thus, if your collection includes the biographies of actors, and you want each biography to include the filmography, you can omit the filmography from the {subject domain} version of the biography and have the {publishing algorithm} generate it with the output, as shown in [*fig.generate-filmography].

        figure:(*fig.generate-filmography) Algorithm to generate a filmography
            ```(pseudo)
                match actor-bio
                    create html
                        create h1 "Biography: " + actor-name
                        continue
                        create h2 "Filmography"
                        for each movie-review where starring/actor = actor-name
                            create li 
                                create a with attribute href 
                                 = address of movie-review
                                    output movie-name
            
        Note the close relationship between rhetoric and navigation in [*fig.generate-filmography]. The generated filmography is both content and {navigation}, both part of the individual topic and part of the overall navigation scheme -- an example of how {information architecture}+(index "information architecture;rhetoric and navigation in") unites rhetoric and navigation.  
 

    section: Collections and selections
        index:: type, term
            concept, collections
            concept, subject domain;collections in the

        One of the applications of subject-domain markup that I mentioned in the recipe example is that it can be used to select content for a collection. Thus, if you capture calories and preparation time in your recipe markup, you can use that information to assemble a cookbook with a title like "Diet-Friendly Dishes You Can Make in 30 Minutes or Less." If you store seasonal information, you can create "Diet-Friendly Christmas Treats" or "Summer Suppers in 20 Minutes."

        One of the most important aspects of creating collections based on subject-domain markup is that you did not have to think of those collections while the recipes were being written. Nothing ties the recipes to these publications. The recipes simply record certain significant facts about the dishes that may matter to readers. A {content strategist} can then dream up all kinds of collections, and, because the recipes record significant truths about the dishes in a form that is accessible to algorithms, chances are that you will be able to assemble those collections quickly and get them to press while the market demand is hot. 

        The subject domain is the gift that keeps on giving. You don't have to anticipate all of the possible uses for your subject-domain data, and collecting that data is relatively inexpensive since you are simply asking writers to enter information they already know in fields with concrete, specific names that are easy to understand. 
    
    section: Content queries
        index:: type, term
            concept, queries

        If you know what subjects the phrases in your content refer to, you can use that information to form queries to pull in additional information from other sources. For instance, let's say that you are writing about novels, and you annotate the titles of novels that are mentioned in your text:

        ```(xml)
            {War and Peace}(book "ISBN:1400079985") is a very long book.

        Here, the title is marked up as a book title, and, to make things more precise, an {ISBN}+(index "ISBN lookup") number is provided. An ISBN number is the key to a large amount of data about a published book. If you have the ISBN number, you can look up all sorts of other information. For instance, you can use the ISBN to look up publication details using a web service like ISBNdb ({http://isbndb.com}(url)). 

        Most web services return information in XML. A hypothetical ISBN web service might return an XML document that looked like [*fig.generate-isbn].[*fn.generate-isbn]

        footnote:(*fn.generate-isbn)
            This is not what ISBNdb returns, just a simplified example.

        figure:(*fig.generate-isbn) Information returned by an ISBN web service
            ```(xml)
                <book>
                    <isbn>1400079985</isbn>
                    <title>War and Peace</title>
                    <author>Leo Tolstoy</author>
                    <publisher>Vintage</publisher>
                    <publication-year>2008</publication-year>
                    <page-count>1296</page-count>
                    …
                </book>

        You could then pull pieces from that XML document and add them to your own content, thus allowing you to produce output like this:

        """
            _War and Peace_ (Leo Tolstoy, Vintage, 2008, 1296 pages) is a very long book.

        pagination-tweak:
            min-space: 3in

        The algorithm to do this looks something like [*fig.generate-isbn-pseudocode].

        figure:(*fig.generate-isbn-pseudocode) Algorithm to look up book information using the ISBN
            ```(pseudo)
                match p/book
                    $isbn = @specifically 

                    $book-info = get 'http://example.com/isbn/lookup?' + $isbn

                    create i
                        continue

                    output " ("
                    output $book-info/book/author
                    output ", "
                    output $book-info/book/publisher"/>
                    output ", " 
                    output $book-info/book/publication-year"/>
                    output ", "
                    output $book-info/book/page-count"/>
                    output " pages"
                    output )

        This basic technique opens all kinds of doors. The power of structured writing as a tool to merge information from different sources is enormous. Here are just a few of the tricks you could pull using information retrieved using the ISBN number:

        * Pull in a picture of the book cover.

        * Create a link to an article about _War and Peace_ on your website.

        * Create a link to an online bookstore where readers can buy the book. If you belong to an affiliate program for the online bookstore, you can earn a commission each time a reader follows your link and buys the book.

        You can also realize major process efficiencies by capturing this kind of metadata in your content. If you can use metadata keys to pull information from external sources, writers don’t have to look up that information when they write. And writers don’t have to decide which book details will appear in the final output. That decision is made separately by editing the algorithm, and you can change that decision for all your existing content simply by changing the algorithm.

        Having writers enter the ISBN number in the content makes writing the algorithm straightforward, and sometimes it is appropriate because you are referring to a particular edition of a book and the ISBN number is the most reliable identifier of a specific edition. But in many case it is actually too specific, and it complicates life if writers have to look up the ISBN when all they want to refer to is the novel itself, regardless of the edition. This distinction can be important. There are many other editions of _War and Peace_, in many languages. _War and Peace_ is a very long book in all those editions and all those languages. The paragraph does not refer specifically to the Vintage Edition of 2008. It refers to _War and Peace_ as a novel generally.         

        ```(sam)
            {War and Peace}(novel) is a very long book.

        Here, I have replaced the `book` annotation with the more specific `novel` annotation. If you are concerned that there might be other novels named _War and Peace_ by other writers, you could make the annotation more specific:

        ```(sam)
            {War and Peace}(novel (Leo Tolstoy)) is a very long book.

        In SAM, a phrase in parentheses inside an annotation is a {namespace} identifier. A namespace is a context in which a set of names is guaranteed to be unique. No author publishes more than one novel with the same name, so the name of the author is generally an adequate namespace identifier for the name of a novel. This markup is obviously easier for writers to create than an ISBN. It asks them only for the things they already know, so they won’t have to stop to look anything up. That is an important part of {functional lucidity}.

        However, without an ISBN number, can you still get the book data you want? You can, but you have to use a different query to extract it:

        ```(pseudo)
            match p/novel

                $title = #content
                $author = @namespace 

                $book-info = get 'http://example.com/isbn/lookup?category=novel&title='
                                 + $title + '&author=' + $author

        The only thing different about the results you will get from this query is that it may return records for more than one book (actually, for _War and Peace_, you will certainly get multiple records, since there are many editions in print). So the code that adds the book info to the content must pick one of the alternatives based on some relevant piece of publication data, such as the most recent publication date.
        
        I could have chosen an example that did not have this kind of ambiguity (title vs. ISBN as identifier of a novel), but you will often come across issues like this in the real world. This is one of those issues that forces you to make a decision about how to correctly partition complexity in your system. You have a choice between an approach that uses a simple, easy-to-write algorithm but requires effort and research from writers versus an approach that requires more thought and effort to write the algorithm but provides greater {functional lucidity} for writers.

        Stated like this it seems obvious which choice you should make, but in practice these decisions are often made by the people developing the algorithms, and they often choose to make their lives easier at the expense of the writers. This may seem like a detail, but when correct partitioning and distribution is at stake, decisions should not be left to one partition to make. These decisions require input from all sides and the attention of the project owners.  

    section: Personalized content
        index:: type, term
            concept, content;personalized
            concept, personalized content
    
        A key feature of modern web architecture is personalized content, which means content that is generated in response to either what the site already knows about you -- from your account information or a transaction token such as a cookie -- or the selections or entries that you make on the page.

        For example, when you log into Amazon, the first page you see is crafted for you based on everything Amazon knows about your browsing and purchasing history. As you make selections, such as adding an item to your shopping cart or wish list, that information is used to generate the next page you see. 
        
        If you browse a used car site like Autotrader.com, you can select features that you are interested in (red convertibles with manual transmission under $20,000, for instance), and the next page will be generated based on that input.
        
        The ability of a site to personalize pages depends on whether it can identify content that is {relevant}(algorithm "relevance") -- based on everything it knows about the reader -- and assemble that content to form a page. For this to work, the content must be easy to identify unambiguously and must fit together easily.  
        
        As we have seen, these properties are maximized when you store content in the {subject domain}+(index "subject domain;personalization in the"), both because the subject domain makes the relevant {metadata}+(index "metadata;personalization") available and because working in the subject domain helps writers produce more consistent content that works better with personalization algorithms. 
        
        The consistency of your content is most important in personalized content applications. Because output is assembled in real time by an algorithm based on a combination of unique things you know about the reader and your content, there is no opportunity for a writer or editor to inspect the output of a personalized content publication before the reader sees it. This requires total confidence that:

        * the content conforms to its {constraints}+(index "constraints;personalization") 
        * the {markup}+(index "markup;personalization") expresses those constraints completely and correctly
        * the algorithm correctly processes and delivers the content 

        All three of these requirements depend on the soundness and simplicity of the {markup} design. They require precise content structures with few alternatives, clear guidance for writers, and good audit capability. Without these properties, your content and its markup will be inconsistent, and it will be hard to write and test reliable algorithms because of the wide variety of markup combinations they may encounter. 

        Most personalized content applications model their content in relational database tables for these very reasons. However, with the correct markup design, almost certainly in the {subject domain}+(index "subject domain;personalization in the"), there is no reason why you cannot use markup-based tools alone or in concert with database tools and solutions to achieve the same kind of result. 

    section: Audit reports
        index:: type, term
            algorithm, auditing

        Finally, you can use content generation algorithms to generate things other than content to be published. You can use it to generate reports about your content itself, which you can use to audit and manage your collection. I look at this in more detail in [#chapter.audit], but it is worth looking at the basics here because it is just another application of the capacity for content generation that you gain when you move content into the subject domain. 

        For instance, suppose your content strategist establishes an editorial calendar that says that you are going to put out a Christmas-themed diet cookbook every October as people are starting to prepare for Christmas. Do you have enough Christmas seasonal recipes under 300 calories? An algorithm can quickly go through your subject-domain recipes and create a list of all the recipes that meet that criteria. 

        Or suppose that you want to make sure that your book-related site has reviews and shopping links for every book that has been mentioned on the site this year. An algorithm can go through your content collection looking for the `book` or `novel` annotations in your articles, compile a list, sort it, eliminate duplicates, compare it to the list of reviews you currently have, and create a list of every book that is mentioned but not reviewed. 

    section: Reuse vs Generation
        index:: type, term
            concept, content reuse;generation versus
            concept, generation;content reuse versus

        As you have probably noticed, the methods used to generate content have a lot in common with those used to reuse content. That is because content reuse is just a form of content generation. Content reuse means generating more than one form or output content from the same collection of output content. Technically, the mechanisms and algorithms are the same; the differences have more to do with how you think about the problem.

        The biggest difference is that when you think in content generation terms, you are automatically thinking in {subject-domain}+(index "subject domain;content generation in the") terms. Content generation starts by treating content as data and then generates content from that data. When people think in content reuse terms, however, their thoughts often go straight to the {management domain}+(index "management domain;content reuse in the"), to conditional content and pulling in content by reference. Thinking in content reuse terms also tends to give first use primacy over secondary uses. The first instance is created to serve a specific purpose. You then  serendipitously discover another potential use for the content. Thinking in content generation terms does not give primacy to any one use. The content is created as data with many potential uses. There is no first use or secondary uses. Every use is a production from the source data, and it really does not matter how many such uses there are. 

        As I noted in [#chapter.reuse], there are certain kinds of reuse that are only feasible using {management-domain}+(index "management domain;content reuse in the") constructs, but a great deal can be accomplished using the subject-domain approach. Creating conditional markup in your recipe to provide a different beverage match for _Wine Weenie_ and _The Teetotaler's Trumpet_ is a case of reuse thinking. Creating structure for alcoholic and non-alcoholic beverage matches to achieve the same goal (and potentially many more) is a case of content generation thinking. In many cases, you will create a far more valuable content resource that is is easier to write for and is easier to maintain by thinking of your content set as a data source from which many kinds of content can be generated rather than a collection of reusable content components.   
