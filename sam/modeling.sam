!smart-quotes: on
chapter:(#chapter.modeling) Modeling

    <<<(annotations.sam)

    index: type, term
        algorithm, modeling
        structure, procedure

    As noted in [#chapter.extract], it is possible to {extract} content from existing data sources, which can then be used as input for generating content (as described in [#chapter.generate]). Some of these sources were not intended to be used as content, but in many cases you can turn them into content by using algorithms to wrap the data into sentences or field values in a document. Such sources essentially present a model of some object in the real world, and when you use them as a source of content, you create content from that model. 

    Even when an external data source does not exist, you can apply the same techniques to creating content by creating your own model of a real-world object using structured writing techniques. You can then {extract} content from that model just as you would from an external data source. This can be an extremely powerful technique for managing complexity in cases where content frequently traverses the same ground or in cases where content must express complex relationships that are easier to model and control in a formalized system. 

    An entire book could be written about how to model various types of subjects and how to derive content from those models. Here, I  present one simplified model to demonstrate the principle at work and point to some of its key benefits. 
    
    Many technical documents contain numerous procedures for navigating the interface of an application. Writers can spend a lot of time writing and maintaining these procedures. However, these procedures are often dictated entirely by the interface and could be generated by an algorithm if the right data was available. The modeling algorithm is about creating that data set so you can generate the content from it.

    The navigational structure of a typical desktop application is essentially a tree consisting of a well-defined set of objects: menus, menu items, dialog boxes, field values, buttons, and assorted other controls. The entire navigation system of an application can thus be modeled as a tree, and, indeed, there are languages designed for modeling interfaces in just this way for programming purposes.[https://en.wikipedia.org/wiki/User_interface_modeling] However, rather than using one of those languages, I will use a simpler model that is just complex enough to demonstrate the technique. [*fig.modeling-structure] shows a model for an interface that creates a new document.

    figure:(*fig.modeling-structure) Simple structure to model a user interface
        ```(sam)
           application: MyApp
               menu-set:
                    menu: File
                        menu-item: New
                            dialog-box: New document
                                fields:: name, purpose
                                    Name, the name of the new document
                                    Type, the type of the new document
                                confirm: Create
                                cancel: Cancel
                                screen-shot:
                                    windows: graphics/windows/new.png
                                    mac: graphics/mac/new.png
                                    linux: graphics/linux/new.png

    Most of what is contained in a procedure for using a GUI follows a formula. With a model of the UI like [*fig.modeling-structure], you can write an algorithm to follow that formula for all procedures.

    [*fig.modeling-procedure] shows how you might write a procedure for using this menu using conventional techniques.

    figure:(*fig.modeling-procedure) Steps for writing a procedure for a GUI operation
        ```(sam)
            procedure: Create a new document
                step: 
                    From the {File}(menu) menu, select {New}(menu-item). 
                    The {New document}(dialog) appears.

                    >>>(%image.new_dialog)
                step: 
                    Enter the name of the new document into the {Name}(field) field.
                step: 
                    Enter the type of the new document into the {Name}(field) field.
                step: 
                    Press {Create}(button) or {Cancel}(button) to cancel.

    Using the model in [*fig.modeling-structure], however, you can reduce all of this to:

    ```(sam)
        procedure: Create a new document
            use-dialog: New document 

    Every piece of text used in [*fig.modeling-procedure] can be derived from the model by an algorithm. The `use-dialog` field in the reduced example triggers an algorithm that uses the "New document" `dialog-box` in [*fig.modeling-structure] as its source and generates the full text of the procedure, including the correct screen shot.

    Clearly, you won't always want to generate the full procedure with a single line. There will be cases where you need to say something specific about a particular case. For example, if this procedure is part of a tutorial, you might want to specify a particular file name. In that case, you could use the model to generate only part of the procedure (see [*fig.modeling-test-doc]).

    figure:(*fig.modeling-test-doc) Partially customized procedure
        ```(sam)
            procedure: Create a document for testing
                navigate-to: New document
                step: 
                    Enter "test.abc" into the {Name}(field) field.
                step: 
                    Enter "normal" into the {Name}(field) field.
                confirm: New document

    In [*fig.modeling-test-doc], the fields `navigate-to` and `confirm` tell an algorithm to generate parts of the procedure from the model (the navigation to the dialog box and the button presses to confirm the action) while allowing the writer to insert custom instructions in the middle.  

    Procedures contain huge amounts of repeated text, none of which can be effectively factored out by standard variable substitution techniques. But by creating a model of the interface, you can factor out most of the text for most procedures, leaving it to an algorithm to perform the tedious task of typing out all those instructions over and over again. 

    There are a number of potential benefits to factoring out content into a model:

    * You reduce the amount of content that needs to be written, and you remove the necessity for writers to trace carefully through every procedure to make sure every detail is correct. The details come from the model, so all you have to do is ensure that the details are correct in the model. And if you find a flaw in the model, fixing it in the model automatically fixes it in all the content derived from it. 

    * When changes occur in the subject matter, you only have to change the model, not any of the documents that contain text derived from the model.

    * The model can be maintained by one person who is an expert on the structure of the subject matter, thus removing the need for multiple writers to become experts. 

    * If there is a change to the subject matter that could affect the way the model is called from the content, this will be immediately obvious because the names used to identify parts of the model will no longer match, triggering a {referential integrity} error. This means it is almost impossible for a change in content to be missed when the subject matter changes. 

    * It allows you to change the way that the subject matter is described independent of the existing content. If you want to shorten the navigation instruction in the procedure example to `File>New`, you only need to change the algorithm, not hundreds of places in the content. 

    * Because you can change the way a subject is expressed by simply changing the algorithm, you can test different forms of expression to see which work best.
    
    * The ability to easily change the output also allows you to personalize content for different groups. You can even allow individuals to choose how they want content to be expressed.

    * Using {active content} techniques, you can change how content is expressed based on the information you have about your users or allow them to select from verbose or terse forms of expression. 

    * The fully-written-out example of the procedure in [*fig.modeling-procedure] uses {keys} to factor out the difference between screen shots for different platforms, a technique described in [#chapter.reuse]. But while keys are a powerful tool, they are also an abstract concept and writers have to learn to use them correctly. Using the modeling algorithm, the choice of screenshots is moved from the content to the model. This factors out the complexity of using keys. It also allows you to make choices about how, where, and if screen shots are displayed. And you can test which works best or even allow users to select whether they prefer to see screen shots or not. 

    As with every other algorithm described in this book, it is important not to get carried away with enthusiasm of modeling in isolation. Although it is technically satisfying to build a model and derive a variety of content from it, the model and its algorithms are also sources of complexity.

    As I have noted, there is nothing wrong in principle with introducing new complexity into the content system. All tools do this. The point is to ensure that all of the complexity in the content system is handled by a person or process with the skills, time, and resources to handle it properly. Modeling partitions and redistributes a lot of complexity, which means it can create substantial change to the overall content system. It is important to make sure that the effect on your overall content system is positive. 
