!smart-quotes: on
chapter:(#chapter.rhetorical_structure) Rhetorical Structure

    <<<(annotations.sam)
    
    index:: type, term
        concept, rhetorical structure
        concept, mechanical structure

        
    As described in [#chapter.partitioning], correctly partitioning tasks is the key to an efficient process. But process and rhetoric are intimately related, so structures that support the partitioning of process must support (and preferably enhance) rhetoric as well. Fortunately, these aims are much more compatible than it might seem at first. An attention to {rhetoric}+(index "rhetoric;supporting process with") can actually serve process well, since sound rhetoric is the goal of process.
    
    {Rhetoric}+(index "rhetoric, defined") is the way that a piece of content makes its argument or assembles and organizes information to inform, persuade, entertain, or enable the reader to act. The work of the writer is rhetoric and the point of {partitioning}+(index "partitioning;rhetoric and") the content system is, in large part, to allow the writer to focus on rhetoric while still providing the information needed for the other partitions in the content system to operate without dropping complexity. 
    
    Achieving an effective rhetoric in the content presented to readers is the ultimate aim of any content system. Any failure to handle complexity is felt largely in the form of impaired rhetoric.[*fn.impaired-ergonomics] When you factor out formatting in the transition to the document domain, you allow a greater focus on rhetoric. When you factor out or enforce rhetorical constraints in the transition to the subject domain, you achieve a higher level of {conformance}, {validity}, and {repeatability} in rhetoric.

    footnote:(*fn.impaired-ergonomics)
        Impaired ergonomics -- for instance, formatting that is hard to read -- is a secondary source of difficulty for readers.

    The aim of the content system is always to produce better rhetoric, and therefore, structured writing should improve rhetoric, either by removing the complexities that keep writers from focusing on rhetoric or by explicitly supporting the consistent and repeatable development of superior rhetoric.

    The rhetorical structure of a piece of content is how it tells its story. For many types of stories, the optimal rhetorical structure is consistent and well known. In other cases, you can determine the best rhetorical structure by carefully considering what needs to be said and by testing with readers. In other words, there is a right way, a best way, to tell a wide range of stories. This best is not necessarily universal. Best for your subject matter and audience may be different from best for mine, just as the best recipe presentation for _Wine Weenie_ is different from the best presentation for _The Teetotaler's Trumpet_. However, for you and your readers there is a definable, testable, repeatable best. 
    
    Maintaining a consistent, high level of conformance to the optimal rhetorical structure for a particular subject can be complex, especially if you have a variety of contributors. Content quality is greatly enhanced when the rhetorical structure is well defined and followed consistently. Quality suffers if you don't properly manage the complexity of maintaining the optimal rhetorical structure for content. Also, a well-defined rhetorical structure provides an effective baseline against which to compare and measure proposed improvements. Using an explicit, predefined rhetorical structure helps enhance and maintain content quality.
    
    Rhetorical structure consists of information requirements and presentation requirements -- what needs to be said and how best to say it. Sometimes information requirements dominate the structure and sometimes presentation requirements dominate. Sometimes there is no regular set of facts to relate across all instances, but there is an approach to presentation that is known to work particularly well. 

    A recipe contains both {information requirements}+(index "information requirements") and {presentation requirements}+(index "presentation requirements"):

    * The information requirements include prep time, servings, number of calories, and publication-specific information, such as wine matches. 
    
    * The presentation requirements are the ingredients list, including the precise way that measurements are presented, and the presentation steps.

    One of the key presentation requirements for recipes is to present the list of ingredients as a separate section with precise measurements. Yes, this is also an information requirement. But notice that all recipes (or almost all) break out this list and separate it from the preparation steps. The ingredients are mentioned again in the preparation steps, so why not just put the measurements in the steps and omit the ingredients list? This is an important rhetorical decision. It is not like deciding whether to pull out the prep time and number of servings into separate fields or leave them in the introduction. It has a much more important rhetorical purpose. 

    You separate out the list of ingredients for a recipe because the first step in making a dish is not the first item in the list of preparation steps. The first step is to make sure that you have all the ingredients. One approach to creating the rhetorical structure of a recipe could be to make this an explicit first step, as shown in [*ex.rhetorical-structure-boiled-egg].

    figure:(*ex.rhetorical-structure-boiled-egg) Handling the list of ingredients in a recipe.
    
        ```(sam)
            recipe: Hard Boiled Egg
                introduction:
                    A hard boiled egg is simple and nutritious.
                preparation:
                    1. Make sure you have the following ingredients on hand:
                        * 12 eggs
                        * 2qt water
                    2. Place eggs in pan and cover with water.
                    3. Bring water to a boil.
                    4. Remove from heat and cover for 12 minutes.
                    5. Place eggs in cold water to stop cooking.
                    6. Peel and serve.
                
    However, since this is a universal first step for every recipe, it has been implicitly factored out in the typical rhetorical pattern of a recipe and is supported by a separate list. 
    
    There are other implicit steps as well. One is to collect and measure your ingredients before you start cooking. Some cooks measure and lay out all their ingredients before they start. Others measure and add as they go. By simply providing a list of ingredients rather than making this an explicit step, a recipe accommodates both behaviors.
    
    In fact, there is a step that is prior to all of these: the step of deciding whether to make the dish or not. This is why most recipes have some form of introduction to the dish and a picture of what the finished dish or a typical serving will look like. Obviously no one is ever going to start writing a recipe with "Step 1. Decide if you want to make this dish." But that decision is actually the first step a cook makes, and the rhetorical structure of the recipe supports that step. 

    There is an important generality here about what supporting a task means. Tasks are things people do. Procedures are text structures. Supporting a task is a far broader rhetorical problem than writing a procedure. Supporting a task is about the whole experience for users. It is about them deciding to do the task or not. It is about them deciding if doing the task will support their goals or not. It is about their confidence in tackling the task as opposed to hiring someone else to do it for them.

    In the recipe case, the reader might be a young man who has asked a young woman to his house for dinner for the first time. Is this the right dish for such an occasion? Will cooking from scratch impress her or lead to a disaster? Does he have the confidence to attempt this recipe with so much at stake? And if he decides to cook the dish, does the recipe talk to him in terms he can understand so that he can successfully prepare the dish and, ultimately, impress the young woman? All these things are at stake in the rhetoric of a recipe. The factual correctness of the steps, while essential, is not nearly enough to fully support the task. 
  
    While this is a lot of responsibility for the rhetoric of a recipe to bear, there is also a rhetorical requirement to keep it brief, since the young man is probably going to order out if the recipe you give him is six pages long. So it is also important to look at what a recipe does not do. A typical recipe does not call out a list of the pots and pans and other utensils. Sometimes the instructions will say what kind of pot or spoon to use for a step, but most recipes do not list tools the way they list ingredients, perhaps because they assume all kitchens are similarly equipped. Knitting patterns, which have a similar rhetorical structure to recipes and are frequently used by the same people, tend to identify the specific tools to use. Whatever the reason, not listing tools is as much an established part of the rhetorical structure of recipes as listing ingredients. It is the established way in which recipes present preparation information, and it has been blessed and approved by generations of cooks and young lovers. 

    But while there is a rhetorical consensus about the general pattern of recipes, individual organizations may require a more specific rhetorical structure. As we saw in [#chapter.subject-domain], a wine magazine may require every recipe to have a wine match. A health-oriented magazine may require every recipe to contain nutritional information. Other organizations may have specific requirements about how to present recipes, such as requiring ingredients to be presented in a table rather than a list. An organization's specific requirements -- its unique constraints -- constitute a formal rhetorical structure, a structure you can implement and enforce using structured writing techniques to ensure that your content meets your readers' needs and your organization's requirements.
        
    In some cases, {rhetorical structures}+(index "rhetorical structure;visual appearance of") are immediately obvious because they have a visual shape. The components of a recipe look physically different on a page (which is why recipes are the most popular structured writing example). There is the picture; the introduction, which is a block of text; the ingredients, which are in a list; and the steps, which are in a numbered list. The recipe pattern is visually distinctive even without looking at a word of the text. 
    
    However, rhetorical structures are not about elements that are visually distinct. They are about the different types of information that are required, the way they are expressed, and the order they are presented in. There may be considerable variation in the second two properties. Whether you would count these variations as options within one rhetorical pattern or as defining different rhetorical structures should probably depend on their effect. If two or more particular organizations and means of expression have the same rhetorical effect, they can reasonably be considered as variations on a single rhetorical structure. 

    When you look at a page that appears to be just a sequence of paragraphs with perhaps some subheadings thrown it, it is easy to assume that it has no particular rhetorical structure. But this is not necessarily true. If that page presents a consistent set of information for a particular purpose, and you can find (or reasonably imagine) that same set of information being assembled for the same purpose to describe another object of the same type, then you have a repeatable rhetorical structure. Similarly, where there is a deliberate strategy for laying out an argument or demonstrating or supporting a process, you have rhetorical structure. And where you have a repeatable rhetorical structure, you can define a formal rhetorical structure for a specific business purpose.
   
    By formal {rhetorical structure}+(index "rhetorical structure;mechanical structure compared with"), I mean a set of computable structures into which text is inserted and by which text -- its creation and interpretation -- is constrained. This is not quite the same thing as the mechanical structure of the content, which I look at in [#chapter.mechanical-structure]. The {mechanical structure}+(index "mechanical structure;rhetorical structure compared with") implements the formal rhetorical structure, but the formal rhetorical structure can be described independent of how it is implemented, and indeed, it can be implemented in more than one way. You can even define a formal rhetorical structure without creating or using a mechanical structure to implement it, though obviously without the mechanical structure, you cannot hand over any part of its validation or processing to algorithms. 

    section: Conforming existing content to a type
    
        You should not expect that all your existing content is going to fit into the structures of your formal {rhetorical structure}+(index "rhetorical structure;fitting existing content into a") without changing a word. The point of structured writing is to improve content, not to faithfully represent its current state. Content that has been written in an unstructured format -- even if it obeys a general rhetorical pattern such as a common recipe pattern -- may not fit the precise structure you have defined, particularly if you have factored out parts of the presentation when structuring your content in the {subject domain}.  

        At this stage of a structured content project, you will generally have turned your formal rhetorical structure into a mechanical structure defined in a markup language. You then start to move existing content into the new structure, either by wrapping the markup language tags around existing content or by cutting and pasting chunks of text into a blank markup document. 

        When you start this process, you will find that a lot of that content does not fit the formal rhetorical structure particularly well. You will find some instances that omit information that is required in the formal structure, you will find some instances that contain additional information that is not supported by the formal structure, and you will find instances that express information differently from what the formal structure expects.
      
        These discoveries mean one of six things:
        
        * The content you are working with does not have the same rhetoric as your formal rhetorical type, and therefore, it won't fit into a structure designed for that type. In this case, you have discovered a different type of content, and you need to define a different formal rhetorical model for it.  
        
        * The content you are working with has the same rhetoric as your formal rhetorical type but it does not fit with the markup you created to express that model. In this case, the definition of the markup is incorrect. You need to change the markup definition to accommodate all of the examples of the rhetorical model. (And remember when you do this to go back and change the ones you have already marked up. This will help ensure your new markup design really does fit all the relevant examples.) 
        
        * The content you are working with has the same rhetorical intent (it is trying to achieve the same end) as your formal rhetorical structure, but it takes a different rhetorical approach (it goes about it a different way). There is often more than one rhetorical model that will achieve the same goals. But in a structured writing environment, such variations get in the way of the validation and processing goals of the system. To keep everything consistent and repeatable, you need to rewrite the content to use your chosen rhetorical approach, at which point it will fit the formal rhetorical model and the markup that expresses it.  
        
        * The content you are working with is deficient. It does not accomplish all of the rhetorical goals that you have set for content of this type, and therefore, it does not meet all the requirements of the formal rhetorical structure. This usually means that you need to new research and new writing, not merely reorder the current content. 

        * The content you are working with contains extraneous material that does not fit the formal rhetorical model. A formal rhetorical model defines the information and presentation required to meet a specific need for a specific type of user. Content not written to a formal rhetorical model often includes additional material. This can happen because the writer had a different idea of who would read the content or thought the information should be written down somewhere. In this case, you need to remove the extraneous material, but don't throw it away. That information may be needed somewhere else and may fit well into another rhetorical model. 

        * The content you are working with contains valuable information not found elsewhere. This looks a lot like the extraneous content case, except that the extraneous material is actually valuable and should be part of the formal rhetorical model. In this case, you need to update the formal rhetorical model, and the markup that captures it, to include this new information. This also means that all the examples you have already processed are deficient, and you need to go back and add the required information to them.

        Interpreting the mismatch between existing content and the formal rhetorical types you have defined can make or break your entire structured writing project. You may be tempted to treat existing text as canonical and to try to shape the formal rhetorical type to fit. However, the purpose of structured writing is not to represent existing texts but to partition and redistribute the complexity of the content system, ultimately resulting in better content for the reader. If your current content processes are so good that all your existing content fits your new structures perfectly, then you are not realizing any gain in content quality and you are wasting your time by adding additional mechanical structure. Finding content that does not fit the model is not a sign that the model is broken; rather, it's a sign that the process is working. 
        
        This does not mean that models never need to be changed. However, you should change your models to match the best rhetorical structure for your content to achieve your business goals, not to match your existing content.
        
        This means that applying structure to your existing content is not a trivial or mechanical task. The purpose, after all, is to improve the quality of the existing content, and that is going to mean additional research and writing work to bring the content up to standard.

        It is important to note here that not every markup language implements a formal rhetorical structure. {DocBook}+(index "DocBook;rhetorical structure and") does not implement one at all, nor does {Markdown}+(index "Markdown;rhetorical structure and") or {HTML}+(index "HTML;rhetorical structure and"). Out of the box, {DITA}+(index "DITA;rhetorical structure and") implements only the most general rhetorical structures (though it gives you the capacity to define more precise ones through specialization). People often convert content from one file format to another, including from binary formats to markup formats. This is a mechanical process, though one that may require some cleanup. It does not, in itself, impose any additional constraints on the content. It merely changes the syntax that expresses existing structures. 

        The rhetorical and process improvements that are possible with structured writing do not come about simply by switching the file format of your content from binary to markup. They come through the ability to impose or factor out constraints on content to improve quality and allow algorithms to reliably process the content. These benefits come through the specific structures you use to shape your content and the consistency with which you use those structures. File format conversion does not change the shape or consistency of your content in any way (or, at least, it does not improve it in any way; it may occasionally lose structure that was in the source but which was not recognized or could not be converted by the conversion program). 

        You can often mechanically convert existing content to general {document-domain} formats such as {DITA} and {DocBook}, even for content that was in the media domain or in very loose document-/media-domain hybrids. This does not mean that the resulting {DocBook} or {DITA} output will correctly express the full range of constraints or structures that these formats are capable of.

        Your motive for moving to structured writing should be to improve your content process, not to replicate it with a new set of tools just because those tools implement a fashionable set of acronyms like XML or DITA. It is your structures, your conformance to those structures, and the algorithms you implement to process those structures that will improve your rhetoric and process, not the number of acronyms your tools boast. Adding structure to your content is a writing task, not something than can be done mechanically.

    pagination-tweak:
        min-space: 1.5in
    
    section: Presentation-oriented rhetorical structures
        
        The complete {rhetoric}+(index "rhetorical structure;presentation-oriented") of a subject includes both what is said and how it is presented. For instance, in a recipe, the decision to present the ingredients as a separate list is an presentation element that is separate from the purely informational requirement that the ingredients must all be mentioned somewhere in the recipe. But these kinds of presentation decisions -- ones that isolate particular chunks of information -- can be factored into the subject domain, by making the list of ingredients a set of records that can be presented in many different ways. 

        This will often be the case. The presentational aspect of the rhetorical structure is about isolating a particular set of facts and organizing them in a particular way. If you can isolate those facts in subject-domain markup, the {presentation algorithm} can address the presentational aspects of the rhetorical model. In fact, when the rhetorical design consists of a particular arrangement of facts, the presentation algorithm can create any reasonable rhetorical design from subject-domain content. And isolating facts in subject-domain markup makes the data available for other uses.

        But not all rhetorical models are reducible to an arrangement of facts. This is clearly true of philosophical essays and even of books like this one. In works of this sort, the rhetorical structure -- the course of the argument -- cannot easily be reduced to a repeatable structure. But there are also cases where rhetorical structures can be highly repeatable, and yet they do not consist merely of an arrangement of facts. In other words, there are rhetorical models that focus on the optimal presentation of information in certain circumstance, independent of the specifics of the subject matter. A well-known example is the {pyramid structure}+(index "pyramid rhetorical structure") used in newspapers, which clusters the key points of a story at the top.

        There is a presentation-oriented rhetorical pattern that is useful in technical communication (and perhaps in other fields) that I call the {think-plan-do pattern}+(index "think-plan-do rhetorical pattern")+(index "rhetorical pattern;think-plan-do"). Many technical communication tasks simply involve telling a user how to perform specific functions on specific pieces of machinery. But there are cases in which the user's task has complex input conditions and potentially far-reaching consequences. In such cases, the technical communication task goes well beyond telling users how to operate the machine. It is about helping them to correctly plan their actions to achieve the desired business outcome. 

        You can approach this problem by simply collecting all the relevant facts needed to make a correct decision. But merely listing relevant facts does not help a user who does not fully understand the complexity of the task or the seriousness of its potential consequences. For example, a user may not understand the security implication of a particular configuration option of a computer system. The safety of that option may depend on a variety of factors, such as who has access to the system, what software is running, what data it contains, and how other settings are configured. 

        A user who does not understand all of this information might either be intimidated by the list of facts and do nothing or simply skip them and go straight to the beginning of the procedure. Either course of action could have negative consequences.
        
        The think-plan-do rhetorical structure addresses this problem by walking users through each decision so they can plan their actions correctly. This can consist of a number of carefully designed discrete questions designed to help users figure out which issues apply to their situation and, if they do apply, how to deal with them. 
        
        In other words, the think-plan-do model presents a formal planning methodology in the form of a set of questions which break the planning process into manageable pieces that users can successfully comprehend and act on. It supports cognition by breaking a complex subject down into manageable pieces.

        Depending on the material, you may be able to find a common pattern in the subject matter of these questions. For example, you may find that the same questions need to be considered for each configuration setting. However, in many cases, the questions that need to be asked are particular to the individual case. Whether you can find patterns or not, the rhetorical device of breaking the planning process into a set of discrete questions is most important to improving the quality of the content and ensuring that the reader is successful. 
               
        So far in this book I have mostly presented document-domain models as rather loose collections of generic document structures mainly used to {separate content from formatting} or to facilitate {content reuse}. But this example shows that the document domain can also be used to model a specific rhetorical strategy. 
        
        In some cases, you may find that specific subjects require a specific rhetorical strategy but do not lend themselves to the {subject-domain} approach of breaking out a consistent set of information for each instance of a subject. In these cases, creating a {document-domain} model that enforces the appropriate rhetorical strategy may be the best approach. 

    pagination-tweak:
        min-space: 1.5in

    section: Rhetorical meta-models
        index:: type, term
            concept, meta-models
    
        There are different ways of thinking about the {rhetorical structure}+(index "rhetorical pattern;meta-models") of content. Above, I describe the topic pattern of a recipe as consisting of a picture, an introduction, ingredients, and a list of preparation steps. 

        However, there are a great many other type of information with a similar pattern. For instance, a knitting pattern  usually has a picture of the garment, an introduction describing the project, a list of the yarns and needles required, and a list of steps for knitting and assembling the pieces. Lots of other things look similar. Instructions for assembling flat-pack furniture, for example, or planting flowers in your garden. 

        These are not the same rhetorical structure. You would not confuse a recipe with a knitting pattern. And each of them can have specific information fields that would make no sense for the others. A pot roast will never have washing instructions. A flat-pack bookcase will never have a wine match. Nonetheless, they all have the basic pattern of picture, description, list of stuff you need, steps to complete. I call this the make-thing-out-of-stuff-with-tools pattern.

        The make-thing-out-of-stuff-with-tools pattern is a meta-model. It is not based on seeing similarities between texts, but on seeing similarities in the rhetorical models of texts. A meta-model is not intended for creating content directly, but it can provide hints that help you develop individual rhetorical models. That is, the make-thing-out-of-stuff-with-tools meta-model might suggest how to construct the rhetorical model for a fly-tying guide. 

        Not only are there meta-models for topics, like the make-thing-out-of-stuff-with-tools pattern, there are also meta-models for the different types of information that go into a meta-model, such as the picture, description, list of stuff you need, and steps to complete. These are sometimes called "information types" (a confusing term, since text at any scale expresses information, and therefore the structure of information at any scale is an {information type}+(index "information types;meta-models compared with")).
        
        Two notable examples of these information type meta-models are found in {Information Mapping} and {DITA}. Information Mapping proposes that documents are composed of six information types: procedure, process, principle, concept, structure, and fact.[http://www.informationmapping.com/fspro2013-tutorial/infotypes/infotype1.html] In Information Mapping, every document is composed of some combination of these six information types, where the arrangement is specified by a map.
        
        {DITA}+(index "DITA;information types in") proposes something similar, but it has just three types: concept, task, and reference,[*3] which, confusingly, it calls topic types. Like information mapping, DITA assembles documents out of these topic (information) types using a map. 
        
        footnote:(*3)
            Or, at least, it originally had these three types. The DITA specification now includes other topic types, some of which are much more concrete than these original three. 
        
        In the concept/task/reference meta-model, our recipe topic pattern would consist of one concept topic (the introduction), one reference topic (the list of ingredients), and one task topic (the preparation steps). And our make-thing-out-of-stuff-with-tools meta-model would similarly consist of one concept topic (description), one reference topic (list of stuff you need), and one task topic (steps to complete). (DITA's information model does not include pictures. It just provides a mechanism for including them in textual topic types.)
        

        section: Meta-models vs generic models
        
            Ideally, a {meta-model}+(index "meta-models;generic models vs") should just be a model of models. You should not be able to use it for anything other than to create concrete models. It should not only suggest those things that each specific model should have in common but also those things that are specific to particular instances of the pattern. For example, the meta-model should in some way suggest that a recipe instance of the make-thing-out-of-stuff-with-tools meta-model might include a wine match. (A thing-goes-with-other-thing relationship, perhaps.)
            
            In practice, though, meta-models often turn out to be simply a list of those things that all instances of the meta-model have in common. In many cases, instead of inventing an entirely new notation for describing meta-models, people just create a model with only the common properties. Thus the expression of the meta-model takes the form of a generic model, which means that it is perfectly possible to write content using that generic model. Thus while DITA's concept, task, and reference topic types are intended as meta-models to be specialized into concrete models, they are implemented as generic models which can be used directly. 
            
            A great many DITA users don't {specialize}+(index "specialization") at all. They write all of their content using the base task, reference, and concept topic types (or the even more basic "topic" topic type, of which task, reference, and concept are actually specializations). This means that the topic type imposes no specific rhetorical pattern. But at the same time, the generic pattern can be confining. For instance, DITA's default topic model does not allow you to have two procedures in a single task topic. 
            
            Are meta-models useful for defining topic patterns? If a concrete topic pattern describes the kinds of information that are needed to help a particular audience perform a particular task, do you arrive at that pattern more easily by derivation from a meta-model or from observation of multiple concrete examples of actual topics? 
            
            The obvious problem with the current generation of content meta-models is that none of them alert you that a recipe might need a field for a wine match. It is not impossible to imagine that a meta-model could do this. A meta-model could observe that objects are commonly used with other objects and lead you to ask what other objects is a steak dinner used with. There are obviously multiple aspects of this question. A steak dinner is used with a knife and fork. A steak dinner is used with a table and chair. A steak dinner is used with family and friends. A steak dinner is used with a glass of wine. How do you characterize each of these thing-used-with-thing relationships in a meta-model, and how do you decide which of these types of thing-used-with-thing types is relevant to a recipe? 
            
            Perhaps, for instance, you might decide that because a recipe describes a foodstuff, thing-used-with-thing relationships are relevant when the other thing is also a foodstuff. In other words, you might decide that a thing-used-with-like-thing relationship is part of the meta-model.[*2] (I am not, by the way, suggesting that this is a useful part of a meta-model, I merely wanted to illustrate the problem of defining a meta-model that would comprehend all the specific models you might care about in the real world.)
            
            footnote:(*2)
                Rob Hanna's Enterprise Content Metamodel[https://www.oasis-open.org/committees/download.php/41040/Enterprise%20Content%20Metamodel.pptx] does attempt to do something like this for business information, attempting to describe the relationships between pieces of business content based on the business functions they serve as a basis for deriving specific information types. 
            
            This is getting complicated enough for me to conclude that, while the {ontologists}(concept "ontology") may one day come up with a such a model and a reliable way to derive concrete content models from it, for most writers, information architects, and content strategist, building a concrete topic model from the observation of instances is probably the preferable method. 

            Then again, it is often more a matter of how the information architect's brain works. A top-down thinker will prefer a top-down approach and a bottom-up thinker will prefer a bottom-up approach. As long as they arrive at the same place, and as long as the meta-model the top-down thinker uses does not impose unnecessary complexity or abstraction on the final model, it is less important how they arrive at it. 
            
            Creating a good {subject-domain}+(index "subject domain;building a structured model in the") structured model for content is actually pretty simple when you get down to it. You ask yourself five questions:
            
            1. What elements of information does the reader need to fulfill whatever purpose this unit of content is meant to serve? 
            
            2. What is the best way to express each of these elements? 
            
            3. What is the best way to organize these elements so that readers can quickly identify the right content and find the information they need? 
            
            4. What constraints do I need to apply to ensure that writers create content that satisfies the first three questions, and how will I test conformance to those constraints? 
            
            5. What level of detail and precision do I need in the content structures to make sure that the structured writing algorithms run reliably. 
            
            You can approach these questions with a meta-model, concrete examples, or a combination of both. Of course, answering these questions is not necessarily easy, but the process itself is simple, and you should not make it any more complex than it needs to be.             
        
    section: Making the rhetorical structure explicit
     
        I noted above that there can be a {rhetorical structure}+(index "rhetorical structure;creating an explicit") in a piece of text that is just a sequence of paragraphs. You can discern the topic pattern in those paragraph, model that pattern in a content type, and still present the output as a sequence of paragraphs. Presumably, in each instance of the topic type, those paragraphs would now be more consistently expressed, with fewer errors and omissions than before, but the presentation itself would be the same. 
        
        Alternatively, you may choose to make the rhetorical structure more explicit to the reader as well as to the writer. In this case, the sequence of paragraphs might be replaced with a distinct combination of headings, graphics, tables, lists, pictures, and text sections that would repeat in every topic of that type. 
        
        The question, of course, is whether making the rhetorical structure explicit in this way improves the content. In its favor, a more explicit rhetorical structure makes it easier for readers to recognize the type. (As I noted above, you can recognize a recipe by its shape, without reading a word.) This makes it easier to identify {relevant} content, which is particularly important on the {web}+(index "web;importance of relevance on the"). It can also make it easier to scan the content to pick out the parts you need. The argument against this treatment is that it can lead to a noisier page that is harder to read straight through. 
        
        Whether you want to make the rhetorical structure of your pages explicit in these ways needs to be decided on a case-by-case basis. But don't fall into the trap of supposing that because you have chosen a plain presentation, that means there is no rhetorical structure and, therefore, no structured type. The rhetorical structure of the content is separate from the presentation of the content, and the aim of structured writing is to improve the rhetorical structure, not just to make the presentation more uniform. 

    section: Structure and repeatability
    
        However much success you may have in defining common rhetorical structures, most content does not surrender to the analytical knife entirely. When you define a rhetorical structure, you are essentially defining something {repeatable}+(index "repeatability;structure and"). While you could hypothetically take a piece of exposition and define the structured that it follows, this is only useful in a structured writing sense when that structure is repeatable -- that is, when there is another piece of content that can follow the same structure, enabling you to reuse your design and testing work and allowing algorithms to take over parts of the processing of that structure. 
        
        Where the rhetorical structure of a piece is unique -- specifically when it is irreducibly unique, not just unique because you have not recognized its similarity to the structure of other pieces -- there is no benefit to defining an external structure. Irreducible rhetorical uniqueness can occur at any scale. Sometimes it occurs at the scale of an entire book, such as this one. Sometimes it occurs in a single descriptive paragraph in a reference work that otherwise consists entirely of repeatable key/value pairs.[*fn.desc]

        footnote:(*fn.desc)
            This is why so many content types have a "description" section for everything that cannot be easily modeled. It's not that that section contains the only descriptive content -- all content is descriptive. It's that it contains content that cannot be reduced -- or that the person who designed the content type has chosen not to reduce -- to key/value pairs. 
        
        This variation in the degree of unique vs repeatable rhetorical structure in content is the reason you need different structures for different types of content. If you try to fit all content into one structure, however broad that structure may be, you face two potential problems:

        * You fail to model much of the repeatable structure of your content, which means you cannot manage or apply algorithms effectively.

        * You squeeze unique rhetorical structures into the mold of a repeatable structure, distorting their rhetoric.

        The latter is a common problem with strict information typing systems like {DITA}'s task/concept/reference, which often don't fit the rhetorical pattern the writer is trying to create.
        
        You can usefully consider {rhetorical repeatability}+(index "rhetorical repeatability") in three categories:
        
        |Repeatable data| The same information is required in each instance. For instance, a recipe requires the name, quantity, and unit for each ingredient of a dish. 
        
        |Repeatable argument| The way in which the information is conveyed to the reader is the same each time. For instance, the ingredients of a recipe are presented as a table each time. 
        
        |Repeatable relationships| The way in which the subjects mentioned in one document are related to subjects in the real world and to the documents that treat those subjects. For instance, items in an ingredients list might be related (and linked) to pages describing each ingredient in detail -- its history, nutritional characteristics, availability, and possible substitutions. 
        
        Remember that the ultimate aim is to partition and redirect {complexity}+(index "complexity;repeatability and") in the content system. Part of that complexity is the varying levels of repeatability in content -- a problem seldom seen in other forms of data management. If you want to deal effectively with all of the complexity in your content system, then you need to deal with this variation in degrees of repeatability. If you don't deal with it successfully, either the repeatability of repeatable content will be lost or diminished, or the uniqueness of unique content will be compromised. Either way, complexity will fall through to the reader in the form of impaired content quality.  
         
    section: Rhetoric and process

        How does capturing the rhetorical model of content help improve the content creation {process}+(index "process;rhetoric and")+(index "rhetoric;process and")? 
    
        If the aim of structured writing is to partition and redirect complexity in the content system without letting any of that complexity leak out of the process and fall down to the reader, then the correctness and consistency of rhetorical models is a core concern. Poor rhetoric means poor content, and poor content means that the complexity of achieving consistent and correct rhetoric has been dropped somewhere in the content system. 

    pagination-tweak:
        min-space: 1.5in

        A content system relies for its effectiveness on the ability of its principle writers and occasional contributors to maintain a consistent rhetorical standard. The three tools that it has available to do this are:

        * Minimize intrusions into the attention of writers. Any attention given to other matters while writing is attention taken away from rhetoric. 
        
        * Guide writers to help them provide the correct rhetoric. In other words, reuse the rhetorical design work that you have done and that you have tested and refined with readers.

        * Partition out the rhetorical aspects of a composition by collecting facts in a subject-domain structure that can then be transformed into the appropriate rhetorical form by algorithms. 

        Content inherently varies in how structured it is, so the more structured of these techniques only work for some part of your content set. You need all three techniques to provide comprehensive rhetorical support across your content system. In [#part.algorithms], I examine how rhetorical structures support process at the document level. In [#part.management], I show how they support the management and maintenance of the content set as a whole. 
